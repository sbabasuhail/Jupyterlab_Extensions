import { jsx } from "@emotion/react/jsx-runtime";
import _styled from "@emotion/styled/base";
import { useMemo } from "react";
import { getColor, theme } from "@hitachivantara/uikit-styles";
import { isXS, isSemantic } from "./utils.js";
const getDims = (size) => ({
  width: size,
  height: size
});
const getColorVars = (colorArray) => {
  return colorArray.reduce((acc, value, index) => {
    acc[`--color-${index}`] = value;
    return acc;
  }, {});
};
const getIconSize = (iconSize, hasSpecialSize, width, height) => {
  if (width && height)
    return {
      width,
      height
    };
  const calcSize = (size) => hasSpecialSize ? size + 8 : size;
  switch (iconSize) {
    case "XS":
      return getDims(calcSize(12));
    default:
    case "S":
      return getDims(calcSize(16));
    case "M":
      return getDims(calcSize(32));
    case "L":
      return getDims(calcSize(96));
  }
};
const getIconColors = (palette = [], color, semantic, inverted = false) => {
  var _a;
  const colorArray = palette;
  if (typeof color === "string") {
    colorArray[0] = getColor(color);
  } else if (Array.isArray(color)) {
    colorArray.forEach((_, i) => {
      colorArray[i] = getColor(color[i]);
    });
  }
  if (semantic) {
    colorArray[0] = ((_a = theme.colors) == null ? void 0 : _a[semantic]) || colorArray[0];
  }
  if (inverted && colorArray[1]) {
    colorArray[1] = colorArray[0];
    colorArray[0] = "none";
  }
  return colorArray;
};
const splitIconProps = (iconName, props) => {
  const {
    role,
    title,
    iconSize: iconSizeProp,
    width,
    height,
    svgProps,
    "aria-label": ariaLabel,
    "aria-labelledby": ariaLabelledBy,
    "aria-describedby": ariaDescribedBy,
    ...rest
  } = props;
  const iconSize = iconSizeProp ?? (isXS(iconName) ? "XS" : "S");
  const size = getIconSize(iconSize, isSemantic(iconName), width, height);
  const newSvgProps = {
    focusable: false,
    // pass size props
    ...size,
    // pass a11y props
    title,
    role,
    "aria-label": ariaLabel,
    "aria-labelledby": ariaLabelledBy,
    "aria-describedby": ariaDescribedBy,
    // pass all other `svgProps`
    ...svgProps
  };
  const newOtherProps = {
    iconSize,
    ...rest
  };
  return [newSvgProps, newOtherProps];
};
function useIconColor(palette = [], color, semantic, inverted = false) {
  return useMemo(() => {
    return getIconColors(palette, color, semantic, inverted);
  }, [color, inverted, palette, semantic]);
}
function useIconSize(iconSize, height, width, hasSpecialSize = false) {
  return useMemo(() => {
    return getIconSize(iconSize, hasSpecialSize, width, height);
  }, [hasSpecialSize, height, iconSize, width]);
}
function useIcon(props, palette = [], hasSpecialSize = false) {
  const {
    color,
    iconSize,
    width,
    height,
    semantic,
    inverted
  } = props;
  const colorArray = useIconColor(palette, color, semantic, inverted);
  const size = useIconSize(iconSize, height, width, hasSpecialSize);
  return {
    size,
    colorArray
  };
}
const StyledIconBase = /* @__PURE__ */ _styled("div", process.env.NODE_ENV === "production" ? {
  target: "e13q2m0o0"
} : {
  target: "e13q2m0o0",
  label: "StyledIconBase"
})(({
  iconSize
}) => ({
  display: "flex",
  "& svg": {
    margin: "auto",
    color: "inherit"
  },
  ...iconSize === "XS" && getDims(32),
  ...iconSize === "S" && getDims(32),
  ...iconSize === "M" && getDims(48),
  ...iconSize === "L" && getDims(112)
}), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");
const IconBase = ({
  children,
  palette,
  height,
  width,
  color,
  semantic,
  inverted = false,
  iconSize = "S",
  iconName,
  style,
  ...others
}) => {
  const colorArray = getIconColors(palette, color, semantic, inverted);
  const colorVars = getColorVars(colorArray);
  return /* @__PURE__ */ jsx(StyledIconBase, { "data-name": iconName, iconSize, style: {
    ...colorVars,
    ...style
  }, ...others, children });
};
export {
  IconBase,
  StyledIconBase,
  getColorVars,
  getIconColors,
  getIconSize,
  splitIconProps,
  useIcon,
  useIconColor,
  useIconSize
};
//# sourceMappingURL=IconBase.js.map
