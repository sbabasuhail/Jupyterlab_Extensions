{"version":3,"file":"IconBase.js","sources":["../../bin/IconBase.tsx"],"sourcesContent":["import styled from \"@emotion/styled\";\nimport React, { HTMLAttributes, AllHTMLAttributes, useMemo } from \"react\";\nimport { theme, getColor } from \"@hitachivantara/uikit-styles\";\nimport { isSemantic, isXS } from \"./utils\";\n\nconst getDims = (size: number) => ({ width: size, height: size });\n\nexport const getColorVars = (colorArray: string[]) => {\n  return colorArray.reduce((acc, value, index) => {\n    acc[`--color-${index}`] = value;\n    return acc;\n  }, {} as Record<string, string>);\n};\n\nexport const getIconSize = (\n  iconSize?: IconSize,\n  hasSpecialSize?: boolean,\n  width?: number,\n  height?: number\n) => {\n  if (width && height) return { width, height };\n\n  const calcSize = (size: number) => (hasSpecialSize ? size + 8 : size);\n\n  switch (iconSize) {\n    case \"XS\":\n      return getDims(calcSize(12));\n    // eslint-disable-next-line default-case-last\n    default:\n    case \"S\":\n      return getDims(calcSize(16));\n    case \"M\":\n      return getDims(calcSize(32));\n    case \"L\":\n      return getDims(calcSize(96));\n  }\n};\n\nexport const getIconColors = (\n  palette: string[] = [],\n  color?: string | string[],\n  semantic?: string,\n  inverted = false\n) => {\n  const colorArray = palette;\n\n  if (typeof color === \"string\") {\n    colorArray[0] = getColor(color) as string;\n  } else if (Array.isArray(color)) {\n    colorArray.forEach((_, i) => {\n      colorArray[i] = getColor(color[i]) as string;\n    });\n  }\n\n  if (semantic) {\n    colorArray[0] = theme.colors?.[semantic] || colorArray[0];\n  }\n\n  if (inverted && colorArray[1]) {\n    // eslint-disable-next-line prefer-destructuring\n    colorArray[1] = colorArray[0];\n    colorArray[0] = \"none\";\n  }\n\n  return colorArray;\n};\n\n/** Splits icon `props` between those to be passed to container or svg */\nexport const splitIconProps = (iconName: string, props: IconBaseProps) => {\n  const {\n    role,\n    title,\n    iconSize: iconSizeProp,\n    width,\n    height,\n    svgProps,\n    \"aria-label\": ariaLabel,\n    \"aria-labelledby\": ariaLabelledBy,\n    \"aria-describedby\": ariaDescribedBy,\n    ...rest\n  } = props;\n  const iconSize = iconSizeProp ?? (isXS(iconName) ? \"XS\" : \"S\");\n  const size = getIconSize(iconSize, isSemantic(iconName), width, height);\n\n  const newSvgProps = {\n    focusable: false,\n    // pass size props\n    ...size,\n    // pass a11y props\n    title,\n    role,\n    \"aria-label\": ariaLabel,\n    \"aria-labelledby\": ariaLabelledBy,\n    \"aria-describedby\": ariaDescribedBy,\n    // pass all other `svgProps`\n    ...svgProps,\n  } satisfies HTMLAttributes<SVGElement>;\n\n  const newOtherProps = {\n    iconSize,\n    ...rest,\n  } satisfies IconBaseProps;\n\n  return [newSvgProps, newOtherProps] as const;\n};\n\nexport function useIconColor(\n  palette: string[] = [],\n  color?: string | string[],\n  semantic?: string,\n  inverted = false\n) {\n  return useMemo(() => {\n    return getIconColors(palette, color, semantic, inverted);\n  }, [color, inverted, palette, semantic]);\n}\n\nexport function useIconSize(\n  iconSize?: IconSize,\n  height?: number,\n  width?: number,\n  hasSpecialSize = false\n) {\n  return useMemo(() => {\n    return getIconSize(iconSize, hasSpecialSize, width, height);\n  }, [hasSpecialSize, height, iconSize, width]);\n}\n\nexport function useIcon(\n  props: IconBaseProps,\n  palette: string[] = [],\n  hasSpecialSize = false\n) {\n  const { color, iconSize, width, height, semantic, inverted } = props;\n  const colorArray = useIconColor(palette, color, semantic, inverted);\n  const size = useIconSize(iconSize, height, width, hasSpecialSize);\n\n  return { size, colorArray };\n}\n\nexport type IconSize = \"XS\" | \"S\" | \"M\" | \"L\";\n\ntype HTMLDivProps = Pick<AllHTMLAttributes<HTMLDivElement>, \"name\"> &\n  Pick<\n    HTMLAttributes<HTMLDivElement>,\n    Exclude<keyof HTMLAttributes<HTMLDivElement>, \"color\" | \"height\" | \"width\">\n  >;\n\nexport interface IconBaseProps extends HTMLDivProps {\n  /**\n   * A String or Array of strings representing the colors to override in the icon.\n   * Each element inside the array will override a different color.\n   * You can use either an HEX or color name from the palette.\n   */\n  color?: string | string[];\n  /** Sets one of the standard sizes of the icons */\n  iconSize?: IconSize;\n  /** A string that will override the viewbox of the svg */\n  viewbox?: string;\n  /** A string that will override the height of the svg */\n  height?: number;\n  /** A string that will override the width of the svg */\n  width?: number;\n  /**\n   * Sets one of the standard semantic palette colors of the icon\n   * @deprecated use the `color` prop instead\n   */\n  semantic?: string;\n  /**\n   * Inverts the background-foreground on semantic icons\n   * @deprecated use the `color` prop instead\n   */\n  inverted?: boolean;\n  /** Props passed down to the svg element. */\n  svgProps?: React.SVGProps<SVGSVGElement>;\n}\n\nexport const StyledIconBase = styled(\"div\")(\n  ({ iconSize }: { iconSize: IconSize }) => ({\n    display: \"flex\",\n    \"& svg\": {\n      margin: \"auto\",\n      color: \"inherit\",\n    },\n    ...(iconSize === \"XS\" && getDims(32)),\n    ...(iconSize === \"S\" && getDims(32)),\n    ...(iconSize === \"M\" && getDims(48)),\n    ...(iconSize === \"L\" && getDims(112)),\n  })\n);\n\nexport const IconBase = ({\n  children,\n  palette,\n  height,\n  width,\n  color,\n  semantic,\n  inverted = false,\n  iconSize = \"S\",\n  iconName,\n  style,\n  ...others\n}: IconBaseProps & { palette: string[]; iconName: string }) => {\n  const colorArray = getIconColors(palette, color, semantic, inverted);\n  const colorVars = getColorVars(colorArray);\n\n  return (\n    <StyledIconBase\n      data-name={iconName}\n      iconSize={iconSize}\n      style={{ ...colorVars, ...style }}\n      {...others}\n    >\n      {children}\n    </StyledIconBase>\n  );\n};\n"],"names":["getDims","size","width","height","getColorVars","colorArray","reduce","acc","value","index","getIconSize","iconSize","hasSpecialSize","calcSize","getIconColors","palette","color","semantic","inverted","getColor","Array","isArray","forEach","_","i","theme","colors","splitIconProps","iconName","props","role","title","iconSizeProp","svgProps","ariaLabel","ariaLabelledBy","ariaDescribedBy","rest","isXS","isSemantic","newSvgProps","focusable","newOtherProps","useIconColor","useMemo","useIconSize","useIcon","StyledIconBase","process","env","NODE_ENV","target","label","display","margin","IconBase","children","style","others","colorVars"],"mappings":"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"}