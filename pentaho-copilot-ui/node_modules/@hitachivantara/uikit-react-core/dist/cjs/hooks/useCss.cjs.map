{"version":3,"file":"useCss.cjs","sources":["../../../src/hooks/useCss.ts"],"sourcesContent":["import { useMemo } from \"react\";\nimport clsx from \"clsx\";\nimport { css as emotionCss, EmotionCache } from \"@emotion/css\";\nimport { serializeStyles, RegisteredCache } from \"@emotion/serialize\";\nimport { insertStyles, getRegisteredStyles } from \"@emotion/utils\";\nimport { useEmotionCache } from \"@core/hooks/useEmotionCache\";\n\ntype CSS = typeof emotionCss;\n\nfunction getRef(args: any[]) {\n  if (args.length !== 1) {\n    return { args, ref: undefined };\n  }\n\n  const [arg] = args;\n\n  if (!(arg instanceof Object)) {\n    return { args, ref: undefined };\n  }\n\n  if (!(\"ref\" in arg)) {\n    return { args, ref: undefined };\n  }\n\n  const { ref, ...argCopy } = arg;\n  return { args: [argCopy], ref };\n}\n\nconst cssFactory = (() => {\n  function merge(registered: RegisteredCache, css: CSS, className: string) {\n    const registeredStyles: string[] = [];\n\n    const rawClassName = getRegisteredStyles(\n      registered,\n      registeredStyles,\n      className\n    );\n\n    if (registeredStyles.length < 2) {\n      return className;\n    }\n\n    return rawClassName + css(registeredStyles);\n  }\n\n  function innerCssFactory(cache: EmotionCache) {\n    const css: CSS = (...styles: any) => {\n      const { ref, args } = getRef(styles);\n      const serialized = serializeStyles(args, cache.registered);\n      insertStyles(cache, serialized, false);\n      return `${cache.key}-${serialized.name}${\n        ref === undefined ? \"\" : ` ${ref}`\n      }`;\n    };\n\n    const cx = (...args: any) => merge(cache.registered, css, clsx(args));\n\n    return { css, cx };\n  }\n\n  return innerCssFactory;\n})();\n\nexport function useCss() {\n  const cache = useEmotionCache();\n  return useMemo(() => cssFactory(cache), [cache]);\n}\n"],"names":["getRef","args","length","ref","undefined","arg","Object","argCopy","cssFactory","merge","registered","css","className","registeredStyles","rawClassName","getRegisteredStyles","innerCssFactory","cache","styles","serialized","serializeStyles","key","name","cx","clsx","useCss","useEmotionCache","useMemo"],"mappings":";;;;;;;;;AASA,SAASA,OAAOC,MAAa;AACvBA,MAAAA,KAAKC,WAAW,GAAG;AACd,WAAA;AAAA,MAAED;AAAAA,MAAME,KAAKC;AAAAA,IAAAA;AAAAA,EACtB;AAEM,QAAA,CAACC,GAAG,IAAIJ;AAEV,MAAA,EAAEI,eAAeC,SAAS;AACrB,WAAA;AAAA,MAAEL;AAAAA,MAAME,KAAKC;AAAAA,IAAAA;AAAAA,EACtB;AAEI,MAAA,EAAE,SAASC,MAAM;AACZ,WAAA;AAAA,MAAEJ;AAAAA,MAAME,KAAKC;AAAAA,IAAAA;AAAAA,EACtB;AAEM,QAAA;AAAA,IAAED;AAAAA,IAAK,GAAGI;AAAAA,EAAYF,IAAAA;AACrB,SAAA;AAAA,IAAEJ,MAAM,CAACM,OAAO;AAAA,IAAGJ;AAAAA,EAAAA;AAC5B;AAEA,MAAMK,cAAc,MAAM;AACfC,WAAAA,MAAMC,YAA6BC,KAAUC,WAAmB;AACvE,UAAMC,mBAA6B,CAAA;AAEnC,UAAMC,eAAeC,MAAAA,oBACnBL,YACAG,kBACAD,SACF;AAEIC,QAAAA,iBAAiBX,SAAS,GAAG;AACxBU,aAAAA;AAAAA,IACT;AAEOE,WAAAA,eAAeH,IAAIE,gBAAgB;AAAA,EAC5C;AAEA,WAASG,gBAAgBC,OAAqB;AACtCN,UAAAA,MAAWA,IAAIO,WAAgB;AAC7B,YAAA;AAAA,QAAEf;AAAAA,QAAKF;AAAAA,MAAAA,IAASD,OAAOkB,MAAM;AACnC,YAAMC,aAAaC,UAAAA,gBAAgBnB,MAAMgB,MAAMP,UAAU;AAC5CO,YAAAA,aAAAA,OAAOE,YAAY,KAAK;AACrC,aAAQ,GAAEF,MAAMI,GAAI,IAAGF,WAAWG,IAAK,GACrCnB,QAAQC,SAAY,KAAM,IAAGD,GAAI,EAClC;AAAA,IAAA;AAGGoB,UAAAA,KAAKA,IAAItB,SAAcQ,MAAMQ,MAAMP,YAAYC,KAAKa,cAAAA,QAAKvB,IAAI,CAAC;AAE7D,WAAA;AAAA,MAAEU;AAAAA,MAAKY;AAAAA,IAAAA;AAAAA,EAChB;AAEOP,SAAAA;AACT;AAEO,SAASS,SAAS;AACvB,QAAMR,QAAQS,gBAAAA;AACd,SAAOC,MAAAA,QAAQ,MAAMnB,WAAWS,KAAK,GAAG,CAACA,KAAK,CAAC;AACjD;;"}