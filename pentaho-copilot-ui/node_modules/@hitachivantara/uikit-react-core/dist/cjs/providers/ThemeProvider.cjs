"use strict";
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const jsxRuntime = require("@emotion/react/jsx-runtime");
const React = require("react");
const uikitStyles = require("@hitachivantara/uikit-styles");
const uikitReactShared = require("@hitachivantara/uikit-react-shared");
const styles = require("@mui/material/styles");
const theme = require("../utils/theme.cjs");
const HvThemeProvider = ({
  children,
  themes: themesList,
  theme: theme$1,
  emotionCache,
  colorMode,
  themeRootId: rootId
}) => {
  const initTheme = uikitStyles.parseTheme(themesList, theme$1, colorMode);
  const [parsedTheme, setParsedTheme] = React.useState(initTheme);
  const [activeTheme, setActiveTheme] = React.useState(parsedTheme.theme);
  const [selectedTheme, setSelectedTheme] = React.useState(parsedTheme.selectedTheme);
  const [selectedMode, setThemeMode] = React.useState(parsedTheme.selectedMode);
  const [colorModes, setColorModes] = React.useState(parsedTheme.colorModes);
  const [themes, setThemes] = React.useState(themesList.map((t) => t.name));
  React.useEffect(() => {
    const pTheme = uikitStyles.parseTheme(themesList, theme$1, colorMode);
    setThemes(themesList.map((t) => t.name));
    setParsedTheme(pTheme);
  }, [themesList, theme$1, colorMode]);
  React.useEffect(() => {
    setActiveTheme(parsedTheme.theme);
    setSelectedTheme(parsedTheme.selectedTheme);
    setThemeMode(parsedTheme.selectedMode);
    setColorModes(parsedTheme.colorModes);
    theme.setElementAttrs(parsedTheme.selectedTheme, parsedTheme.selectedMode, parsedTheme.colorScheme, rootId);
  }, [parsedTheme, rootId]);
  const changeTheme = React.useCallback((newTheme = selectedTheme, newMode = selectedMode) => {
    const pTheme = uikitStyles.parseTheme(themesList, newTheme, newMode);
    setParsedTheme(pTheme);
  }, [selectedMode, selectedTheme, themesList]);
  const value = React.useMemo(() => ({
    themes,
    colorModes,
    activeTheme,
    selectedTheme,
    selectedMode,
    changeTheme,
    rootId
  }), [themes, colorModes, activeTheme, selectedTheme, selectedMode, changeTheme, rootId]);
  const MuiTheme = styles.createTheme({
    breakpoints: {
      values: {
        ...activeTheme.breakpoints.values
      }
    }
  });
  const emotionCacheValue = React.useMemo(() => ({
    cache: emotionCache
  }), [emotionCache]);
  return /* @__PURE__ */ jsxRuntime.jsx(styles.ThemeProvider, { theme: MuiTheme, children: /* @__PURE__ */ jsxRuntime.jsx(uikitReactShared.HvThemeContext.Provider, { value, children: /* @__PURE__ */ jsxRuntime.jsx(uikitReactShared.EmotionContext.Provider, { value: emotionCacheValue, children }) }) });
};
Object.defineProperty(exports, "EmotionContext", {
  enumerable: true,
  get: () => uikitReactShared.EmotionContext
});
Object.defineProperty(exports, "HvThemeContext", {
  enumerable: true,
  get: () => uikitReactShared.HvThemeContext
});
Object.defineProperty(exports, "defaultCacheKey", {
  enumerable: true,
  get: () => uikitReactShared.defaultCacheKey
});
Object.defineProperty(exports, "defaultEmotionCache", {
  enumerable: true,
  get: () => uikitReactShared.defaultEmotionCache
});
exports.HvThemeProvider = HvThemeProvider;
//# sourceMappingURL=ThemeProvider.cjs.map
