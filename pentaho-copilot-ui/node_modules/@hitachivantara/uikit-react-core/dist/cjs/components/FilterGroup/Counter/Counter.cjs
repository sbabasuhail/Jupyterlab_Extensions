"use strict";
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const jsxRuntime = require("@emotion/react/jsx-runtime");
const React = require("react");
const FilterGroupContext = require("../FilterGroupContext.cjs");
const Counter_styles = require("./Counter.styles.cjs");
const getExistingFiltersById = (idx, filterValues, filterOptions) => {
  var _a;
  let total = 0;
  (_a = filterValues[idx]) == null ? void 0 : _a.forEach((fv) => {
    var _a2;
    if ((_a2 = filterOptions[idx]) == null ? void 0 : _a2.data.find((f) => f.id === fv)) {
      total += 1;
    }
  });
  return total;
};
const HvFilterGroupCounter = ({
  className,
  id,
  classes: classesProp
}) => {
  const {
    classes,
    cx
  } = Counter_styles.useClasses(classesProp);
  const {
    filterOptions,
    filterValues = [],
    appliedFilters = []
  } = React.useContext(FilterGroupContext.HvFilterGroupContext);
  const options = id && filterOptions.find((option) => option.id === id) ? [filterOptions.find((option) => option.id === id)] : filterOptions;
  const optionIdx = filterOptions.findIndex((option) => option.id === id);
  let groupsCounter = 0;
  appliedFilters.filter((elem) => elem !== void 0).forEach((fg, i) => {
    groupsCounter += getExistingFiltersById(i, filterValues, filterOptions);
  });
  const partialCounter = id ? getExistingFiltersById(optionIdx, filterValues, filterOptions) || 0 : groupsCounter;
  const totalCounter = options.reduce((acc, option) => acc + option.data.length, 0);
  return /* @__PURE__ */ jsxRuntime.jsxs("div", { className: cx(classes.root, className), children: [
    partialCounter > 0 ? /* @__PURE__ */ jsxRuntime.jsx("p", { className: classes.partialCounter, children: partialCounter }) : partialCounter,
    ` / ${totalCounter}`
  ] });
};
exports.filterGroupCounterClasses = Counter_styles.staticClasses;
exports.HvFilterGroupCounter = HvFilterGroupCounter;
//# sourceMappingURL=Counter.cjs.map
