"use strict";
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const jsxRuntime = require("@emotion/react/jsx-runtime");
const React = require("react");
const useDefaultProps = require("../../hooks/useDefaultProps.cjs");
const isEqual = require("lodash/isEqual");
const useSavedState = require("../../utils/useSavedState.cjs");
const _interopDefault = (e) => e && e.__esModule ? e : { default: e };
const isEqual__default = /* @__PURE__ */ _interopDefault(isEqual);
const HvFilterGroupContext = React.createContext({
  activeGroup: 0,
  setActiveGroup: () => {
  },
  filterOptions: [],
  setFilterValues: () => {
  },
  rollbackFilters: () => {
  },
  clearFilters: () => {
  },
  applyFilters: () => {
  },
  applyDisabled: false,
  filterValues: [],
  appliedFilters: void 0,
  defaultValue: void 0
});
const groups = (filters) => filters.map(() => []);
const HvFilterGroupProvider = (props) => {
  const {
    defaultValue,
    value,
    filters,
    children
  } = useDefaultProps.useDefaultProps("HvFilterGroupProvider", props);
  const [group, setActiveGroup] = React.useState(0);
  const [filterValues, setFilterValues, rollbackFilters, appliedFilters] = useSavedState.useSavedState(value || groups(filters));
  const [applyDisabled, setApplyDisabled] = React.useState(false);
  React.useEffect(() => {
    setFilterValues(value, true);
  }, [value, setFilterValues]);
  React.useEffect(() => {
    setApplyDisabled(isEqual__default.default(filterValues, appliedFilters));
  }, [filterValues, appliedFilters]);
  const clearFilters = React.useCallback(() => {
    setFilterValues(defaultValue || groups(filters));
  }, [filters, setFilterValues, defaultValue]);
  const applyFilters = React.useCallback(() => {
    setFilterValues(filterValues, true);
  }, [filterValues, setFilterValues]);
  const contextValue = React.useMemo(() => ({
    activeGroup: group,
    setActiveGroup,
    filterOptions: filters,
    filterValues,
    setFilterValues,
    appliedFilters,
    rollbackFilters,
    clearFilters,
    applyFilters,
    applyDisabled,
    defaultValue
  }), [appliedFilters, applyDisabled, applyFilters, clearFilters, filterValues, filters, group, rollbackFilters, setFilterValues, defaultValue]);
  return /* @__PURE__ */ jsxRuntime.jsx(HvFilterGroupContext.Provider, { value: contextValue, children });
};
exports.HvFilterGroupContext = HvFilterGroupContext;
exports.HvFilterGroupProvider = HvFilterGroupProvider;
//# sourceMappingURL=FilterGroupContext.cjs.map
