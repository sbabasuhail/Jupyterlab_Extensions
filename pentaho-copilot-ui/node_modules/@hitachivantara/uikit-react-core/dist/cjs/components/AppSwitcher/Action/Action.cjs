"use strict";
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const jsxRuntime = require("@emotion/react/jsx-runtime");
const React = require("react");
const uikitStyles = require("@hitachivantara/uikit-styles");
const uikitReactIcons = require("@hitachivantara/uikit-react-icons");
const useUniqueId = require("../../../hooks/useUniqueId.cjs");
const TitleWithTooltip = require("../TitleWithTooltip.cjs");
const Action_styles = require("./Action.styles.cjs");
const Avatar = require("../../Avatar/Avatar.cjs");
const Typography = require("../../Typography/Typography.cjs");
const ListItem = require("../../ListContainer/ListItem/ListItem.cjs");
const Tooltip = require("../../Tooltip/Tooltip.cjs");
const HvAppSwitcherAction = ({
  id,
  className,
  classes: classesProp,
  application,
  onClickCallback = () => {
  },
  isSelectedCallback = () => false
}) => {
  const {
    classes,
    cx
  } = Action_styles.useClasses(classesProp);
  const {
    name,
    description,
    disabled,
    iconElement,
    iconUrl,
    url,
    target
  } = application;
  const color = disabled ? uikitStyles.theme.colors.secondary_60 : uikitStyles.getColor(application == null ? void 0 : application.color, uikitStyles.theme.colors.secondary);
  const [validIconUrl, setValidIconUrl] = React.useState(true);
  const renderApplicationIcon = () => {
    if (iconElement) {
      return iconElement;
    }
    if (iconUrl && validIconUrl) {
      return /* @__PURE__ */ jsxRuntime.jsx("img", { className: classes.iconUrl, src: iconUrl, onError: () => {
        setValidIconUrl(false);
      }, alt: description });
    }
    const brokenTitle = name.split(" ");
    const initials = brokenTitle[0].substring(0, 1) + (brokenTitle[1] ? brokenTitle[1].substring(0, 1) : "");
    return /* @__PURE__ */ jsxRuntime.jsx(Avatar.HvAvatar, { size: "sm", backgroundColor: color, variant: "square", "aria-hidden": true, children: initials });
  };
  const isSelected = isSelectedCallback(application);
  const handleOnClick = React.useCallback((event) => {
    if (disabled) {
      event.preventDefault();
      return;
    }
    onClickCallback == null ? void 0 : onClickCallback(event, {
      ...application,
      isSelected
    });
  }, [application, disabled, isSelected, onClickCallback]);
  const isLink = url != null;
  const descriptionElementId = useUniqueId.useUniqueId(id, "hvAction-description");
  const renderApplication = React.useCallback((children) => {
    const typographyProps = {
      className: classes.typography,
      onClick: handleOnClick,
      style: {
        borderColor: color
      },
      "aria-label": name,
      ...description && {
        "aria-describedby": descriptionElementId
      }
    };
    if (isLink) {
      return /* @__PURE__ */ jsxRuntime.jsx(Typography.HvTypography, { component: "a", href: url, target: target || "_top", ...typographyProps, children });
    }
    return /* @__PURE__ */ jsxRuntime.jsx(Typography.HvTypography, { component: "button", ...typographyProps, children });
  }, [classes.typography, color, description, descriptionElementId, handleOnClick, isLink, name, target, url]);
  return /* @__PURE__ */ jsxRuntime.jsx(ListItem.HvListItem, { id, interactive: true, tabIndex: 0, selected: isSelected, disabled, className: cx(classes.root, {
    [classes.disabled]: disabled,
    [classes.selected]: isSelected
  }, className), children: renderApplication(/* @__PURE__ */ jsxRuntime.jsxs(jsxRuntime.Fragment, { children: [
    /* @__PURE__ */ jsxRuntime.jsx("div", { className: classes.icon, children: renderApplicationIcon() }),
    /* @__PURE__ */ jsxRuntime.jsx(TitleWithTooltip.default, { title: name, className: classes.title }),
    description && /* @__PURE__ */ jsxRuntime.jsx(Tooltip.HvTooltip, { disableFocusListener: true, disableTouchListener: true, title: /* @__PURE__ */ jsxRuntime.jsx(Typography.HvTypography, { children: description }), children: /* @__PURE__ */ jsxRuntime.jsx("div", { children: /* @__PURE__ */ jsxRuntime.jsx(uikitReactIcons.Info, { className: classes.iconInfo, role: "img", "aria-label": description, id: descriptionElementId }) }) })
  ] })) });
};
exports.appSwitcherActionClasses = Action_styles.staticClasses;
exports.HvAppSwitcherAction = HvAppSwitcherAction;
//# sourceMappingURL=Action.cjs.map
