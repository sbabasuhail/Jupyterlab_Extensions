"use strict";
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const jsxRuntime = require("@emotion/react/jsx-runtime");
const React = require("react");
const useDefaultProps = require("../../hooks/useDefaultProps.cjs");
const AppSwitcher_styles = require("./AppSwitcher.styles.cjs");
const TitleWithTooltip = require("./TitleWithTooltip.cjs");
const Action = require("./Action/Action.cjs");
const Typography = require("../Typography/Typography.cjs");
const ListContainer = require("../ListContainer/ListContainer.cjs");
const HvAppSwitcher = (props) => {
  const {
    id,
    className,
    classes: classesProp,
    layout = "single",
    title,
    applications,
    onActionClickedCallback = () => {
    },
    isActionSelectedCallback = () => false,
    header,
    footer,
    isOpen
  } = useDefaultProps.useDefaultProps("HvAppSwitcher", props);
  const {
    classes,
    cx
  } = AppSwitcher_styles.useClasses(classesProp);
  const panelActions = React.useMemo(() => applications && (applications == null ? void 0 : applications.map((application) => {
    if (application.name) {
      return /* @__PURE__ */ jsxRuntime.jsx(Action.HvAppSwitcherAction, { application, onClickCallback: onActionClickedCallback, isSelectedCallback: isActionSelectedCallback, classes: {
        root: classes.item,
        selected: classes.itemSelected,
        disabled: classes.itemDisabled,
        typography: classes.itemTrigger,
        icon: classes.itemIcon,
        title: classes.itemTitle,
        iconInfo: classes.itemInfoIcon
      } }, application.id || `${application.name}_${application.url}`);
    }
    return void 0;
  })), [applications, classes, isActionSelectedCallback, onActionClickedCallback]);
  return /* @__PURE__ */ jsxRuntime.jsxs("div", { id, className: cx(classes.root, classes[layout], {
    [classes.open]: !!isOpen,
    [classes.closed]: isOpen === false
  }, className), children: [
    header && /* @__PURE__ */ jsxRuntime.jsx(Typography.HvTypography, { component: "div", variant: "label", className: classes.title, children: header }) || title && /* @__PURE__ */ jsxRuntime.jsx(TitleWithTooltip.default, { className: classes.title, title }),
    /* @__PURE__ */ jsxRuntime.jsx(ListContainer.HvListContainer, { disableGutters: true, className: classes.actionsContainer, children: panelActions }),
    footer && /* @__PURE__ */ jsxRuntime.jsx(Typography.HvTypography, { component: "div", variant: "label", className: classes.footerContainer, children: footer })
  ] });
};
exports.appSwitcherClasses = AppSwitcher_styles.staticClasses;
exports.HvAppSwitcher = HvAppSwitcher;
//# sourceMappingURL=AppSwitcher.cjs.map
