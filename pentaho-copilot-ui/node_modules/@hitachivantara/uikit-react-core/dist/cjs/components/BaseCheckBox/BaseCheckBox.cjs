"use strict";
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const jsxRuntime = require("@emotion/react/jsx-runtime");
const React = require("react");
const uikitReactIcons = require("@hitachivantara/uikit-react-icons");
const useDefaultProps = require("../../hooks/useDefaultProps.cjs");
const MuiCheckbox = require("@mui/material/Checkbox");
const BaseCheckBox_styles = require("./BaseCheckBox.styles.cjs");
const _interopDefault = (e) => e && e.__esModule ? e : { default: e };
const MuiCheckbox__default = /* @__PURE__ */ _interopDefault(MuiCheckbox);
const getSelectorIcons = (options, classes) => {
  const {
    disabled,
    semantic
  } = options;
  const color = disabled && ["atmo3", "secondary_60"] || semantic && ["base_light", "base_dark"] || void 0;
  const checkedColor = disabled && ["atmo3", "secondary_60"] || semantic && ["base_dark", "base_light"] || void 0;
  return {
    checkbox: /* @__PURE__ */ jsxRuntime.jsx(uikitReactIcons.Checkbox, { color, className: classes.icon }),
    checkboxPartial: /* @__PURE__ */ jsxRuntime.jsx(uikitReactIcons.CheckboxPartial, { color, className: classes.icon }),
    checkboxChecked: /* @__PURE__ */ jsxRuntime.jsx(uikitReactIcons.CheckboxCheck, { color: checkedColor, className: classes.icon })
  };
};
const HvBaseCheckBox = (props) => {
  const {
    id,
    classes: classesProp,
    className,
    name,
    inputProps,
    onChange,
    onFocusVisible,
    onBlur,
    checked,
    indeterminate,
    defaultChecked,
    value = "on",
    required = false,
    readOnly = false,
    disabled = false,
    semantic = false,
    ...others
  } = useDefaultProps.useDefaultProps("HvBaseCheckBox", props);
  const {
    classes,
    cx
  } = BaseCheckBox_styles.useClasses(classesProp);
  const [focusVisible, setFocusVisible] = React.useState(false);
  const icons = getSelectorIcons({
    disabled,
    semantic
  }, classes);
  const onChangeCallback = React.useCallback((event) => {
    if (readOnly) {
      return;
    }
    onChange == null ? void 0 : onChange(event, event.target.checked, value);
  }, [onChange, readOnly, value]);
  const onBlurCallback = React.useCallback((event) => {
    setFocusVisible(false);
    onBlur == null ? void 0 : onBlur(event);
  }, [onBlur]);
  const onFocusVisibleCallback = React.useCallback((event) => {
    setFocusVisible(true);
    onFocusVisible == null ? void 0 : onFocusVisible(event);
  }, [onFocusVisible]);
  return /* @__PURE__ */ jsxRuntime.jsx(MuiCheckbox__default.default, { id, name, value, className: cx(classes.root, {
    [classes.disabled]: disabled,
    [classes.focusVisible]: focusVisible
  }, className), icon: icons.checkbox, indeterminateIcon: icons.checkboxPartial, checkedIcon: icons.checkboxChecked, disabled, required, readOnly, checked, defaultChecked, indeterminate, inputProps, onChange: onChangeCallback, onFocusVisible: onFocusVisibleCallback, onBlur: onBlurCallback, color: "default", disableRipple: true, ...others });
};
exports.baseCheckBoxClasses = BaseCheckBox_styles.staticClasses;
exports.HvBaseCheckBox = HvBaseCheckBox;
//# sourceMappingURL=BaseCheckBox.cjs.map
