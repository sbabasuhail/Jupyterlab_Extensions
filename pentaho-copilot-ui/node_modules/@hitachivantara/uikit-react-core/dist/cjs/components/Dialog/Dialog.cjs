"use strict";
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const jsxRuntime = require("@emotion/react/jsx-runtime");
const React = require("react");
const useDefaultProps = require("../../hooks/useDefaultProps.cjs");
const MuiDialog = require("@mui/material/Dialog");
const MuiBackdrop = require("@mui/material/Backdrop");
const uikitReactIcons = require("@hitachivantara/uikit-react-icons");
const uikitStyles = require("@hitachivantara/uikit-styles");
const setId = require("../../utils/setId.cjs");
const withTooltip = require("../../hocs/withTooltip.cjs");
const useTheme = require("../../hooks/useTheme.cjs");
const hexToRgbA = require("../../utils/hexToRgbA.cjs");
const Dialog_styles = require("./Dialog.styles.cjs");
const Button = require("../Button/Button.cjs");
const _interopDefault = (e) => e && e.__esModule ? e : { default: e };
const React__default = /* @__PURE__ */ _interopDefault(React);
const MuiDialog__default = /* @__PURE__ */ _interopDefault(MuiDialog);
const MuiBackdrop__default = /* @__PURE__ */ _interopDefault(MuiBackdrop);
const HvDialog = (props) => {
  const {
    variant,
    classes: classesProp,
    className,
    id,
    children,
    open = false,
    onClose,
    firstFocusable,
    buttonTitle = "Close",
    fullscreen = false,
    disableBackdropClick = false,
    ...others
  } = useDefaultProps.useDefaultProps("HvDialog", props);
  const {
    classes,
    css,
    cx
  } = Dialog_styles.useClasses(classesProp);
  delete others.fullScreen;
  const {
    rootId,
    colors
  } = useTheme.useTheme();
  const wrappedClose = React.useCallback((event, bypassValidation = false, reason) => {
    if (bypassValidation || !disableBackdropClick) {
      onClose == null ? void 0 : onClose(event, reason);
    }
  }, [onClose, disableBackdropClick]);
  const measuredRef = React.useCallback(() => {
    if (!firstFocusable)
      return;
    const element = document.getElementById(firstFocusable);
    element == null ? void 0 : element.focus();
  }, [firstFocusable]);
  const closeButtonDisplay = () => /* @__PURE__ */ jsxRuntime.jsx(uikitReactIcons.Close, { role: "presentation" });
  const CloseButtonTooltipWrapper = buttonTitle ? withTooltip.withTooltip(closeButtonDisplay, buttonTitle, "top") : closeButtonDisplay;
  const slots = React.useMemo(() => ({
    backdrop: (backdropProps) => /* @__PURE__ */ jsxRuntime.jsx(MuiBackdrop__default.default, { open, onClick: wrappedClose, ...backdropProps })
  }), [open, wrappedClose]);
  return /* @__PURE__ */ jsxRuntime.jsxs(MuiDialog__default.default, { container: typeof window !== "undefined" ? (
    // TODO: review
    // eslint-disable-next-line ssr-friendly/no-dom-globals-in-react-fc
    document.getElementById(rootId || "") || document.body
  ) : void 0, className: cx(classes.root, className), classes: {
    container: css({
      position: "relative"
    })
  }, id, ref: measuredRef, open, fullScreen: fullscreen, onClose: (event, reason) => wrappedClose(event, void 0, reason), slots, slotProps: {
    backdrop: {
      classes: {
        root: cx(css({
          background: hexToRgbA.hexToRgbA((colors == null ? void 0 : colors.atmo4) || uikitStyles.theme.colors.atmo4, 0.8)
        }), classes.background)
      }
    }
  }, PaperProps: {
    classes: {
      root: cx(css({
        position: "absolute"
      }), classes.paper, variant && cx(classes.statusBar, classes[variant]), {
        [classes.fullscreen]: fullscreen
      })
    }
  }, "aria-modal": true, ...others, children: [
    /* @__PURE__ */ jsxRuntime.jsx(Button.HvButton, { id: setId.setId(id, "close"), className: classes.closeButton, variant: "secondaryGhost", onClick: (event) => wrappedClose(event, true, void 0), "aria-label": buttonTitle, children: /* @__PURE__ */ jsxRuntime.jsx(CloseButtonTooltipWrapper, {}) }),
    children && typeof children === "object" ? React__default.default.Children.map(children, (c) => c && React__default.default.cloneElement(c, {
      fullscreen
    })) : children
  ] });
};
exports.dialogClasses = Dialog_styles.staticClasses;
exports.HvDialog = HvDialog;
//# sourceMappingURL=Dialog.cjs.map
