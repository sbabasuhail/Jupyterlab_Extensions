"use strict";
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const jsxRuntime = require("@emotion/react/jsx-runtime");
const uikitStyles = require("@hitachivantara/uikit-styles");
const Chip = require("@mui/material/Chip");
const useTheme = require("../../hooks/useTheme.cjs");
const useDefaultProps = require("../../hooks/useDefaultProps.cjs");
const uikitReactIcons = require("@hitachivantara/uikit-react-icons");
const Tag_styles = require("./Tag.styles.cjs");
const _interopDefault = (e) => e && e.__esModule ? e : { default: e };
const Chip__default = /* @__PURE__ */ _interopDefault(Chip);
const getCategoricalColor = (customColor, colors) => {
  return customColor && (colors == null ? void 0 : colors[customColor]) || customColor || (colors == null ? void 0 : colors.cat1);
};
const HvTag = (props) => {
  const {
    classes: classesProp,
    className,
    style,
    label,
    disabled,
    type = "semantic",
    color,
    deleteIcon,
    onDelete,
    onClick,
    // TODO: remove from API
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    deleteButtonArialLabel = "Delete tag",
    deleteButtonProps = {},
    ...others
  } = useDefaultProps.useDefaultProps("HvTag", props);
  const {
    colors
  } = useTheme.useTheme();
  const {
    classes,
    cx,
    css
  } = Tag_styles.useClasses(classesProp);
  const defaultDeleteIcon = /* @__PURE__ */ jsxRuntime.jsx(uikitReactIcons.CloseXS, { role: "none", className: cx(classes.button, classes.tagButton), iconSize: "XS", color: "base_dark", ...deleteButtonProps });
  const categoricalBackgroundColor = type === "categorical" ? getCategoricalColor(color, colors) : void 0;
  const backgroundColor = type === "semantic" && uikitStyles.getColor(color, "neutral_20") || type === "categorical" && `${categoricalBackgroundColor}30` || void 0;
  const isClickable = !!(onClick || onDelete) && !disabled;
  const clickableClass = css({
    "&:hover": {
      boxShadow: `0 0 0 1pt ${categoricalBackgroundColor}`
    }
  });
  return /* @__PURE__ */ jsxRuntime.jsx(Chip__default.default, { label, disabled, className: cx({
    [clickableClass]: isClickable
  }, className), style: {
    ...disabled ? null : {
      backgroundColor
    },
    ...style
  }, classes: {
    root: cx(classes.root, classes.chipRoot, {
      [classes.disabled]: disabled,
      [classes.clickable]: isClickable,
      [classes.categorical]: type === "categorical",
      [classes.categoricalFocus]: type === "categorical" && !disabled,
      [classes.categoricalDisabled]: type === "categorical" && disabled
    }),
    label: classes.label,
    deleteIcon: cx(classes.deleteIcon, {
      [classes.disabledDeleteIcon]: disabled
    })
  }, deleteIcon: deleteIcon || defaultDeleteIcon, onDelete: disabled ? void 0 : onDelete, onClick: disabled ? void 0 : onClick, ...others });
};
exports.tagClasses = Tag_styles.staticClasses;
exports.HvTag = HvTag;
//# sourceMappingURL=Tag.cjs.map
