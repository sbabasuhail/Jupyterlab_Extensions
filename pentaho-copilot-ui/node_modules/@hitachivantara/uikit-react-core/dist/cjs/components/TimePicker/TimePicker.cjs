"use strict";
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const jsxRuntime = require("@emotion/react/jsx-runtime");
const React = require("react");
const useDefaultProps = require("../../hooks/useDefaultProps.cjs");
const date = require("@internationalized/date");
const datepicker$1 = require("@react-aria/datepicker");
const datepicker = require("@react-stately/datepicker");
const uikitReactIcons = require("@hitachivantara/uikit-react-icons");
const useControlled = require("../../hooks/useControlled.cjs");
const useUniqueId = require("../../hooks/useUniqueId.cjs");
const setId = require("../../utils/setId.cjs");
const Placeholder = require("./Placeholder.cjs");
const TimePicker_styles = require("./TimePicker.styles.cjs");
const Unit = require("./Unit/Unit.cjs");
const FormElement = require("../Forms/FormElement/FormElement.cjs");
const Label = require("../Forms/Label/Label.cjs");
const InfoMessage = require("../Forms/InfoMessage/InfoMessage.cjs");
const BaseDropdown = require("../BaseDropdown/BaseDropdown.cjs");
const WarningText = require("../Forms/WarningText/WarningText.cjs");
const toTime = (value) => {
  if (!value)
    return void 0;
  const {
    hours,
    minutes,
    seconds
  } = value;
  return new date.Time(hours, minutes, seconds);
};
const getFormat = (timeFormat) => {
  if (timeFormat == null)
    return 24;
  return timeFormat === "12" ? 12 : 24;
};
const HvTimePicker = (props) => {
  const {
    classes: classesProp,
    className,
    id: idProp,
    name,
    required = false,
    disabled = false,
    readOnly = false,
    label,
    "aria-label": ariaLabel,
    "aria-labelledby": ariaLabelledBy,
    description,
    "aria-describedby": ariaDescribedBy,
    status,
    statusMessage,
    "aria-errormessage": ariaErrorMessage,
    placeholder,
    hoursPlaceholder = "hh",
    minutesPlaceholder = "mm",
    secondsPlaceholder = "ss",
    value: valueProp,
    defaultValue: defaultValueProp,
    timeFormat,
    showSeconds,
    disableExpand,
    locale = "en",
    onToggle,
    onChange,
    // misc properties:
    disablePortal = true,
    escapeWithReference = true,
    dropdownProps,
    ...others
  } = useDefaultProps.useDefaultProps("HvTimePicker", props);
  const id = useUniqueId.useUniqueId(idProp, "hvtimepicker");
  const ref = React.useRef(null);
  const {
    classes,
    cx
  } = TimePicker_styles.useClasses(classesProp);
  const stateProps = {
    value: toTime(valueProp),
    defaultValue: toTime(defaultValueProp),
    label,
    locale,
    isRequired: required,
    isReadOnly: readOnly,
    isDisabled: disabled,
    granularity: "second",
    hourCycle: getFormat(timeFormat),
    onChange: (value) => {
      const {
        hour: hours,
        minute: minutes,
        second: seconds
      } = value;
      onChange == null ? void 0 : onChange({
        hours,
        minutes,
        seconds
      });
    }
  };
  const state = datepicker.useTimeFieldState(stateProps);
  const {
    labelProps,
    fieldProps,
    descriptionProps
  } = datepicker$1.useTimeField({
    ...stateProps,
    id,
    "aria-label": ariaLabel,
    "aria-labelledby": ariaLabelledBy,
    "aria-describedby": ariaDescribedBy
  }, state, ref);
  const [open, setOpen] = React.useState(false);
  const [validationMessage] = useControlled.useControlled(statusMessage, "Required");
  const [validationState] = useControlled.useControlled(status, "standBy");
  const placeholders = React.useMemo(() => ({
    hour: hoursPlaceholder,
    minute: minutesPlaceholder,
    second: secondsPlaceholder
  }), [hoursPlaceholder, minutesPlaceholder, secondsPlaceholder]);
  const canShowError = ariaErrorMessage == null && (status !== void 0 && statusMessage !== void 0 || status === void 0 && required);
  const isStateInvalid = validationState === "invalid";
  const errorMessageId = isStateInvalid ? canShowError ? setId.setId(id, "error") : ariaErrorMessage : void 0;
  return /* @__PURE__ */ jsxRuntime.jsxs(FormElement.HvFormElement, { name, required, disabled, status: validationState, className: cx(classes.root, className), ...others, children: [
    (label || description) && /* @__PURE__ */ jsxRuntime.jsxs("div", { className: classes.labelContainer, children: [
      label && /* @__PURE__ */ jsxRuntime.jsx(Label.HvLabel, { label, className: classes.label, ...labelProps }),
      description && /* @__PURE__ */ jsxRuntime.jsx(InfoMessage.HvInfoMessage, { className: classes.description, ...descriptionProps, children: description })
    ] }),
    /* @__PURE__ */ jsxRuntime.jsx(BaseDropdown.HvBaseDropdown, { role: "combobox", variableWidth: true, disabled, readOnly, placeholder: placeholder && !state.value ? placeholder : /* @__PURE__ */ jsxRuntime.jsx(Placeholder.Placeholder, { ref, name, state, placeholders, className: cx(classes.placeholder, {
      [classes.placeholderDisabled]: disabled
    }), ...fieldProps }), classes: {
      header: cx(classes.dropdownHeader, {
        [classes.dropdownHeaderInvalid]: isStateInvalid
      }),
      panel: classes.dropdownPanel,
      headerOpen: classes.dropdownHeaderOpen
    }, placement: "right", adornment: /* @__PURE__ */ jsxRuntime.jsx(uikitReactIcons.Time, { color: disabled ? "secondary_60" : void 0, className: classes.icon }), expanded: open, onToggle: (evt, newOpen) => {
      if (disableExpand)
        return;
      setOpen(newOpen);
      onToggle == null ? void 0 : onToggle(evt, newOpen);
    }, onContainerCreation: (containerRef) => {
      var _a;
      (_a = containerRef == null ? void 0 : containerRef.getElementsByTagName("input")[0]) == null ? void 0 : _a.focus();
    }, "aria-haspopup": "dialog", "aria-label": ariaLabel, "aria-labelledby": fieldProps["aria-labelledby"], "aria-describedby": fieldProps["aria-describedby"], "aria-invalid": isStateInvalid ? true : void 0, "aria-errormessage": errorMessageId, disablePortal, popperProps: {
      modifiers: [{
        name: "preventOverflow",
        enabled: escapeWithReference
      }]
    }, ...dropdownProps, children: /* @__PURE__ */ jsxRuntime.jsx("div", { ref, className: classes.timePopperContainer, children: state.segments.map((segment, i) => /* @__PURE__ */ jsxRuntime.jsx(Unit.Unit, { state, segment, placeholder: placeholders[segment.type], onAdd: () => state.increment(segment.type), onSub: () => state.decrement(segment.type), onChange: (evt, val) => {
      state.setSegment(segment.type, Number(val));
    } }, i)) }) }),
    canShowError && /* @__PURE__ */ jsxRuntime.jsx(WarningText.HvWarningText, { id: setId.setId(id, "error"), disableBorder: true, className: classes.error, children: validationMessage })
  ] });
};
exports.timePickerClasses = TimePicker_styles.staticClasses;
exports.HvTimePicker = HvTimePicker;
//# sourceMappingURL=TimePicker.cjs.map
