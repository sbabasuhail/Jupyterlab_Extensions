"use strict";
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const jsxRuntime = require("@emotion/react/jsx-runtime");
const React = require("react");
const keyboardUtils = require("../../../utils/keyboardUtils.cjs");
const setId = require("../../../utils/setId.cjs");
const VerticalNavigationContext = require("../VerticalNavigationContext.cjs");
const Action_styles = require("./Action.styles.cjs");
const Typography = require("../../Typography/Typography.cjs");
const HvVerticalNavigationAction = ({
  className,
  classes: classesProp,
  id,
  label = "",
  icon,
  onClick,
  ...others
}) => {
  const {
    isOpen
  } = React.useContext(VerticalNavigationContext.VerticalNavigationContext);
  const {
    classes,
    cx
  } = Action_styles.useClasses(classesProp);
  const handleKeyDown = React.useCallback((event) => {
    if (onClick == null || !keyboardUtils.isKey(event, "Enter") && !keyboardUtils.isKey(event, "Space")) {
      return;
    }
    onClick(event);
  }, [onClick]);
  return /* @__PURE__ */ jsxRuntime.jsxs(Typography.HvTypography, { id: setId.setId(id, "button"), component: "div", role: "button", className: cx(classes.action, {
    [classes.noIcon]: !icon,
    [classes.minimized]: !isOpen
  }, className), tabIndex: 0, ...!isOpen && {
    "aria-label": label
  }, onKeyDown: handleKeyDown, onClick, ...others, children: [
    icon,
    isOpen && label
  ] });
};
exports.actionClasses = Action_styles.staticClasses;
exports.HvVerticalNavigationAction = HvVerticalNavigationAction;
//# sourceMappingURL=Action.cjs.map
