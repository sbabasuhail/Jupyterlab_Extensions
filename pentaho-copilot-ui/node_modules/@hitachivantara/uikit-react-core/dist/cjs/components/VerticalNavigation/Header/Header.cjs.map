{"version":3,"file":"Header.cjs","sources":["../../../../../src/components/VerticalNavigation/Header/Header.tsx"],"sourcesContent":["import { Backwards, Forwards, Menu } from \"@hitachivantara/uikit-react-icons\";\n\nimport { MouseEventHandler, useContext, useMemo } from \"react\";\n\nimport { ExtractNames } from \"@core/utils/classes\";\nimport { HvTypography } from \"@core/components/Typography\";\nimport { HvButton, HvButtonProps } from \"@core/components/Button\";\nimport { VerticalNavigationContext } from \"../VerticalNavigationContext\";\nimport { staticClasses, useClasses } from \"./Header.styles\";\n\nexport { staticClasses as verticalNavigationHeaderClasses };\n\nexport type HvVerticalNavigationHeaderClasses = ExtractNames<typeof useClasses>;\n\nexport interface HvVerticalNavigationHeaderProps {\n  /**\n   * Id to be applied to the root node.\n   */\n  id?: string;\n  /**\n   * The title text to show on Header.\n   */\n  title?: string;\n  /**\n   * Icon to show when Vertical Navigation is collapsed.\n   */\n  openIcon?: React.ReactNode;\n  /**\n   * Icon to show when Vertical Navigation is expanded.\n   */\n  closeIcon?: React.ReactNode;\n  /**\n   * Props for the collapse button.\n   */\n  collapseButtonProps?: HvButtonProps;\n  /**\n   * Props for the back button.\n   */\n  backButtonProps?: HvButtonProps;\n  /**\n   * Class names to be applied.\n   */\n  className?: string;\n  /**\n   * A Jss Object used to override or extend the styles applied to the component.\n   */\n  classes?: HvVerticalNavigationHeaderClasses;\n  /**\n   * Handler for the collapse button.\n   */\n  onCollapseButtonClick?: MouseEventHandler<HTMLElement>;\n}\n\nexport const HvVerticalNavigationHeader = ({\n  title,\n  openIcon = <Forwards />,\n  closeIcon = <Backwards />,\n  collapseButtonProps,\n  backButtonProps,\n  className,\n  classes: classesProp,\n  onCollapseButtonClick,\n  ...others\n}: HvVerticalNavigationHeaderProps) => {\n  const {\n    isOpen,\n    useIcons,\n    headerTitle,\n    slider,\n    navigateToParentHandler,\n    parentItem,\n  } = useContext(VerticalNavigationContext);\n\n  const { classes, cx } = useClasses(classesProp);\n\n  openIcon = !useIcons ? <Menu /> : openIcon;\n\n  const backButtonClickHandler = () => {\n    if (navigateToParentHandler) navigateToParentHandler();\n  };\n\n  // whenever we're in a sublevel, the parentItem is always a single item.\n  // In the first level it's always an array with the first level elements.\n  const shouldShowTitle = useMemo(\n    () => !slider || (slider && !Array.isArray(parentItem)),\n    [parentItem, slider]\n  );\n\n  return shouldShowTitle ? (\n    <div\n      className={cx(classes.root, { [classes.minimized]: !isOpen }, className)}\n      {...others}\n    >\n      {isOpen && headerTitle && slider && (\n        <HvButton\n          icon\n          onClick={backButtonClickHandler}\n          aria-label=\"Back\"\n          {...backButtonProps}\n        >\n          <Backwards iconSize=\"XS\" />\n        </HvButton>\n      )}\n      {isOpen && (\n        <HvTypography variant={slider ? \"label\" : \"title3\"}>\n          {headerTitle && slider ? headerTitle : title}\n        </HvTypography>\n      )}\n      {onCollapseButtonClick && (\n        <HvButton\n          icon\n          onClick={onCollapseButtonClick}\n          className={classes.collapseButton}\n          classes={{\n            root: isOpen ? \"\" : classes.minimized,\n          }}\n          {...collapseButtonProps}\n        >\n          {isOpen ? closeIcon : openIcon}\n        </HvButton>\n      )}\n    </div>\n  ) : null;\n};\n"],"names":["HvVerticalNavigationHeader","title","openIcon","Forwards","closeIcon","Backwards","collapseButtonProps","backButtonProps","className","classes","classesProp","onCollapseButtonClick","others","isOpen","useIcons","headerTitle","slider","navigateToParentHandler","parentItem","useContext","VerticalNavigationContext","cx","useClasses","jsx","Menu","backButtonClickHandler","shouldShowTitle","useMemo","Array","isArray","jsxs","root","minimized","HvButton","HvTypography","collapseButton"],"mappings":";;;;;;;;;AAqDO,MAAMA,6BAA6BA,CAAC;AAAA,EACzCC;AAAAA,EACAC,0CAAYC,gBAAW,UAAA,EAAA;AAAA,EACvBC,2CAAaC,gBAAY,WAAA,EAAA;AAAA,EACzBC;AAAAA,EACAC;AAAAA,EACAC;AAAAA,EACAC,SAASC;AAAAA,EACTC;AAAAA,EACA,GAAGC;AAC4B,MAAM;AAC/B,QAAA;AAAA,IACJC;AAAAA,IACAC;AAAAA,IACAC;AAAAA,IACAC;AAAAA,IACAC;AAAAA,IACAC;AAAAA,EAAAA,IACEC,MAAAA,WAAWC,0BAAAA,yBAAyB;AAElC,QAAA;AAAA,IAAEX;AAAAA,IAASY;AAAAA,EAAAA,IAAOC,cAAAA,WAAWZ,WAAW;AAE9CR,aAAW,CAACY,WAAYS,2BAAAA,IAAAC,gBAAAA,MAAA,CAAA,CAAI,IAAMtB;AAElC,QAAMuB,yBAAyBA,MAAM;AAC/BR,QAAAA;AAAiD;EAAA;AAKvD,QAAMS,kBAAkBC,MAAAA,QACtB,MAAM,CAACX,UAAWA,UAAU,CAACY,MAAMC,QAAQX,UAAU,GACrD,CAACA,YAAYF,MAAM,CACrB;AAEA,SAAOU,kBACJI,2BAAAA,KAAA,OAAA,EACC,WAAWT,GAAGZ,QAAQsB,MAAM;AAAA,IAAE,CAACtB,QAAQuB,SAAS,GAAG,CAACnB;AAAAA,EAAUL,GAAAA,SAAS,GACvE,GAAII,QAEHC,UAAAA;AAAAA,IAAAA,UAAUE,eAAeC,UACxBO,2BAAA,IAACU,OACC,UAAA,EAAA,MAAI,MACJ,SAASR,wBACT,cAAW,QACPlB,GAAAA,iBAEJ,UAAAgB,2BAAA,IAAClB,gBAAU,WAAA,EAAA,UAAS,KAAI,CAAA,GAC1B;AAAA,IAEDQ,UACEU,2BAAAA,IAAAW,WAAAA,cAAA,EAAa,SAASlB,SAAS,UAAU,UACvCD,UAAAA,eAAeC,SAASD,cAAcd,MACzC,CAAA;AAAA,IAEDU,yBACEY,2BAAA,IAAAU,iBAAA,EACC,MAAI,MACJ,SAAStB,uBACT,WAAWF,QAAQ0B,gBACnB,SAAS;AAAA,MACPJ,MAAMlB,SAAS,KAAKJ,QAAQuB;AAAAA,IAAAA,GAE1B1B,GAAAA,qBAEHO,UAAAA,SAAST,YAAYF,SACxB,CAAA;AAAA,EAAA,EAEJ,CAAA,IACE;AACN;;;"}