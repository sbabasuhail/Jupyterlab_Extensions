"use strict";
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const jsxRuntime = require("@emotion/react/jsx-runtime");
const useLabels = require("../../hooks/useLabels.cjs");
const setId = require("../../utils/setId.cjs");
const useDefaultProps = require("../../hooks/useDefaultProps.cjs");
const DropZone = require("./DropZone/DropZone.cjs");
const FileList = require("./FileList/FileList.cjs");
const DEFAULT_LABELS = {
  dropzone: "Label",
  sizeWarning: "Max. file size:",
  drag: "Drop files here or",
  selectFiles: "click to upload",
  dropFiles: "Drop files here",
  fileSizeError: "The file exceeds the maximum upload size",
  fileTypeError: "File type not allowed for upload",
  removeFileButtonLabel: "Remove File"
};
const HvFileUploader = (props) => {
  const {
    id,
    className,
    labels: labelsProp,
    fileList,
    multiple = true,
    disabled = false,
    hideLabels = false,
    maxFileSize = Infinity,
    inputProps = {},
    acceptedFiles = [],
    onFilesAdded,
    onFileRemoved,
    ...others
  } = useDefaultProps.useDefaultProps("HvFileUploader", props);
  const labels = useLabels.useLabels(DEFAULT_LABELS, labelsProp);
  return /* @__PURE__ */ jsxRuntime.jsxs("div", { id, className, ...others, children: [
    /* @__PURE__ */ jsxRuntime.jsx(DropZone.HvDropZone, { id: setId.setId(id, "dropzone"), labels, multiple, disabled, acceptedFiles, maxFileSize, onFilesAdded, inputProps, hideLabels }),
    /* @__PURE__ */ jsxRuntime.jsx(FileList.HvFileList, { id: setId.setId(id, "filelist"), list: fileList, onFileRemoved, removeFileButtonLabel: labels == null ? void 0 : labels.removeFileButtonLabel })
  ] });
};
exports.HvFileUploader = HvFileUploader;
//# sourceMappingURL=FileUploader.cjs.map
