"use strict";
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const jsxRuntime = require("@emotion/react/jsx-runtime");
const React = require("react");
const uikitReactIcons = require("@hitachivantara/uikit-react-icons");
const Preview_styles = require("./Preview.styles.cjs");
const Button = require("../../Button/Button.cjs");
const HvFileUploaderPreview = ({
  className,
  children,
  classes: classesProp,
  disableOverlay = false,
  onUnload,
  onClick,
  ...others
}) => {
  const {
    classes,
    cx,
    css
  } = Preview_styles.useClasses(classesProp);
  React.useEffect(() => {
    return () => {
      onUnload == null ? void 0 : onUnload();
    };
  }, [onUnload]);
  if (onClick) {
    return /* @__PURE__ */ jsxRuntime.jsxs(Button.HvButton, { icon: true, className: cx(classes.previewButton, className), onClick, ...others, children: [
      children,
      !disableOverlay && /* @__PURE__ */ jsxRuntime.jsx("div", { className: classes.overlay, "aria-hidden": "true", children: /* @__PURE__ */ jsxRuntime.jsx(uikitReactIcons.Preview, { className: css({
        position: "absolute",
        left: "50%",
        top: "50%",
        transform: "translate(-50%, -50%)",
        display: "none"
      }) }) })
    ] });
  }
  return children;
};
exports.fileUploaderPreviewClasses = Preview_styles.staticClasses;
exports.HvFileUploaderPreview = HvFileUploaderPreview;
//# sourceMappingURL=Preview.cjs.map
