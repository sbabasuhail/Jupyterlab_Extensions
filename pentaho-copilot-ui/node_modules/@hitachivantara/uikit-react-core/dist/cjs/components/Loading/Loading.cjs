"use strict";
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const jsxRuntime = require("@emotion/react/jsx-runtime");
const uikitStyles = require("@hitachivantara/uikit-styles");
const range = require("lodash/range");
const useDefaultProps = require("../../hooks/useDefaultProps.cjs");
const Loading_styles = require("./Loading.styles.cjs");
const Typography = require("../Typography/Typography.cjs");
const _interopDefault = (e) => e && e.__esModule ? e : { default: e };
const range__default = /* @__PURE__ */ _interopDefault(range);
const HvLoading = (props) => {
  const {
    color,
    hidden,
    small,
    label,
    classes: classesProp,
    className,
    ...others
  } = useDefaultProps.useDefaultProps("HvLoading", props);
  const {
    classes,
    cx
  } = Loading_styles.useClasses(classesProp);
  const size = small ? "small" : "regular";
  const colorVariant = color ? "Color" : "";
  const variant = `${size}${colorVariant}`;
  const inline = {
    backgroundColor: uikitStyles.getColor(color, small ? "secondary" : "brand")
  };
  return /* @__PURE__ */ jsxRuntime.jsxs("div", { hidden: !!hidden, className: cx(classes.root, {
    [classes.hidden]: hidden
  }, className), ...others, children: [
    /* @__PURE__ */ jsxRuntime.jsx("div", { className: classes.barContainer, children: range__default.default(0, 3).map((e) => /* @__PURE__ */ jsxRuntime.jsx("div", { style: inline, className: cx(classes.loadingBar, classes[variant]) }, e)) }),
    label && /* @__PURE__ */ jsxRuntime.jsx(Typography.HvTypography, { variant: "caption1", className: classes.label, children: label })
  ] });
};
exports.loadingClasses = Loading_styles.staticClasses;
exports.HvLoading = HvLoading;
//# sourceMappingURL=Loading.cjs.map
