"use strict";
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const jsxRuntime = require("@emotion/react/jsx-runtime");
const cloneDeep = require("lodash/cloneDeep");
const isEqual = require("lodash/isEqual");
const useDefaultProps = require("../../hooks/useDefaultProps.cjs");
const React = require("react");
const Context = require("./Context.cjs");
const index = require("./utils/index.cjs");
const reducer = require("./utils/reducer.cjs");
const RuleGroup = require("./RuleGroup/RuleGroup.cjs");
const ConfirmationDialog = require("./ConfirmationDialog/ConfirmationDialog.cjs");
const _interopDefault = (e) => e && e.__esModule ? e : { default: e };
const cloneDeep__default = /* @__PURE__ */ _interopDefault(cloneDeep);
const isEqual__default = /* @__PURE__ */ _interopDefault(isEqual);
const HvQueryBuilder = (props) => {
  const {
    attributes,
    query,
    onChange,
    operators,
    combinators,
    maxDepth = 1,
    labels,
    readOnly = false,
    classes
  } = useDefaultProps.useDefaultProps("HvQueryBuilder", props);
  const [pendingAction, askAction] = React.useState();
  const currentAttributes = React.useRef(null);
  const [state, dispatchAction] = React.useReducer(reducer.default, query, (initialState2) => initialState2 || index.emptyGroup());
  const initialState = query === state;
  const [prevState, setPrevState] = React.useState();
  const defaultContext = React.useContext(Context.QueryBuilderContext);
  const context = React.useMemo(() => ({
    dispatchAction,
    askAction,
    attributes,
    /* eslint-disable react/destructuring-assignment */
    operators: operators ?? defaultContext.operators,
    combinators: combinators ?? defaultContext.combinators,
    maxDepth: maxDepth ?? defaultContext.maxDepth,
    labels: labels ?? defaultContext.labels,
    initialTouched: initialState,
    readOnly
  }), [attributes, operators, defaultContext.operators, defaultContext.combinators, defaultContext.maxDepth, defaultContext.labels, combinators, maxDepth, labels, readOnly, initialState]);
  React.useEffect(() => {
    if (currentAttributes.current == null) {
      currentAttributes.current = attributes;
    } else if (currentAttributes.current !== attributes) {
      currentAttributes.current = attributes;
      dispatchAction({
        type: "reset-query"
      });
    }
  }, [attributes]);
  React.useEffect(() => {
    if (!initialState && !isEqual__default.default(state, prevState)) {
      onChange == null ? void 0 : onChange(index.clearNodeIds(state));
      setPrevState(cloneDeep__default.default(state));
    }
  }, [state, prevState, initialState, onChange]);
  const onConfirmHandler = () => {
    if (pendingAction) {
      askAction(void 0);
      pendingAction.actions.forEach((action) => dispatchAction(action));
    }
  };
  const onCancelHandler = () => {
    askAction(void 0);
  };
  return /* @__PURE__ */ jsxRuntime.jsxs(Context.QueryBuilderContext.Provider, { value: context, children: [
    /* @__PURE__ */ jsxRuntime.jsx(RuleGroup.RuleGroup, { level: 0, id: state.id, combinator: state.combinator, rules: state.rules, classes }),
    /* @__PURE__ */ jsxRuntime.jsx(ConfirmationDialog.ConfirmationDialog, { isOpen: pendingAction != null, onConfirm: onConfirmHandler, onCancel: onCancelHandler, title: (pendingAction == null ? void 0 : pendingAction.dialog.dialogTitle) || "", message: (pendingAction == null ? void 0 : pendingAction.dialog.dialogMessage) || "", confirmButtonLabel: (pendingAction == null ? void 0 : pendingAction.dialog.dialogConfirm) || "", cancelButtonLabel: (pendingAction == null ? void 0 : pendingAction.dialog.dialogCancel) || "", closeButtonTooltip: (pendingAction == null ? void 0 : pendingAction.dialog.dialogCloseTooltip) || "" })
  ] });
};
exports.HvQueryBuilder = HvQueryBuilder;
//# sourceMappingURL=QueryBuilder.cjs.map
