{"version":3,"file":"RuleGroup.cjs","sources":["../../../../../src/components/QueryBuilder/RuleGroup/RuleGroup.tsx"],"sourcesContent":["import { useCallback, useContext } from \"react\";\n\nimport { Add, Delete, Info } from \"@hitachivantara/uikit-react-icons\";\n\nimport { HvButton } from \"@core/components/Button\";\nimport { HvEmptyState } from \"@core/components/EmptyState\";\nimport { HvGrid } from \"@core/components/Grid\";\nimport { HvMultiButton } from \"@core/components/MultiButton\";\nimport { HvTypography } from \"@core/components/Typography\";\nimport { withTooltip } from \"@core/hocs/withTooltip\";\nimport { ExtractNames } from \"@core/utils/classes\";\n\nimport { Rule } from \"../Rule\";\nimport { QueryBuilderContext } from \"../Context\";\nimport { useClasses } from \"../QueryBuilder.styles\";\n\nexport interface RuleGroupProps {\n  /**\n   * Override or extend the styles applied to the component.\n   * See CSS API tab for more details.\n   */\n  classes?: ExtractNames<typeof useClasses>;\n  id?: number;\n  level?: number;\n  combinator?: string;\n  rules?: any[];\n}\n\nexport const RuleGroup = ({\n  level = 0,\n  id,\n  combinator = \"and\",\n  rules = [],\n  classes: classesProp,\n}: RuleGroupProps) => {\n  const { classes, cx } = useClasses(classesProp);\n\n  const context = useContext(QueryBuilderContext);\n\n  const { dispatchAction, askAction, maxDepth, combinators, labels, readOnly } =\n    context;\n  const normalizedMaxDepth = maxDepth - 1;\n\n  const actionButtons = (\n    <>\n      <div className={classes.buttonBackground}>\n        <HvButton\n          variant=\"secondarySubtle\"\n          onClick={() => {\n            dispatchAction({ type: \"add-rule\", id });\n          }}\n          disabled={readOnly}\n          startIcon={<Add />}\n        >\n          {level === 0 && labels.query?.addRule?.label != null\n            ? labels.query?.addRule?.label\n            : labels.group.addRule.label}\n        </HvButton>\n      </div>\n      {level <= normalizedMaxDepth && (\n        <div className={classes.buttonBackground}>\n          <HvButton\n            variant=\"secondarySubtle\"\n            onClick={() => {\n              dispatchAction({ type: \"add-group\", id });\n            }}\n            disabled={readOnly}\n            startIcon={<Add />}\n          >\n            {level === 0 && labels.query?.addGroup?.label != null\n              ? labels.query?.addGroup?.label\n              : labels.group.addGroup.label}\n          </HvButton>\n        </div>\n      )}\n    </>\n  );\n\n  const DeleteIcon = withTooltip(\n    () => (\n      <Delete className={cx({ [classes.topRemoveButtonDisabled]: readOnly })} />\n    ),\n    level === 0 && labels.query?.delete?.tooltip\n      ? labels.query?.delete?.tooltip\n      : labels.group.delete.tooltip,\n    \"top\"\n  );\n\n  const onClickCombinator = useCallback(\n    (item) => {\n      dispatchAction({\n        type: \"set-combinator\",\n        id,\n        combinator: item.operand,\n      });\n    },\n    [dispatchAction, id]\n  );\n\n  return (\n    <div\n      className={cx(classes.root, {\n        [classes.topGroup]: level === 0,\n        [classes.subGroup]: level > 0,\n      })}\n    >\n      <HvGrid container>\n        <HvGrid item>\n          <HvMultiButton\n            className={cx(classes.combinator, classes.topCombinator)}\n            disabled={readOnly}\n          >\n            {combinators &&\n              combinators.map((item) => (\n                <HvButton\n                  key={item.operand}\n                  className={classes.combinatorButton}\n                  selected={item.operand === combinator}\n                  onClick={() => item.operand && onClickCombinator(item)}\n                  disabled={readOnly}\n                  size=\"xs\"\n                >\n                  {item.label}\n                </HvButton>\n              ))}\n          </HvMultiButton>\n        </HvGrid>\n        <HvGrid item>\n          <div\n            className={cx(classes.buttonBackground, classes.topRemoveButton)}\n          >\n            <HvButton\n              icon\n              className={classes.removeButton}\n              onClick={() => {\n                askAction({\n                  actions: [{ type: \"remove-node\", id }],\n                  dialog:\n                    level === 0 && labels.query?.delete != null\n                      ? labels.query.delete\n                      : labels.group.delete,\n                });\n              }}\n              aria-label={\n                level === 0 && labels.query?.delete?.ariaLabel\n                  ? labels.query?.delete?.ariaLabel\n                  : labels.group.delete.ariaLabel\n              }\n              disabled={readOnly}\n            >\n              <DeleteIcon />\n            </HvButton>\n          </div>\n        </HvGrid>\n      </HvGrid>\n      {rules?.length > 0 && (\n        <div\n          className={cx(classes.rulesContainer, {\n            [classes.subRulesContainer]: level > 0,\n            [classes.topRulesContainer]: level === 0,\n          })}\n        >\n          {rules.map((rule, index) => {\n            if (\"combinator\" in rule) {\n              return (\n                <RuleGroup\n                  key={rule.id ?? index}\n                  level={level + 1}\n                  {...rule}\n                  id={rule.id}\n                  classes={classes}\n                />\n              );\n            }\n\n            const isInvalid =\n              combinator === \"and\" &&\n              rules.some((r, i) => {\n                if (\"attribute\" in r) {\n                  if (\n                    r.attribute === rule.attribute &&\n                    r.id !== rule.id &&\n                    i < index\n                  ) {\n                    return true;\n                  }\n                }\n                return false;\n              });\n\n            return (\n              <Rule\n                key={rule.id ?? index}\n                {...rule}\n                isInvalid={isInvalid}\n                id={rule.id}\n                combinator={combinator}\n              />\n            );\n          })}\n        </div>\n      )}\n      {rules?.length === 0 && (\n        <HvEmptyState\n          title={labels.empty?.title}\n          message={\n            <>\n              <HvTypography\n                variant=\"link\"\n                component=\"a\"\n                onClick={() => {\n                  dispatchAction({ type: \"add-rule\", id });\n                }}\n                style={{ cursor: \"pointer\", textDecoration: \"underline\" }}\n              >\n                {`${labels.empty?.createCondition}`}\n              </HvTypography>\n              {level <= normalizedMaxDepth && (\n                <>\n                  {`${labels.empty?.spacer}`}\n                  <HvTypography\n                    variant=\"link\"\n                    component=\"a\"\n                    onClick={() => {\n                      dispatchAction({ type: \"add-group\", id });\n                    }}\n                    style={{\n                      cursor: \"pointer\",\n                      textDecoration: \"underline\",\n                    }}\n                  >\n                    {`${labels.empty?.createGroup}`}\n                  </HvTypography>\n                </>\n              )}\n            </>\n          }\n          icon={<Info />}\n        />\n      )}\n      <HvGrid container>\n        <HvGrid\n          item\n          className={cx(\n            classes.actionButtonContainer,\n            classes.topActionButtonContainer\n          )}\n        >\n          {actionButtons}\n        </HvGrid>\n      </HvGrid>\n    </div>\n  );\n};\n"],"names":["RuleGroup","level","id","combinator","rules","classes","classesProp","cx","useClasses","context","useContext","QueryBuilderContext","dispatchAction","askAction","maxDepth","combinators","labels","readOnly","normalizedMaxDepth","actionButtons","jsxs","Fragment","jsx","buttonBackground","HvButton","type","Add","query","addRule","label","group","addGroup","DeleteIcon","withTooltip","Delete","topRemoveButtonDisabled","delete","tooltip","onClickCombinator","useCallback","item","operand","root","topGroup","subGroup","HvGrid","HvMultiButton","topCombinator","map","combinatorButton","topRemoveButton","removeButton","actions","dialog","ariaLabel","length","rulesContainer","subRulesContainer","topRulesContainer","rule","index","isInvalid","some","r","i","attribute","Rule","HvEmptyState","empty","title","HvTypography","cursor","textDecoration","createCondition","spacer","createGroup","Info","actionButtonContainer","topActionButtonContainer"],"mappings":"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"}