"use strict";
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const jsxRuntime = require("@emotion/react/jsx-runtime");
const React = require("react");
const Context = require("../../../Context.cjs");
const index = require("../../../utils/index.cjs");
const Dropdown = require("../../../../Dropdown/Dropdown.cjs");
const BooleanValue = ({
  id,
  value = true
}) => {
  const context = React.useContext(Context.QueryBuilderContext);
  const {
    labels,
    dispatchAction,
    readOnly
  } = context;
  const values = ["true", "false"].map((v) => ({
    id: v,
    label: labels.rule.value.boolean.options[v],
    selected: value === (v === "true")
  }));
  return /* @__PURE__ */ jsxRuntime.jsx(Dropdown.HvDropdown, { required: true, status: "valid", singleSelectionToggle: false, label: labels.rule.value.boolean.label, placeholder: labels.rule.value.boolean.placeholder, values, readOnly, onChange: (selected) => {
    if (selected && !Array.isArray(selected) && selected.id) {
      dispatchAction({
        type: "set-value",
        id,
        value: selected.id === "true"
      });
    } else {
      dispatchAction({
        type: "set-value",
        id,
        value: null
      });
    }
  }, showSearch: index.isBigList(values), ...index.isBigList(values) && {
    virtualized: true,
    height: 300
  } });
};
React.memo(BooleanValue);
exports.BooleanValue = BooleanValue;
//# sourceMappingURL=BooleanValue.cjs.map
