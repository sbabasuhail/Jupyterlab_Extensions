"use strict";
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const isBigList = (values) => values != null && (values == null ? void 0 : values.length) > 10;
const emptyRule = () => ({
  id: Math.random()
});
const emptyGroup = (createEmptyRule = false) => ({
  id: Math.random(),
  combinator: "and",
  rules: createEmptyRule ? [emptyRule()] : []
});
const clearNodeIds = (original) => {
  const rule = {
    ...original
  };
  delete rule.id;
  if ("rules" in rule) {
    rule.rules = rule.rules.map((r) => clearNodeIds(r));
  }
  return rule;
};
const findNodeById = (id, node) => {
  if (node.id === id) {
    return node;
  }
  if ("rules" in node) {
    for (let i = 0; i < node.rules.length; ++i) {
      const rule = node.rules[i];
      const found = findNodeById(id, rule);
      if (found) {
        return found;
      }
    }
  }
  return null;
};
const findParentById = (id, node, parent) => {
  if (node.id === id) {
    return parent ?? null;
  }
  if ("rules" in node) {
    const group = node;
    for (let i = 0; i < group.rules.length; ++i) {
      const rule = group.rules[i];
      const found = findParentById(id, rule, group);
      if (found) {
        return found;
      }
    }
  }
  return null;
};
exports.clearNodeIds = clearNodeIds;
exports.emptyGroup = emptyGroup;
exports.emptyRule = emptyRule;
exports.findNodeById = findNodeById;
exports.findParentById = findParentById;
exports.isBigList = isBigList;
//# sourceMappingURL=index.cjs.map
