"use strict";
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const uikitStyles = require("@hitachivantara/uikit-styles");
const classes = require("../../utils/classes.cjs");
const {
  useClasses,
  staticClasses
} = classes.createClasses("HvQueryBuilder", {
  /** Styles applied to the component root class. */
  root: {
    position: "relative",
    padding: uikitStyles.theme.space.sm,
    marginTop: 12,
    marginBottom: 32,
    border: uikitStyles.theme.queryBuilder.border
  },
  /** Styles applied to the top group container. */
  topGroup: {
    margin: uikitStyles.theme.space.sm,
    backgroundColor: "transparent",
    maxWidth: "100%",
    minWidth: 740,
    paddingBottom: uikitStyles.theme.queryBuilder.topGroupPaddingBottom
  },
  /** Styles applied to the sub group containers. */
  subGroup: {
    margin: "40px 14px 32px 20px",
    minHeight: 120,
    paddingBottom: 60,
    "&::before": {
      content: '""',
      position: "absolute",
      zIndex: 2,
      width: 21,
      height: 36,
      borderBottom: uikitStyles.theme.queryBuilder.border,
      borderLeft: uikitStyles.theme.queryBuilder.border,
      top: -38,
      left: uikitStyles.theme.queryBuilder.ruleSubGroupLeftConnectorPosition
    },
    ":not($topRulesContainer)>&:last-child::after": {
      content: '""',
      position: "absolute",
      zIndex: 1,
      width: 32,
      height: "100%",
      borderLeft: uikitStyles.theme.queryBuilder.border,
      top: 0,
      left: `calc(${uikitStyles.theme.space.sm} + 2)`
    }
  },
  /** Styles applied to the radio button+label topGroup when the radio button is disabled. */
  combinator: {
    minWidth: 80
  },
  /** Styles applied to the multi-button combinator container on the top group. */
  topCombinator: {
    position: "absolute",
    top: `calc( -1 * ${uikitStyles.theme.space.sm})`,
    left: `calc( -1 * ${uikitStyles.theme.space.sm})`
  },
  /** Styles applied to each combinator button. */
  combinatorButton: {},
  /** Styles applied to the remove button.  */
  removeButton: {},
  /** Styles applied to the remove button on the top group. */
  topRemoveButton: {
    position: "absolute",
    top: -16,
    right: -16
  },
  /** Styles applied to the remove button when disabled on the top group. */
  topRemoveButtonDisabled: {
    backgroundColor: uikitStyles.theme.colors.atmo2
  },
  /** Styles applied to the rules container. */
  rulesContainer: {},
  /** Styles applied to the sub rules container. */
  subRulesContainer: {
    borderLeft: uikitStyles.theme.queryBuilder.border,
    marginLeft: uikitStyles.theme.space.sm,
    marginBottom: uikitStyles.theme.space.md,
    paddingLeft: uikitStyles.theme.space.sm,
    paddingTop: 7,
    position: "relative",
    left: uikitStyles.theme.queryBuilder.ruleSubGroupContainerLeftConnectorPosition,
    width: "100%"
  },
  /** Styles applied to the action button container. */
  actionButtonContainer: {
    marginLeft: "auto",
    "&>*": {
      marginLeft: uikitStyles.theme.space.sm
    }
  },
  /** Styles applied to the top action button container. */
  topActionButtonContainer: {
    position: "absolute",
    bottom: uikitStyles.theme.queryBuilder.topActionButtonContainerBottom,
    right: uikitStyles.theme.queryBuilder.topActionButtonContainerRight
  },
  /** Styles applied to the top rules container. */
  topRulesContainer: {},
  /** Styles applied to the background of buttons to remove transparency */
  buttonBackground: {
    backgroundColor: uikitStyles.theme.colors.atmo2,
    display: "inline-flex"
  }
});
exports.staticClasses = staticClasses;
exports.useClasses = useClasses;
//# sourceMappingURL=QueryBuilder.styles.cjs.map
