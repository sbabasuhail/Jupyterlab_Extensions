{"version":3,"file":"Operator.cjs","sources":["../../../../../../src/components/QueryBuilder/Rule/Operator/Operator.tsx"],"sourcesContent":["import { memo, useContext, useMemo } from \"react\";\n\nimport { HvDropdown } from \"@core/components/Dropdown\";\n\nimport { QueryBuilderContext } from \"../../Context\";\nimport { isBigList } from \"../../utils\";\n\nexport interface OperatorProps {\n  id: number;\n  combinator: string;\n  attribute: string;\n  operator: string;\n}\n\nexport const Operator = ({ id, combinator, attribute, operator }) => {\n  const context = useContext(QueryBuilderContext);\n\n  const { dispatchAction, attributes, operators, labels, readOnly } = context;\n\n  const value = operator ?? null;\n\n  const values = useMemo(() => {\n    const attributeSpec =\n      attribute && attributes ? attributes[attribute] : null;\n    const options = attributeSpec\n      ? operators[attributeSpec.type].filter((o) =>\n          o.combinators.includes(combinator)\n        ) ?? []\n      : [];\n    return options.map((key) => ({\n      id: key.operator,\n      label: key.label,\n      selected: key.operator === value,\n    }));\n  }, [attribute, attributes, operators, combinator, value]);\n\n  return (\n    <HvDropdown\n      required\n      status=\"valid\"\n      singleSelectionToggle={false}\n      label={labels.rule.operator.label}\n      placeholder={labels.rule.operator.placeholder}\n      values={values}\n      disabled={values.length === 0}\n      readOnly={readOnly}\n      onChange={(selected) => {\n        if (selected && !Array.isArray(selected) && selected.id) {\n          dispatchAction({\n            type: \"set-operator\",\n            id,\n            operator: selected.id.toString(),\n            value:\n              value === \"range\" || selected.id === \"range\" ? null : undefined,\n          });\n        } else {\n          dispatchAction({\n            type: \"set-operator\",\n            id,\n            operator: null,\n            value: null,\n          });\n        }\n      }}\n      showSearch={isBigList(values)}\n      {...(isBigList(values) && { virtualized: true, height: 300 })}\n    />\n  );\n};\n\nexport default memo(Operator);\n"],"names":["Operator","id","combinator","attribute","operator","context","useContext","QueryBuilderContext","dispatchAction","attributes","operators","labels","readOnly","value","values","useMemo","attributeSpec","options","type","filter","o","combinators","includes","map","key","label","selected","jsx","HvDropdown","rule","placeholder","length","Array","isArray","toString","undefined","isBigList","virtualized","height","memo"],"mappings":";;;;;;;AAcO,MAAMA,WAAWA,CAAC;AAAA,EAAEC;AAAAA,EAAIC;AAAAA,EAAYC;AAAAA,EAAWC;AAAS,MAAM;AAC7DC,QAAAA,UAAUC,iBAAWC,QAAAA,mBAAmB;AAExC,QAAA;AAAA,IAAEC;AAAAA,IAAgBC;AAAAA,IAAYC;AAAAA,IAAWC;AAAAA,IAAQC;AAAAA,EAAaP,IAAAA;AAEpE,QAAMQ,QAAQT,YAAY;AAEpBU,QAAAA,SAASC,MAAAA,QAAQ,MAAM;AAC3B,UAAMC,gBACJb,aAAaM,aAAaA,WAAWN,SAAS,IAAI;AACpD,UAAMc,UAAUD,gBACZN,UAAUM,cAAcE,IAAI,EAAEC,OAAQC,CAAAA,MACpCA,EAAEC,YAAYC,SAASpB,UAAU,CACnC,KAAK,KACL;AACGe,WAAAA,QAAQM,IAAKC,CAAS,SAAA;AAAA,MAC3BvB,IAAIuB,IAAIpB;AAAAA,MACRqB,OAAOD,IAAIC;AAAAA,MACXC,UAAUF,IAAIpB,aAAaS;AAAAA,IAC3B,EAAA;AAAA,EAAA,GACD,CAACV,WAAWM,YAAYC,WAAWR,YAAYW,KAAK,CAAC;AAGtD,SAAAc,2BAAA,IAACC,SACC,YAAA,EAAA,UAAQ,MACR,QAAO,SACP,uBAAuB,OACvB,OAAOjB,OAAOkB,KAAKzB,SAASqB,OAC5B,aAAad,OAAOkB,KAAKzB,SAAS0B,aAClC,QACA,UAAUhB,OAAOiB,WAAW,GAC5B,UACA,UAAWL,CAAa,aAAA;AACtB,QAAIA,YAAY,CAACM,MAAMC,QAAQP,QAAQ,KAAKA,SAASzB,IAAI;AACxC,qBAAA;AAAA,QACbiB,MAAM;AAAA,QACNjB;AAAAA,QACAG,UAAUsB,SAASzB,GAAGiC,SAAS;AAAA,QAC/BrB,OACEA,UAAU,WAAWa,SAASzB,OAAO,UAAU,OAAOkC;AAAAA,MAAAA,CACzD;AAAA,IAAA,OACI;AACU,qBAAA;AAAA,QACbjB,MAAM;AAAA,QACNjB;AAAAA,QACAG,UAAU;AAAA,QACVS,OAAO;AAAA,MAAA,CACR;AAAA,IACH;AAAA,EAAA,GAEF,YAAYuB,MAAAA,UAAUtB,MAAM,GACvBsB,GAAAA,MAAAA,UAAUtB,MAAM,KAAK;AAAA,IAAEuB,aAAa;AAAA,IAAMC,QAAQ;AAAA,EACvD,EAAA,CAAA;AAEN;AAEeC,WAAKvC,QAAQ;;"}