"use strict";
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const jsxRuntime = require("@emotion/react/jsx-runtime");
const React = require("react");
const uniqueId = require("lodash/uniqueId");
const isEmpty = require("lodash/isEmpty");
const material = require("@mui/material");
const Context = require("../../../Context.cjs");
const Numeric_styles = require("./Numeric.styles.cjs");
const Input = require("../../../../Input/Input.cjs");
const _interopDefault = (e) => e && e.__esModule ? e : { default: e };
const uniqueId__default = /* @__PURE__ */ _interopDefault(uniqueId);
const isEmpty__default = /* @__PURE__ */ _interopDefault(isEmpty);
const NumericValue = ({
  id,
  value,
  operator,
  initialTouched = false
}) => {
  var _a, _b;
  const {
    classes,
    cx
  } = Numeric_styles.useClasses();
  const isRange = operator === "range";
  const context = React.useContext(Context.QueryBuilderContext);
  const {
    labels,
    dispatchAction,
    readOnly
  } = context;
  const theme = material.useTheme();
  const isMdDown = material.useMediaQuery(theme.breakpoints.down("md"));
  const onSingleValueChange = React.useCallback((evt, data) => {
    const numericData = isEmpty__default.default(data) ? null : Number(data);
    dispatchAction({
      type: "set-value",
      id,
      value: Number.isNaN(numericData) ? data : numericData
    });
  }, [dispatchAction, id]);
  const onRangeValueChange = React.useCallback((evt, data, from = true) => {
    const numericData = isEmpty__default.default(data) ? null : Number(data);
    const currentValue = value;
    const numericRange = {
      from: currentValue == null ? void 0 : currentValue.from,
      to: currentValue == null ? void 0 : currentValue.to
    };
    if (from) {
      numericRange.from = Number.isNaN(numericData) ? data : numericData;
    } else {
      numericRange.to = Number.isNaN(numericData) ? data : numericData;
    }
    dispatchAction({
      type: "set-value",
      id,
      value: numericRange
    });
  }, [dispatchAction, id, value]);
  const [touchedNumeric, setTouchedNumeric] = React.useState(initialTouched);
  const [touchedNumericTo, setTouchedNumericTo] = React.useState(initialTouched);
  const elementId = uniqueId__default.default("numeric");
  let numericValidation = null;
  let rightValidation = null;
  if (touchedNumeric || touchedNumericTo) {
    if (value === void 0 || (value == null ? void 0 : value.toString()) === "") {
      if (touchedNumeric) {
        numericValidation = "required";
      }
      if (touchedNumericTo) {
        rightValidation = "required";
      }
    } else if (!isRange) {
      if (Number.isNaN(Number(value))) {
        numericValidation = "invalid";
      }
    } else if (isRange) {
      const rangeValue = value;
      if ((rangeValue == null ? void 0 : rangeValue.from) === void 0 || ((_a = rangeValue == null ? void 0 : rangeValue.from) == null ? void 0 : _a.toString()) === "") {
        numericValidation = "required";
      } else if (Number.isNaN(Number(rangeValue == null ? void 0 : rangeValue.from))) {
        numericValidation = "invalid";
      }
      if ((rangeValue == null ? void 0 : rangeValue.to) === void 0 || ((_b = rangeValue == null ? void 0 : rangeValue.to) == null ? void 0 : _b.toString()) === "") {
        rightValidation = "required";
      } else if (Number.isNaN(Number(rangeValue == null ? void 0 : rangeValue.to))) {
        rightValidation = "invalid";
      } else if (Number(rangeValue == null ? void 0 : rangeValue.from) > Number(rangeValue == null ? void 0 : rangeValue.to)) {
        rightValidation = "greaterThan";
      } else if (Number(rangeValue == null ? void 0 : rangeValue.from) === Number(rangeValue == null ? void 0 : rangeValue.to)) {
        rightValidation = "equal";
      }
    }
  }
  const numericStatus = numericValidation != null ? "invalid" : "valid";
  const rightStatus = rightValidation != null ? "invalid" : "valid";
  const renderRangeInputs = (rangeValue) => {
    var _a2, _b2;
    return /* @__PURE__ */ jsxRuntime.jsxs("div", { className: cx(classes.rangeContainer, {
      [classes.isMdDown]: isMdDown
    }), children: [
      /* @__PURE__ */ jsxRuntime.jsx("div", { className: classes.inputContainer, children: /* @__PURE__ */ jsxRuntime.jsx(Input.HvInput, { label: labels.rule.value.numeric.range.leftLabel, className: classes.input, id: `${elementId}-numeric-from`, name: `${elementId}-numeric-from`, value: ((_a2 = rangeValue == null ? void 0 : rangeValue.from) == null ? void 0 : _a2.toString()) || "", onChange: (event, data) => onRangeValueChange(event, data), onBlur: () => {
        setTouchedNumeric(true);
      }, onKeyDown: (e) => {
        if (e.key === "Enter") {
          e.preventDefault();
        }
      }, status: !touchedNumeric ? "standBy" : numericStatus, statusMessage: numericValidation ? labels.rule.value.numeric.validation[numericValidation] : "", required: true, inputProps: {
        autoComplete: "off"
      }, placeholder: labels.rule.value.numeric.placeholder, readOnly }) }),
      /* @__PURE__ */ jsxRuntime.jsx("div", { className: classes.inputContainer, children: /* @__PURE__ */ jsxRuntime.jsx(Input.HvInput, { label: labels.rule.value.numeric.range.rightLabel, className: classes.input, id: `${elementId}-numeric-to`, name: `${elementId}-numeric-to`, value: ((_b2 = rangeValue == null ? void 0 : rangeValue.to) == null ? void 0 : _b2.toString()) || "", onChange: (event, data) => onRangeValueChange(event, data, false), onBlur: () => {
        setTouchedNumericTo(true);
      }, onKeyDown: (e) => {
        if (e.key === "Enter") {
          e.preventDefault();
        }
      }, status: !touchedNumericTo ? "standBy" : rightStatus, statusMessage: rightValidation ? labels.rule.value.numeric.validation[rightValidation] : "", required: true, inputProps: {
        autoComplete: "off"
      }, placeholder: labels.rule.value.numeric.placeholder, readOnly }) })
    ] });
  };
  return /* @__PURE__ */ jsxRuntime.jsxs("div", { className: classes.root, children: [
    isRange && renderRangeInputs(value || {}),
    !isRange && /* @__PURE__ */ jsxRuntime.jsx("div", { className: classes.inputContainer, children: /* @__PURE__ */ jsxRuntime.jsx(Input.HvInput, { label: labels.rule.value.numeric.label, className: classes.input, id: `${elementId}-numeric`, name: `${elementId}-numeric`, value: value ? value.toString() : "", onChange: onSingleValueChange, onBlur: () => {
      setTouchedNumeric(true);
    }, onKeyDown: (e) => {
      if (e.key === "Enter") {
        e.preventDefault();
      }
    }, status: !touchedNumeric ? "standBy" : numericStatus, required: true, inputProps: {
      autoComplete: "off"
    }, placeholder: labels.rule.value.numeric.placeholder, statusMessage: numericValidation ? labels.rule.value.numeric.validation[numericValidation] : "", readOnly }) })
  ] });
};
React.memo(NumericValue);
exports.NumericValue = NumericValue;
//# sourceMappingURL=NumericValue.cjs.map
