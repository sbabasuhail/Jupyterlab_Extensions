{"version":3,"file":"NumericValue.cjs","sources":["../../../../../../../src/components/QueryBuilder/Rule/Value/NumericValue/NumericValue.tsx"],"sourcesContent":["import { memo, useCallback, useContext, useState } from \"react\";\n\nimport uniqueId from \"lodash/uniqueId\";\nimport isEmpty from \"lodash/isEmpty\";\n\nimport { useMediaQuery, useTheme } from \"@mui/material\";\n\nimport { HvInput } from \"@core/components/Input\";\n\nimport { QueryBuilderContext } from \"../../../Context\";\nimport { useClasses } from \"./Numeric.styles\";\n\nexport interface NumericValueProps {\n  id: number;\n  value: any;\n  operator: string;\n  initialTouched?: boolean;\n}\n\nexport const NumericValue = ({\n  id,\n  value,\n  operator,\n  initialTouched = false,\n}: NumericValueProps) => {\n  const { classes, cx } = useClasses();\n\n  const isRange = operator === \"range\";\n  const context = useContext(QueryBuilderContext);\n  const { labels, dispatchAction, readOnly } = context;\n\n  const theme = useTheme();\n\n  const isMdDown = useMediaQuery(theme.breakpoints.down(\"md\"));\n\n  const onSingleValueChange = useCallback(\n    (evt, data) => {\n      const numericData = isEmpty(data) ? null : Number(data);\n      dispatchAction({\n        type: \"set-value\",\n        id,\n        value: Number.isNaN(numericData) ? data : numericData,\n      });\n    },\n    [dispatchAction, id]\n  );\n\n  const onRangeValueChange = useCallback(\n    (evt, data, from = true) => {\n      const numericData = isEmpty(data) ? null : Number(data);\n      const currentValue = value;\n      const numericRange = {\n        from: currentValue?.from,\n        to: currentValue?.to,\n      };\n      if (from) {\n        numericRange.from = Number.isNaN(numericData) ? data : numericData;\n      } else {\n        numericRange.to = Number.isNaN(numericData) ? data : numericData;\n      }\n      dispatchAction({\n        type: \"set-value\",\n        id,\n        value: numericRange,\n      });\n    },\n    [dispatchAction, id, value]\n  );\n\n  const [touchedNumeric, setTouchedNumeric] = useState(initialTouched);\n  const [touchedNumericTo, setTouchedNumericTo] = useState(initialTouched);\n\n  const elementId = uniqueId(\"numeric\");\n\n  let numericValidation: \"required\" | \"invalid\" | null = null;\n  let rightValidation: \"required\" | \"invalid\" | \"greaterThan\" | \"equal\" | null =\n    null;\n\n  if (touchedNumeric || touchedNumericTo) {\n    if (value === undefined || value?.toString() === \"\") {\n      if (touchedNumeric) {\n        numericValidation = \"required\";\n      }\n      if (touchedNumericTo) {\n        rightValidation = \"required\";\n      }\n    } else if (!isRange) {\n      if (Number.isNaN(Number(value))) {\n        numericValidation = \"invalid\";\n      }\n    } else if (isRange) {\n      const rangeValue = value;\n      if (\n        rangeValue?.from === undefined ||\n        rangeValue?.from?.toString() === \"\"\n      ) {\n        numericValidation = \"required\";\n      } else if (Number.isNaN(Number(rangeValue?.from))) {\n        numericValidation = \"invalid\";\n      }\n\n      if (rangeValue?.to === undefined || rangeValue?.to?.toString() === \"\") {\n        rightValidation = \"required\";\n      } else if (Number.isNaN(Number(rangeValue?.to))) {\n        rightValidation = \"invalid\";\n      } else if (Number(rangeValue?.from) > Number(rangeValue?.to)) {\n        rightValidation = \"greaterThan\";\n      } else if (Number(rangeValue?.from) === Number(rangeValue?.to)) {\n        rightValidation = \"equal\";\n      }\n    }\n  }\n\n  const numericStatus = numericValidation != null ? \"invalid\" : \"valid\";\n  const rightStatus = rightValidation != null ? \"invalid\" : \"valid\";\n\n  const renderRangeInputs = (rangeValue) => (\n    <div\n      className={cx(classes.rangeContainer, { [classes.isMdDown]: isMdDown })}\n    >\n      <div className={classes.inputContainer}>\n        <HvInput\n          label={labels.rule.value.numeric.range.leftLabel}\n          className={classes.input}\n          id={`${elementId}-numeric-from`}\n          name={`${elementId}-numeric-from`}\n          value={rangeValue?.from?.toString() || \"\"}\n          onChange={(event, data) => onRangeValueChange(event, data)}\n          onBlur={() => {\n            setTouchedNumeric(true);\n          }}\n          onKeyDown={(e: any) => {\n            if (e.key === \"Enter\") {\n              e.preventDefault();\n            }\n          }}\n          status={!touchedNumeric ? \"standBy\" : numericStatus}\n          statusMessage={\n            numericValidation\n              ? labels.rule.value.numeric.validation[numericValidation]\n              : \"\"\n          }\n          required\n          inputProps={{\n            autoComplete: \"off\",\n          }}\n          placeholder={labels.rule.value.numeric.placeholder}\n          readOnly={readOnly}\n        />\n      </div>\n      <div className={classes.inputContainer}>\n        <HvInput\n          label={labels.rule.value.numeric.range.rightLabel}\n          className={classes.input}\n          id={`${elementId}-numeric-to`}\n          name={`${elementId}-numeric-to`}\n          value={rangeValue?.to?.toString() || \"\"}\n          onChange={(event, data) => onRangeValueChange(event, data, false)}\n          onBlur={() => {\n            setTouchedNumericTo(true);\n          }}\n          onKeyDown={(e: any) => {\n            if (e.key === \"Enter\") {\n              e.preventDefault();\n            }\n          }}\n          status={!touchedNumericTo ? \"standBy\" : rightStatus}\n          statusMessage={\n            rightValidation\n              ? labels.rule.value.numeric.validation[rightValidation]\n              : \"\"\n          }\n          required\n          inputProps={{\n            autoComplete: \"off\",\n          }}\n          placeholder={labels.rule.value.numeric.placeholder}\n          readOnly={readOnly}\n        />\n      </div>\n    </div>\n  );\n\n  return (\n    <div className={classes.root}>\n      {isRange && renderRangeInputs(value || {})}\n      {!isRange && (\n        <div className={classes.inputContainer}>\n          <HvInput\n            label={labels.rule.value.numeric.label}\n            className={classes.input}\n            id={`${elementId}-numeric`}\n            name={`${elementId}-numeric`}\n            value={value ? value.toString() : \"\"}\n            onChange={onSingleValueChange}\n            onBlur={() => {\n              setTouchedNumeric(true);\n            }}\n            onKeyDown={(e: any) => {\n              if (e.key === \"Enter\") {\n                e.preventDefault();\n              }\n            }}\n            status={!touchedNumeric ? \"standBy\" : numericStatus}\n            required\n            inputProps={{\n              autoComplete: \"off\",\n            }}\n            placeholder={labels.rule.value.numeric.placeholder}\n            statusMessage={\n              numericValidation\n                ? labels.rule.value.numeric.validation[numericValidation]\n                : \"\"\n            }\n            readOnly={readOnly}\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(NumericValue);\n"],"names":["NumericValue","id","value","operator","initialTouched","classes","cx","useClasses","isRange","context","useContext","QueryBuilderContext","labels","dispatchAction","readOnly","theme","useTheme","isMdDown","useMediaQuery","breakpoints","down","onSingleValueChange","useCallback","evt","data","numericData","isEmpty","Number","type","isNaN","onRangeValueChange","from","currentValue","numericRange","to","touchedNumeric","setTouchedNumeric","useState","touchedNumericTo","setTouchedNumericTo","elementId","uniqueId","numericValidation","rightValidation","undefined","toString","rangeValue","numericStatus","rightStatus","renderRangeInputs","jsxs","rangeContainer","jsx","inputContainer","HvInput","rule","numeric","range","leftLabel","input","event","e","key","preventDefault","validation","autoComplete","placeholder","rightLabel","root","label","memo"],"mappings":"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"}