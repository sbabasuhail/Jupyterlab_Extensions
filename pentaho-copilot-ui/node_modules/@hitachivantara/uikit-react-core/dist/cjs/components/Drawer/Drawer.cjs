"use strict";
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const jsxRuntime = require("@emotion/react/jsx-runtime");
const React = require("react");
const useDefaultProps = require("../../hooks/useDefaultProps.cjs");
const material = require("@mui/material");
const uikitReactIcons = require("@hitachivantara/uikit-react-icons");
const uikitStyles = require("@hitachivantara/uikit-styles");
const withTooltip = require("../../hocs/withTooltip.cjs");
const hexToRgbA = require("../../utils/hexToRgbA.cjs");
const setId = require("../../utils/setId.cjs");
const checkValidHexColorValue = require("../../utils/checkValidHexColorValue.cjs");
const theme = require("../../utils/theme.cjs");
const useTheme = require("../../hooks/useTheme.cjs");
const Drawer_styles = require("./Drawer.styles.cjs");
const Button = require("../Button/Button.cjs");
const getBackgroundColor = (color) => {
  return checkValidHexColorValue.checkValidHexColorValue(color) ? hexToRgbA.hexToRgbA(color, 0.8) : color;
};
const HvDrawer = (props) => {
  const {
    className,
    classes: classesProp,
    id,
    children,
    open,
    onClose,
    anchor = "right",
    buttonTitle = "Close",
    ...others
  } = useDefaultProps.useDefaultProps("HvDrawer", props);
  const {
    classes,
    css,
    cx
  } = Drawer_styles.useClasses(classesProp);
  const {
    colors,
    activeTheme,
    rootId
  } = useTheme.useTheme();
  const [backgroundColorValue, setBackgroundColorValue] = React.useState(theme.getVarValue(uikitStyles.theme.drawer.backDropBackgroundColor, rootId) || "");
  const closeButtonDisplay = () => /* @__PURE__ */ jsxRuntime.jsx(uikitReactIcons.Close, { role: "none" });
  const CloseButtonTooltipWrapper = buttonTitle ? withTooltip.withTooltip(closeButtonDisplay, buttonTitle, "top") : closeButtonDisplay;
  const [backgroundColor, setBackgroundColor] = React.useState(getBackgroundColor(backgroundColorValue));
  React.useEffect(() => {
    setBackgroundColorValue(theme.getVarValue(uikitStyles.theme.drawer.backDropBackgroundColor, rootId) || (activeTheme == null ? void 0 : activeTheme.drawer.backDropBackgroundColor) || "");
    setBackgroundColor(getBackgroundColor(backgroundColorValue));
  }, [colors, backgroundColorValue, setBackgroundColor, rootId, activeTheme == null ? void 0 : activeTheme.drawer.backDropBackgroundColor]);
  return /* @__PURE__ */ jsxRuntime.jsxs(material.Drawer, { className: cx(classes.root, className), id, anchor, open, PaperProps: {
    classes: {
      root: classes.paper
    }
  }, BackdropProps: {
    classes: {
      root: cx(css({
        backgroundColor
      }), classes.background)
    }
  }, onClose, ...others, children: [
    /* @__PURE__ */ jsxRuntime.jsx(Button.HvButton, { id: setId.setId(id, "close"), className: classes.closeButton, variant: "secondaryGhost", onClick: onClose, "aria-label": buttonTitle, children: /* @__PURE__ */ jsxRuntime.jsx(CloseButtonTooltipWrapper, {}) }),
    children
  ] });
};
exports.drawerClasses = Drawer_styles.staticClasses;
exports.HvDrawer = HvDrawer;
//# sourceMappingURL=Drawer.cjs.map
