"use strict";
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const jsxRuntime = require("@emotion/react/jsx-runtime");
const React = require("react");
const useDefaultProps = require("../../hooks/useDefaultProps.cjs");
const uikitStyles = require("@hitachivantara/uikit-styles");
const uikitReactIcons = require("@hitachivantara/uikit-react-icons");
const useUniqueId = require("../../hooks/useUniqueId.cjs");
const useControlled = require("../../hooks/useControlled.cjs");
const keyboardUtils = require("../../utils/keyboardUtils.cjs");
const setId = require("../../utils/setId.cjs");
const focusableElementFinder = require("../../utils/focusableElementFinder.cjs");
const DropDownMenu_styles = require("./DropDownMenu.styles.cjs");
const BaseDropdown = require("../BaseDropdown/BaseDropdown.cjs");
const Button = require("../Button/Button.cjs");
const Panel = require("../Panel/Panel.cjs");
const List = require("../List/List.cjs");
const HvDropDownMenu = (props) => {
  const {
    id: idProp,
    classes: classesProp,
    className,
    icon,
    placement = "right",
    dataList,
    disablePortal = false,
    onToggle,
    onClick,
    keepOpened = true,
    disabled = false,
    expanded,
    defaultExpanded = false,
    category = "secondaryGhost",
    ...others
  } = useDefaultProps.useDefaultProps("HvDropDownMenu", props);
  const {
    classes,
    cx
  } = DropDownMenu_styles.useClasses(classesProp);
  const [open, setOpen] = useControlled.useControlled(expanded, Boolean(defaultExpanded));
  const id = useUniqueId.useUniqueId(idProp, "dropdown-menu");
  const focusNodes = focusableElementFinder.getPrevNextFocus(setId.setId(id, "icon-button"));
  const listId = setId.setId(id, "list");
  const handleClose = (event) => {
    setOpen(false);
    onToggle == null ? void 0 : onToggle(event, false);
  };
  const handleKeyDown = (event) => {
    if (keyboardUtils.isKey(event, "Tab")) {
      const node = event.shiftKey ? focusNodes.prevFocus : focusNodes.nextFocus;
      if (node)
        setTimeout(() => node.focus(), 0);
      handleClose(event);
    }
    event.preventDefault();
  };
  const setFocusToContent = (containerRef) => {
    var _a;
    (_a = containerRef == null ? void 0 : containerRef.getElementsByTagName("li")[0]) == null ? void 0 : _a.focus();
  };
  const condensed = React.useMemo(() => dataList.every((el) => !el.icon), [dataList]);
  const popperStyle = {
    style: {
      zIndex: uikitStyles.theme.zIndices.tooltip,
      width: "auto",
      position: "relative"
    }
  };
  return /* @__PURE__ */ jsxRuntime.jsx(BaseDropdown.HvBaseDropdown, { id, className: cx(classes.container, className), classes: {
    root: classes.root,
    container: classes.baseContainer
  }, expanded: open && !disabled, component: /* @__PURE__ */ jsxRuntime.jsx(Button.HvButton, { icon: true, variant: category, id: setId.setId(id, "icon-button"), className: cx(classes.icon, {
    [classes.iconSelected]: open
  }), "aria-expanded": open, disabled, "aria-label": "Dropdown menu", "aria-haspopup": "menu", children: icon || /* @__PURE__ */ jsxRuntime.jsx(uikitReactIcons.MoreOptionsVertical, { "aria-hidden": true, color: disabled ? "secondary_60" : void 0 }) }), placement, variableWidth: true, disablePortal, onToggle: (e, s) => {
    setOpen(s);
    onToggle == null ? void 0 : onToggle(e, s);
  }, disabled, onContainerCreation: setFocusToContent, popperProps: popperStyle, ...others, children: /* @__PURE__ */ jsxRuntime.jsx(Panel.HvPanel, { className: classes.menuListRoot, children: /* @__PURE__ */ jsxRuntime.jsx(List.HvList, { id: listId, values: dataList, selectable: false, condensed, onClick: (event, item) => {
    if (!keepOpened)
      handleClose(event);
    onClick == null ? void 0 : onClick(event, item);
  }, onKeyDown: handleKeyDown, classes: {
    root: classes.menuList
  } }) }) });
};
exports.dropDownMenuClasses = DropDownMenu_styles.staticClasses;
exports.HvDropDownMenu = HvDropDownMenu;
//# sourceMappingURL=DropDownMenu.cjs.map
