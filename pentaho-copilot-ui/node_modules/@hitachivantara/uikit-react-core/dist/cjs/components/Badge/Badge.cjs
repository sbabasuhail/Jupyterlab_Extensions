"use strict";
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const jsxRuntime = require("@emotion/react/jsx-runtime");
const useDefaultProps = require("../../hooks/useDefaultProps.cjs");
const Badge_styles = require("./Badge.styles.cjs");
const Typography = require("../Typography/Typography.cjs");
const HvBadge = (props) => {
  const {
    classes: classesProp,
    className,
    showCount = false,
    count = 0,
    maxCount = 99,
    label = null,
    icon = null,
    text = null,
    textVariant = void 0,
    ...others
  } = useDefaultProps.useDefaultProps("HvBadge", props);
  const {
    classes,
    cx
  } = Badge_styles.useClasses(classesProp);
  const renderedCount = count > maxCount ? `${maxCount}+` : count;
  const renderedCountOrLabel = label || showCount && count > 0 && renderedCount || null;
  const Component = icon || text && /* @__PURE__ */ jsxRuntime.jsx(Typography.HvTypography, { variant: textVariant, children: text });
  return /* @__PURE__ */ jsxRuntime.jsxs("div", { className: cx(classes.root, className), ...others, children: [
    Component,
    /* @__PURE__ */ jsxRuntime.jsx("div", { className: Component ? classes.badgeContainer : void 0, children: /* @__PURE__ */ jsxRuntime.jsx("div", { className: cx(classes.badgePosition, {
      [classes.badge]: !!(count > 0 || renderedCountOrLabel),
      [classes.showCount]: !!(!label && renderedCountOrLabel),
      [classes.showLabel]: !!label,
      [classes.badgeIcon]: !!icon,
      [classes.badgeOneDigit]: String(renderedCountOrLabel).length === 1
    }), children: renderedCountOrLabel }) })
  ] });
};
exports.badgeClasses = Badge_styles.staticClasses;
exports.HvBadge = HvBadge;
//# sourceMappingURL=Badge.cjs.map
