"use strict";
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const jsxRuntime = require("@emotion/react/jsx-runtime");
const React = require("react");
const useDefaultProps = require("../../hooks/useDefaultProps.cjs");
const useUniqueId = require("../../hooks/useUniqueId.cjs");
const useControlled = require("../../hooks/useControlled.cjs");
const setId = require("../../utils/setId.cjs");
const validationStates = require("../Forms/FormElement/validationStates.cjs");
const Switch_styles = require("./Switch.styles.cjs");
const BaseSwitch = require("../BaseSwitch/BaseSwitch.cjs");
const FormElement = require("../Forms/FormElement/FormElement.cjs");
const Label = require("../Forms/Label/Label.cjs");
const WarningText = require("../Forms/WarningText/WarningText.cjs");
const HvSwitch = (props) => {
  const {
    classes: classesProp,
    className,
    id,
    name,
    value = "on",
    required = false,
    readOnly = false,
    disabled = false,
    label,
    "aria-label": ariaLabel,
    "aria-labelledby": ariaLabelledBy,
    "aria-describedby": ariaDescribedBy,
    labelProps,
    checked,
    defaultChecked = false,
    onChange,
    status,
    statusMessage,
    "aria-errormessage": ariaErrorMessage,
    inputProps,
    ...others
  } = useDefaultProps.useDefaultProps("HvSwitch", props);
  const {
    classes,
    cx
  } = Switch_styles.useClasses(classesProp);
  const elementId = useUniqueId.useUniqueId(id, "hvswitch");
  const [isChecked, setIsChecked] = useControlled.useControlled(checked, Boolean(defaultChecked));
  const [validationState, setValidationState] = useControlled.useControlled(status, "standBy");
  const [validationMessage] = useControlled.useControlled(statusMessage, "Required");
  const onLocalChange = React.useCallback((evt, newChecked) => {
    setIsChecked(() => {
      if (required && !newChecked) {
        setValidationState("invalid");
      } else {
        setValidationState("valid");
      }
      return newChecked;
    });
    onChange == null ? void 0 : onChange(evt, newChecked, value);
  }, [onChange, required, setIsChecked, setValidationState, value]);
  const canShowError = ariaErrorMessage == null && (status !== void 0 && statusMessage !== void 0 || status === void 0 && required);
  const isStateInvalid = validationStates.isInvalid(validationState);
  let errorMessageId;
  if (isStateInvalid) {
    errorMessageId = canShowError ? setId.setId(elementId, "error") : ariaErrorMessage;
  }
  return /* @__PURE__ */ jsxRuntime.jsxs(FormElement.HvFormElement, { id, name, status: validationState, disabled, required, readOnly, className: cx(classes.root, className), children: [
    label && /* @__PURE__ */ jsxRuntime.jsx(Label.HvLabel, { id: setId.setId(elementId, "label"), htmlFor: setId.setId(elementId, "input"), label, className: classes.label, ...labelProps }),
    /* @__PURE__ */ jsxRuntime.jsx("div", { className: cx(classes.switchContainer, {
      [classes.invalidSwitch]: isStateInvalid
    }), children: /* @__PURE__ */ jsxRuntime.jsx(BaseSwitch.HvBaseSwitch, { id: label ? setId.setId(elementId, "input") : setId.setId(id, "input"), name, disabled, readOnly, required, onChange: onLocalChange, value, checked: isChecked, inputProps: {
      "aria-invalid": isStateInvalid ? true : void 0,
      "aria-errormessage": errorMessageId,
      "aria-label": ariaLabel,
      "aria-labelledby": ariaLabelledBy,
      "aria-describedby": ariaDescribedBy,
      ...inputProps
    }, ...others }) }),
    canShowError && /* @__PURE__ */ jsxRuntime.jsx(WarningText.HvWarningText, { id: setId.setId(elementId, "error"), className: classes.error, disableBorder: true, disableAdornment: true, hideText: true, children: validationMessage })
  ] });
};
exports.switchClasses = Switch_styles.staticClasses;
exports.HvSwitch = HvSwitch;
//# sourceMappingURL=Switch.cjs.map
