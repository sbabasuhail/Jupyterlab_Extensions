"use strict";
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const jsxRuntime = require("@emotion/react/jsx-runtime");
const uikitStyles = require("@hitachivantara/uikit-styles");
const useDefaultProps = require("../../hooks/useDefaultProps.cjs");
const setId = require("../../utils/setId.cjs");
const useTheme = require("../../hooks/useTheme.cjs");
const hexToRgbA = require("../../utils/hexToRgbA.cjs");
const BulkActions_styles = require("./BulkActions.styles.cjs");
const Button = require("../Button/Button.cjs");
const Typography = require("../Typography/Typography.cjs");
const CheckBox = require("../CheckBox/CheckBox.cjs");
const ActionsGeneric = require("../ActionsGeneric/ActionsGeneric.cjs");
const HvBulkActions = (props) => {
  const {
    id,
    className,
    classes: classesProp,
    selectAllPagesLabel,
    actionsDisabled,
    maxVisibleActions,
    checkboxProps,
    actions,
    numTotal = 0,
    numSelected = 0,
    selectAllLabel = "All",
    selectAllConjunctionLabel = "/",
    showSelectAllPages = false,
    semantic = true,
    actionsCallback,
    onSelectAll,
    onSelectAllPages,
    ...others
  } = useDefaultProps.useDefaultProps("HvBulkActions", props);
  const {
    classes,
    cx,
    css
  } = BulkActions_styles.useClasses(classesProp);
  const {
    activeTheme,
    colors
  } = useTheme.useTheme();
  const baseColor = (colors == null ? void 0 : colors.base_light) || uikitStyles.theme.colors.base_light;
  const anySelected = numSelected > 0;
  const isSemantic = semantic && anySelected;
  const selectAllLabelComponent = /* @__PURE__ */ jsxRuntime.jsx(Typography.HvTypography, { component: "span", disabled: checkboxProps == null ? void 0 : checkboxProps.disabled, variant: "body", children: !anySelected ? /* @__PURE__ */ jsxRuntime.jsxs(jsxRuntime.Fragment, { children: [
    /* @__PURE__ */ jsxRuntime.jsx(Typography.HvTypography, { variant: "label", children: selectAllLabel }),
    ` (${numTotal})`
  ] }) : /* @__PURE__ */ jsxRuntime.jsxs(jsxRuntime.Fragment, { children: [
    /* @__PURE__ */ jsxRuntime.jsx(Typography.HvTypography, { variant: "label", children: numSelected }),
    ` ${selectAllConjunctionLabel} ${numTotal}`
  ] }) });
  return /* @__PURE__ */ jsxRuntime.jsxs("div", { id, className: cx(classes.root, {
    [classes.semantic]: isSemantic
  }, isSemantic && css({
    [`& .${BulkActions_styles.staticClasses.selectAll} div`]: {
      color: uikitStyles.theme.bulkActions.semanticColor,
      "&:hover:not(:disabled)": {
        backgroundColor: hexToRgbA.hexToRgbA(baseColor, 0.3)
      },
      "& *": {
        color: uikitStyles.theme.bulkActions.semanticColor,
        backgroundColor: "transparent"
      }
    },
    [`& .${BulkActions_styles.staticClasses.selectAll}:focus-within div`]: {
      backgroundColor: hexToRgbA.hexToRgbA(baseColor, 0.3)
    }
  }), className), ...others, children: [
    /* @__PURE__ */ jsxRuntime.jsxs("div", { className: classes.selectAllContainer, children: [
      /* @__PURE__ */ jsxRuntime.jsx(CheckBox.HvCheckBox, { id: setId.setId(id, "select"), className: classes.selectAll, checked: numSelected > 0, semantic: isSemantic, onChange: onSelectAll, indeterminate: numSelected > 0 && numSelected < numTotal, label: selectAllLabelComponent, ...checkboxProps }),
      showSelectAllPages && anySelected && numSelected < numTotal && /* @__PURE__ */ jsxRuntime.jsxs(jsxRuntime.Fragment, { children: [
        /* @__PURE__ */ jsxRuntime.jsx("div", { className: classes.divider }),
        /* @__PURE__ */ jsxRuntime.jsx(Button.HvButton, { id: setId.setId(id, "pages"), className: classes.selectAllPages, variant: isSemantic ? activeTheme == null ? void 0 : activeTheme.bulkActions.actionButtonVariant : "secondaryGhost", onClick: onSelectAllPages, children: selectAllPagesLabel ?? `Select all ${numTotal} items` })
      ] })
    ] }),
    /* @__PURE__ */ jsxRuntime.jsx(ActionsGeneric.HvActionsGeneric, { id: setId.setId(id, "actions"), classes: {
      root: classes.actions
    }, category: isSemantic ? activeTheme == null ? void 0 : activeTheme.bulkActions.actionButtonVariant : "secondaryGhost", actions, disabled: actionsDisabled ?? numSelected === 0, actionsCallback, maxVisibleActions })
  ] });
};
exports.bulkActionsClasses = BulkActions_styles.staticClasses;
exports.HvBulkActions = HvBulkActions;
//# sourceMappingURL=BulkActions.cjs.map
