"use strict";
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const jsxRuntime = require("@emotion/react/jsx-runtime");
const React = require("react");
const useDefaultProps = require("../../hooks/useDefaultProps.cjs");
const useUniqueId = require("../../hooks/useUniqueId.cjs");
const useControlled = require("../../hooks/useControlled.cjs");
const setId = require("../../utils/setId.cjs");
const Radio_styles = require("./Radio.styles.cjs");
const BaseRadio = require("../BaseRadio/BaseRadio.cjs");
const validationStates = require("../Forms/FormElement/validationStates.cjs");
const FormElement = require("../Forms/FormElement/FormElement.cjs");
const Label = require("../Forms/Label/Label.cjs");
const WarningText = require("../Forms/WarningText/WarningText.cjs");
const HvRadio = (props) => {
  const {
    classes: classesProp,
    className,
    id,
    name,
    value = "on",
    required = false,
    readOnly = false,
    disabled = false,
    label,
    "aria-label": ariaLabel,
    "aria-labelledby": ariaLabelledBy,
    "aria-describedby": ariaDescribedBy,
    labelProps,
    checked,
    defaultChecked = false,
    onChange,
    status = "standBy",
    statusMessage,
    "aria-errormessage": ariaErrorMessage,
    semantic = false,
    inputProps,
    onFocusVisible,
    onBlur,
    ...others
  } = useDefaultProps.useDefaultProps("HvRadio", props);
  const {
    classes,
    cx
  } = Radio_styles.useClasses(classesProp);
  const elementId = useUniqueId.useUniqueId(id, "hvradio");
  const [focusVisible, setFocusVisible] = React.useState(false);
  const onFocusVisibleCallback = React.useCallback((evt) => {
    setFocusVisible(true);
    onFocusVisible == null ? void 0 : onFocusVisible(evt);
  }, [onFocusVisible]);
  const onBlurCallback = React.useCallback((evt) => {
    setFocusVisible(false);
    onBlur == null ? void 0 : onBlur(evt);
  }, [onBlur]);
  const [isChecked, setIsChecked] = useControlled.useControlled(checked, Boolean(defaultChecked));
  const onLocalChange = React.useCallback((evt, newChecked) => {
    setIsChecked(newChecked);
    onChange == null ? void 0 : onChange(evt, newChecked, value);
  }, [onChange, setIsChecked, value]);
  const canShowError = ariaErrorMessage == null && status !== void 0 && statusMessage !== void 0;
  const hasLabel = label != null;
  const isStateInvalid = validationStates.isInvalid(status);
  let errorMessageId;
  if (isStateInvalid) {
    errorMessageId = canShowError ? setId.setId(elementId, "error") : ariaErrorMessage;
  }
  const radio = /* @__PURE__ */ jsxRuntime.jsx(BaseRadio.HvBaseRadio, { id: label ? setId.setId(elementId, "input") : setId.setId(id, "input"), name, className: cx(classes.radio, {
    [classes.invalidRadio]: isStateInvalid
  }), disabled, readOnly, onChange: onLocalChange, value, checked: isChecked, semantic, inputProps: {
    "aria-invalid": isStateInvalid ? true : void 0,
    "aria-errormessage": errorMessageId,
    "aria-label": ariaLabel,
    "aria-labelledby": ariaLabelledBy,
    "aria-describedby": ariaDescribedBy,
    ...inputProps
  }, onFocusVisible: onFocusVisibleCallback, onBlur: onBlurCallback, ...others });
  return /* @__PURE__ */ jsxRuntime.jsxs(FormElement.HvFormElement, { id, name, status: status || "standBy", disabled, required, readOnly, className: cx(classes.root, className), children: [
    hasLabel ? /* @__PURE__ */ jsxRuntime.jsxs("div", { className: cx(classes.container, {
      [classes.disabled]: disabled,
      [classes.focusVisible]: !!(focusVisible && label),
      [classes.invalidContainer]: isStateInvalid
    }), children: [
      radio,
      /* @__PURE__ */ jsxRuntime.jsx(Label.HvLabel, { id: setId.setId(elementId, "label"), htmlFor: setId.setId(elementId, "input"), label, className: classes.label, ...labelProps })
    ] }) : radio,
    canShowError && /* @__PURE__ */ jsxRuntime.jsx(WarningText.HvWarningText, { id: setId.setId(elementId, "error"), disableBorder: true, children: statusMessage })
  ] });
};
exports.radioClasses = Radio_styles.staticClasses;
exports.HvRadio = HvRadio;
//# sourceMappingURL=Radio.cjs.map
