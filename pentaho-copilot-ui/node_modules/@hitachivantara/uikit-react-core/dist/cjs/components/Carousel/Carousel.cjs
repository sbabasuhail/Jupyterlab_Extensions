"use strict";
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const jsxRuntime = require("@emotion/react/jsx-runtime");
const React = require("react");
const useDefaultProps = require("../../hooks/useDefaultProps.cjs");
const useCarousel = require("embla-carousel-react");
const uikitReactIcons = require("@hitachivantara/uikit-react-icons");
const useTheme = require("../../hooks/useTheme.cjs");
const CarouselControls = require("./CarouselControls.cjs");
const CarouselThumbnails = require("./CarouselThumbnails.cjs");
const Carousel_styles = require("./Carousel.styles.cjs");
const Button = require("../Button/Button.cjs");
const Container = require("../Container/Container.cjs");
const Tooltip = require("../Tooltip/Tooltip.cjs");
const Typography = require("../Typography/Typography.cjs");
const _interopDefault = (e) => e && e.__esModule ? e : { default: e };
const useCarousel__default = /* @__PURE__ */ _interopDefault(useCarousel);
const clamp = (num, max, min = 0) => Math.min(Math.max(num, min), max);
const HvCarousel = (props) => {
  const {
    className,
    classes: classesProp,
    height: heightProp = "auto",
    thumbnailWidth = 90,
    title,
    children,
    actions: actionsProp,
    xs,
    showDots: showDotsProp,
    showCounter: showCounterProp,
    showSlideControls,
    showFullscreen: showFullscreenProp,
    hideThumbnails: hideThumbnailsProp,
    controlsPosition: controlsPositionProp,
    thumbnailsPosition: thumbnailsPositionProp,
    carouselOptions,
    renderThumbnail,
    onChange,
    ...others
  } = useDefaultProps.useDefaultProps("HvCarousel", props);
  const {
    activeTheme
  } = useTheme.useTheme();
  const {
    classes,
    css,
    cx
  } = Carousel_styles.useClasses(classesProp);
  const thumbnailsRef = React.useRef(null);
  const [isFullscreen, setIsFullscreen] = React.useState(false);
  const isDs3 = (activeTheme == null ? void 0 : activeTheme.name) === "ds3";
  const actionsPosition = isDs3 ? "header" : "controls";
  const controlsPosition = controlsPositionProp ?? (isDs3 ? "bottom" : "top");
  const thumbnailsPosition = thumbnailsPositionProp ?? "bottom";
  const [containerRef, controller] = useCarousel__default.default({
    align: "start",
    loop: true,
    ...carouselOptions
  });
  const [selectedIndex, setSelectedIndex] = React.useState((carouselOptions == null ? void 0 : carouselOptions.startIndex) ?? 0);
  const numSlides = React.Children.count(children);
  const handlePrevious = React.useCallback(() => {
    controller == null ? void 0 : controller.scrollPrev();
  }, [controller]);
  const handleNext = React.useCallback(() => {
    controller == null ? void 0 : controller.scrollNext();
  }, [controller]);
  const handleScroll = (index) => {
    controller == null ? void 0 : controller.scrollTo(index);
  };
  const handleSelect = React.useCallback(() => {
    var _a, _b, _c;
    if (!controller)
      return;
    const slideIndex = controller.selectedScrollSnap();
    setSelectedIndex(slideIndex);
    (_c = (_b = (_a = thumbnailsRef.current) == null ? void 0 : _a.querySelectorAll("button")) == null ? void 0 : _b[slideIndex]) == null ? void 0 : _c.scrollIntoView({
      behavior: "smooth",
      block: "nearest"
    });
    onChange == null ? void 0 : onChange(slideIndex);
  }, [controller, onChange]);
  React.useEffect(() => {
    if (!controller)
      return;
    controller.on("select", handleSelect);
    return () => {
      controller.off("select", handleSelect);
    };
  }, [controller, handleSelect]);
  React.useEffect(() => {
    if (!controller)
      return;
    controller.reInit();
    setSelectedIndex((currentIndex) => clamp(currentIndex, numSlides, 0));
  }, [numSlides, controller]);
  const canPrev = (controller == null ? void 0 : controller.canScrollPrev()) ?? false;
  const canNext = (controller == null ? void 0 : controller.canScrollNext()) ?? false;
  const showTitle = !!title && (!xs || isFullscreen);
  const showFullscreen = showFullscreenProp ?? xs;
  const height = isFullscreen ? "100%" : heightProp ?? "auto";
  const showCounter = xs;
  const hideThumbnails = hideThumbnailsProp ?? (xs && !isFullscreen);
  const showThumbnails = !hideThumbnails && !!renderThumbnail;
  const showDots = showDotsProp ?? numSlides <= 5;
  const actions = /* @__PURE__ */ jsxRuntime.jsxs("div", { className: cx(classes.actions, actionsPosition === "header" ? css({
    position: "relative",
    top: -40,
    height: 0
  }) : css({
    position: "absolute"
  })), children: [
    actionsProp,
    showFullscreen && /* @__PURE__ */ jsxRuntime.jsx(Tooltip.HvTooltip, { title: isFullscreen ? "Close" : "Fullscreen", children: /* @__PURE__ */ jsxRuntime.jsx(Button.HvButton, { icon: true, onClick: () => setIsFullscreen((curr) => !curr), className: classes.closeButton, children: isFullscreen ? /* @__PURE__ */ jsxRuntime.jsx(uikitReactIcons.Close, {}) : /* @__PURE__ */ jsxRuntime.jsx(uikitReactIcons.Fullscreen, {}) }) })
  ] });
  const controls = /* @__PURE__ */ jsxRuntime.jsx(CarouselControls.HvCarouselControls, { classes, showDots, page: selectedIndex, pages: numSlides, canPrevious: canPrev, canNext, onPreviousClick: handlePrevious, onNextClick: handleNext, actions: actionsPosition === "controls" && actions });
  const thumbnails = showThumbnails && /* @__PURE__ */ jsxRuntime.jsx(CarouselThumbnails.HvCarouselThumbnails, { classes, ref: thumbnailsRef, page: selectedIndex, pages: numSlides, width: thumbnailWidth, onThumbnailClick: (evt, i) => handleScroll(i), renderThumbnail });
  return /* @__PURE__ */ jsxRuntime.jsxs(Container.HvContainer, { className: cx(classes.root, className, {
    [classes.xs]: xs,
    [classes.fullscreen]: isFullscreen
  }), ...others, children: [
    showTitle && /* @__PURE__ */ jsxRuntime.jsx(Typography.HvTypography, { variant: "title2", className: classes.title, children: title }),
    actionsPosition === "header" && actions,
    thumbnailsPosition === "top" && thumbnails,
    controlsPosition === "top" && controls,
    /* @__PURE__ */ jsxRuntime.jsxs("div", { className: cx(classes.main, {
      [classes.mainXs]: xs,
      [classes.mainFullscreen]: isFullscreen
    }), children: [
      showCounter && /* @__PURE__ */ jsxRuntime.jsx("div", { className: classes.counterContainer, children: /* @__PURE__ */ jsxRuntime.jsx("span", { className: classes.counter, children: `${selectedIndex + 1}/${numSlides}` }) }),
      showSlideControls && /* @__PURE__ */ jsxRuntime.jsxs("div", { className: classes.slideControls, children: [
        /* @__PURE__ */ jsxRuntime.jsx(Button.HvButton, { icon: true, disabled: !canPrev, variant: "secondarySubtle", "aria-label": "Backwards", onClick: handlePrevious, children: /* @__PURE__ */ jsxRuntime.jsx(uikitReactIcons.Backwards, { iconSize: "XS" }) }),
        /* @__PURE__ */ jsxRuntime.jsx(Button.HvButton, { icon: true, disabled: !canNext, variant: "secondarySubtle", "aria-label": "Forwards", onClick: handleNext, children: /* @__PURE__ */ jsxRuntime.jsx(uikitReactIcons.Forwards, { iconSize: "XS" }) })
      ] }),
      /* @__PURE__ */ jsxRuntime.jsx("div", { ref: containerRef, style: {
        height
      }, className: classes.slidesViewport, children: /* @__PURE__ */ jsxRuntime.jsx("div", { className: classes.slidesContainer, children }) })
    ] }),
    controlsPosition === "bottom" && controls,
    thumbnailsPosition === "bottom" && thumbnails
  ] });
};
exports.carouselClasses = Carousel_styles.staticClasses;
exports.HvCarousel = HvCarousel;
//# sourceMappingURL=Carousel.cjs.map
