{"version":3,"file":"useRowExpand.cjs","sources":["../../../../../src/components/Table/hooks/useRowExpand.tsx"],"sourcesContent":["import { MouseEventHandler } from \"react\";\nimport {\n  Hooks,\n  TableExpandedToggleProps,\n  UseExpandedRowProps,\n} from \"react-table\";\n\nimport { DropDownXS, DropUpXS } from \"@hitachivantara/uikit-react-icons\";\n\nimport { HvTypography } from \"@core/components/Typography\";\nimport { HvButton } from \"@core/components/Button\";\n\nimport { useLabels } from \"@core/hooks/useLabels\";\n\n// #region ##### TYPES #####\n\nexport interface UseHvRowExpandTableRowProps {\n  expanded?: boolean;\n}\n\nexport type UseHvRowExpandTableOptions = {\n  disableCreateExpandButton?: boolean;\n};\n\nexport interface UseHvRowExpandRowToggleProps extends TableExpandedToggleProps {\n  onClick?: MouseEventHandler<unknown>;\n}\n\nexport interface UseHvRowExpandRowInstance<\n  D extends object = Record<string, unknown>\n> extends UseExpandedRowProps<D> {\n  getToggleRowExpandedProps: (\n    props?: Partial<TableExpandedToggleProps>\n  ) => UseHvRowExpandRowToggleProps;\n}\n\nexport type UseRowExpandProps = (<D extends object = Record<string, unknown>>(\n  hooks: Hooks<D>\n) => void) & { pluginName: string };\n\n// #endregion ##### TYPES #####\n\nconst DEFAULT_LABELS = {\n  expandRowButtonAriaLabel: \"Expand this row\",\n  collapseRowButtonAriaLabel: \"Collapse this row\",\n};\n\nexport const CellWithExpandButton = ({ row, cell, labels: labelsProp }) => {\n  const labels = useLabels(DEFAULT_LABELS, labelsProp);\n\n  const { onClick } = row.getToggleRowExpandedProps();\n\n  return (\n    <>\n      <HvButton\n        icon\n        aria-label={\n          row.isExpanded\n            ? labels.collapseRowButtonAriaLabel\n            : labels.expandRowButtonAriaLabel\n        }\n        aria-expanded={row.isExpanded}\n        onClick={onClick}\n      >\n        {row.isExpanded ? <DropDownXS /> : <DropUpXS />}\n      </HvButton>\n      {cell?.value && (\n        <HvTypography variant=\"label\" component=\"span\">\n          {cell.value}\n        </HvTypography>\n      )}\n    </>\n  );\n};\n\nconst visibleColumnsHook = (columns, { instance }) => {\n  if (instance.disableCreateExpandButton) {\n    return columns;\n  }\n\n  // add a button to first data column, unless it has a custom renderer\n  // if so, add an extra column instead\n  const firstDataColumnIndex = columns.findIndex(\n    (c) => c.id?.indexOf(\"_hv_\") !== 0\n  );\n\n  if (firstDataColumnIndex !== -1) {\n    const firstDataColumn = columns[firstDataColumnIndex];\n\n    if (firstDataColumn.Cell == null) {\n      firstDataColumn.Cell = CellWithExpandButton;\n      firstDataColumn.variant = \"expand\";\n\n      return columns;\n    }\n  }\n\n  const expandColumn = {\n    id: \"_hv_expand\",\n    variant: \"none\",\n\n    width: 32,\n\n    // this will only work when using useHvTableSticky\n    // but ensures it stays left of any sticky column\n    sticky: \"left\",\n\n    Cell: CellWithExpandButton,\n  };\n\n  const columnsCopy = [...columns];\n  columnsCopy.splice(\n    firstDataColumnIndex !== -1 ? firstDataColumnIndex : 0,\n    0,\n    expandColumn\n  );\n\n  return columnsCopy;\n};\n\nconst getRowPropsHook = (props, { row }) => {\n  const nextProps: UseHvRowExpandTableRowProps = {\n    expanded: row.isExpanded,\n  };\n\n  return [props, nextProps];\n};\n\nconst useRowExpand: UseRowExpandProps = (hooks) => {\n  hooks.visibleColumns.push(visibleColumnsHook);\n  hooks.getRowProps.push(getRowPropsHook);\n};\nuseRowExpand.pluginName = \"useHvRowExpand\";\n\nexport default useRowExpand;\n"],"names":["DEFAULT_LABELS","expandRowButtonAriaLabel","collapseRowButtonAriaLabel","CellWithExpandButton","row","cell","labels","labelsProp","useLabels","onClick","getToggleRowExpandedProps","jsxs","Fragment","jsx","HvButton","isExpanded","DropDownXS","DropUpXS","value","HvTypography","visibleColumnsHook","columns","instance","disableCreateExpandButton","firstDataColumnIndex","findIndex","c","id","indexOf","firstDataColumn","Cell","variant","expandColumn","width","sticky","columnsCopy","splice","getRowPropsHook","props","nextProps","expanded","useRowExpand","hooks","visibleColumns","push","getRowProps","pluginName"],"mappings":";;;;;;;AA0CA,MAAMA,iBAAiB;AAAA,EACrBC,0BAA0B;AAAA,EAC1BC,4BAA4B;AAC9B;AAEO,MAAMC,uBAAuBA,CAAC;AAAA,EAAEC;AAAAA,EAAKC;AAAAA,EAAMC,QAAQC;AAAW,MAAM;AACnED,QAAAA,SAASE,UAAAA,UAAUR,gBAAgBO,UAAU;AAE7C,QAAA;AAAA,IAAEE;AAAAA,EAAAA,IAAYL,IAAIM;AAExB,SAEIC,2BAAA,KAAAC,qBAAA,EAAA,UAAA;AAAA,IAACC,2BAAAA,IAAAC,OAAA,UAAA,EACC,MAAI,MACJ,cACEV,IAAIW,aACAT,OAAOJ,6BACPI,OAAOL,0BAEb,iBAAeG,IAAIW,YACnB,SAECX,UAAIW,IAAAA,4CAAcC,4BAAa,CAAA,CAAA,IAAIH,2BAAA,IAAAI,0BAAA,CAAA,CAAW,EACjD,CAAA;AAAA,KACCZ,6BAAMa,UACJL,+BAAAM,WAAAA,cAAA,EAAa,SAAQ,SAAQ,WAAU,QACrCd,UAAAA,KAAKa,MACR,CAAA;AAAA,EAEJ,EAAA,CAAA;AAEJ;AAEA,MAAME,qBAAqBA,CAACC,SAAS;AAAA,EAAEC;AAAS,MAAM;AACpD,MAAIA,SAASC,2BAA2B;AAC/BF,WAAAA;AAAAA,EACT;AAIMG,QAAAA,uBAAuBH,QAAQI,UAClCC,CAAAA,MAAAA;;AAAMA,oBAAEC,OAAFD,mBAAME,QAAQ,aAAY;AAAA,GACnC;AAEA,MAAIJ,yBAAyB,IAAI;AACzBK,UAAAA,kBAAkBR,QAAQG,oBAAoB;AAEhDK,QAAAA,gBAAgBC,QAAQ,MAAM;AAChCD,sBAAgBC,OAAO3B;AACvB0B,sBAAgBE,UAAU;AAEnBV,aAAAA;AAAAA,IACT;AAAA,EACF;AAEA,QAAMW,eAAe;AAAA,IACnBL,IAAI;AAAA,IACJI,SAAS;AAAA,IAETE,OAAO;AAAA;AAAA;AAAA,IAIPC,QAAQ;AAAA,IAERJ,MAAM3B;AAAAA,EAAAA;AAGFgC,QAAAA,cAAc,CAAC,GAAGd,OAAO;AAC/Bc,cAAYC,OACVZ,yBAAyB,KAAKA,uBAAuB,GACrD,GACAQ,YACF;AAEOG,SAAAA;AACT;AAEA,MAAME,kBAAkBA,CAACC,OAAO;AAAA,EAAElC;AAAI,MAAM;AAC1C,QAAMmC,YAAyC;AAAA,IAC7CC,UAAUpC,IAAIW;AAAAA,EAAAA;AAGT,SAAA,CAACuB,OAAOC,SAAS;AAC1B;AAEA,MAAME,eAAmCC,CAAU,UAAA;AAC3CC,QAAAA,eAAeC,KAAKxB,kBAAkB;AACtCyB,QAAAA,YAAYD,KAAKP,eAAe;AACxC;AACAI,aAAaK,aAAa;AAE1B,MAAA,iBAAeL;;;"}