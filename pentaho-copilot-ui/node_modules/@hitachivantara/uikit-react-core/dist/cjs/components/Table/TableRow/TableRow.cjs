"use strict";
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const jsxRuntime = require("@emotion/react/jsx-runtime");
const React = require("react");
const uikitStyles = require("@hitachivantara/uikit-styles");
const checkValidHexColorValue = require("../../../utils/checkValidHexColorValue.cjs");
const hexToRgbA = require("../../../utils/hexToRgbA.cjs");
const theme = require("../../../utils/theme.cjs");
const useTheme = require("../../../hooks/useTheme.cjs");
const TableContext = require("../TableContext.cjs");
const TableSectionContext = require("../TableSectionContext.cjs");
const TableRow_styles = require("./TableRow.styles.cjs");
const defaultComponent = "tr";
const getStripedColor = (color, opacity = 0.6) => {
  return checkValidHexColorValue.checkValidHexColorValue(color) ? hexToRgbA.hexToRgbA(color, opacity) : color;
};
const HvTableRow = React.forwardRef((props, externalRef) => {
  var _a;
  const {
    classes: classesProp,
    className,
    component,
    hover = false,
    selected = false,
    expanded = false,
    striped = false,
    ...others
  } = props;
  const {
    classes,
    cx,
    css
  } = TableRow_styles.useClasses(classesProp);
  const {
    colors,
    rootId
  } = useTheme.useTheme();
  const tableContext = React.useContext(TableContext.default);
  const tableSectionContext = React.useContext(TableSectionContext.default);
  const [even, setEven] = React.useState();
  const [odd, setOdd] = React.useState();
  const type = (tableSectionContext == null ? void 0 : tableSectionContext.type) || "body";
  const isList = tableContext.variant === "listrow";
  const Component = component || ((_a = tableContext == null ? void 0 : tableContext.components) == null ? void 0 : _a.Tr) || defaultComponent;
  const [stripedColorEven, setStripedColorEven] = React.useState(getStripedColor(even));
  const [stripedColorOdd, setStripedColorOdd] = React.useState(getStripedColor(odd));
  React.useEffect(() => {
    setEven(theme.getVarValue(uikitStyles.theme.table.rowStripedBackgroundColorEven, rootId));
    setOdd(theme.getVarValue(uikitStyles.theme.table.rowStripedBackgroundColorOdd, rootId));
    setStripedColorEven(getStripedColor(even));
    setStripedColorOdd(getStripedColor(odd));
  }, [colors, even, odd, rootId]);
  return /* @__PURE__ */ jsxRuntime.jsx(Component, { ref: externalRef, className: cx(tableSectionContext.filterClassName, classes.root, classes[type], striped && css({
    "&:nth-of-type(even)": {
      backgroundColor: stripedColorEven,
      "&:hover": {
        backgroundColor: uikitStyles.theme.table.rowHoverColor
      }
    },
    "&:nth-of-type(odd)": {
      backgroundColor: stripedColorOdd,
      "&:hover": {
        backgroundColor: uikitStyles.theme.table.rowHoverColor
      }
    }
  }), {
    [classes.hover]: hover,
    [classes.selected]: selected,
    [classes.expanded]: expanded,
    [classes.striped]: striped,
    [classes.variantList]: isList && type === "body",
    [classes.variantListHead]: isList && type === "head"
  }, className), role: Component === defaultComponent ? null : "row", ...others });
});
exports.tableRowClasses = TableRow_styles.staticClasses;
exports.HvTableRow = HvTableRow;
//# sourceMappingURL=TableRow.cjs.map
