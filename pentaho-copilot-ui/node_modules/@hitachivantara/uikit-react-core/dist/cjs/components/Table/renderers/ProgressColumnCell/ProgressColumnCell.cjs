"use strict";
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const jsxRuntime = require("@emotion/react/jsx-runtime");
const MuiLinearProgress = require("@mui/material/LinearProgress");
const ProgressColumnCell_styles = require("./ProgressColumnCell.styles.cjs");
const _interopDefault = (e) => e && e.__esModule ? e : { default: e };
const MuiLinearProgress__default = /* @__PURE__ */ _interopDefault(MuiLinearProgress);
const normalizeProgressBar = (value, max) => {
  return max > 0 ? Math.floor(value * 100 / max) : 0;
};
const HvProgressColumnCell = ({
  partial,
  total,
  color = "primary",
  "aria-labelledby": ariaLabelledBy
}) => {
  const {
    classes
  } = ProgressColumnCell_styles.useClasses();
  const percentage = normalizeProgressBar(partial, total);
  return /* @__PURE__ */ jsxRuntime.jsx("div", { className: classes.root, children: /* @__PURE__ */ jsxRuntime.jsx("div", { className: classes.linearProgressContainer, children: /* @__PURE__ */ jsxRuntime.jsx(MuiLinearProgress__default.default, { className: classes.linearProgress, classes: {
    root: classes.linearProgressRoot,
    colorPrimary: classes.linearProgressColorPrimary,
    barColorPrimary: classes.linearProgressBarColorPrimary,
    barColorSecondary: classes.linearProgressBarColorSecondary
  }, color, variant: "determinate", value: percentage, "aria-labelledby": ariaLabelledBy }) }) });
};
exports.HvProgressColumnCell = HvProgressColumnCell;
exports.normalizeProgressBar = normalizeProgressBar;
//# sourceMappingURL=ProgressColumnCell.cjs.map
