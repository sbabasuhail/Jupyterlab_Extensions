{"version":3,"file":"renderers.cjs","sources":["../../../../../src/components/Table/renderers/renderers.tsx"],"sourcesContent":["import { ClassNames } from \"@emotion/react\";\n\nimport { DropDownXS, DropUpXS } from \"@hitachivantara/uikit-react-icons\";\n\nimport { setId } from \"@core/utils/setId\";\nimport { HvTag, HvTagProps } from \"@core/components/Tag\";\nimport { HvButton } from \"@core/components/Button\";\nimport { HvTypography } from \"@core/components/Typography\";\nimport {\n  HvOverflowTooltip,\n  HvOverflowTooltipProps,\n} from \"@core/components/OverflowTooltip\";\nimport { HvBaseSwitchProps } from \"@core/components/BaseSwitch\";\nimport { HvListValue } from \"@core/components/List\";\n\nimport {\n  HvTableHeaderRenderer,\n  HvCellProps,\n  HvTableColumnConfig,\n  HvRowInstance,\n} from \"../hooks/useTable\";\nimport { HvDateColumnCell } from \"./DateColumnCell\";\nimport { HvSwitchColumnCell } from \"./SwitchColumnCell\";\nimport { HvProgressColumnCell } from \"./ProgressColumnCell\";\nimport { HvDropdownColumnCell } from \"./DropdownColumnCell\";\nimport { hvStringFallback, hvNumberFallback } from \"../utils\";\n\nexport function hvTextColumn<\n  D extends object = Record<string, unknown>,\n  H extends HvTableHeaderRenderer | undefined = HvTableHeaderRenderer\n>(\n  col: HvTableColumnConfig<D, H>,\n  overflowTooltipProps: Omit<HvOverflowTooltipProps, \"data\"> = {}\n): HvTableColumnConfig<D, H> {\n  return {\n    Cell: ({ value }: HvCellProps<D, H>) => (\n      <HvOverflowTooltip\n        data={hvStringFallback(value)}\n        {...overflowTooltipProps}\n      />\n    ),\n    sortType: \"alphanumeric\",\n    ...col,\n  };\n}\n\nexport function hvNumberColumn<\n  D extends object = Record<string, unknown>,\n  H extends HvTableHeaderRenderer | undefined = HvTableHeaderRenderer\n>(col: HvTableColumnConfig<D, H>): HvTableColumnConfig<D, H> {\n  return {\n    Cell: ({ value }: HvCellProps<D, H>) => <>{hvNumberFallback(value)}</>,\n    align: \"right\",\n    sortType: \"number\",\n    ...col,\n  };\n}\n\nexport function hvDateColumn<\n  D extends object = Record<string, unknown>,\n  H extends HvTableHeaderRenderer | undefined = HvTableHeaderRenderer\n>(\n  col: HvTableColumnConfig<D, H>,\n  dateFormat?: string\n): HvTableColumnConfig<D, H> {\n  return {\n    Cell: ({ value }: HvCellProps<D, H>) => (\n      <HvDateColumnCell date={value} dateFormat={dateFormat} />\n    ),\n    sortType: \"alphanumeric\",\n    sortDescFirst: true,\n    ...col,\n  };\n}\n\nexport function hvExpandColumn<\n  D extends object = Record<string, unknown>,\n  H extends HvTableHeaderRenderer | undefined = HvTableHeaderRenderer\n>(\n  col: HvTableColumnConfig<D, H>,\n  expandRowButtonAriaLabel: string,\n  collapseRowButtonAriaLabel: string,\n  getCanRowExpand?: (row: HvRowInstance<D, H>) => boolean,\n  ExpandedIcon: React.ReactNode = <DropUpXS />,\n  CollapsedIcon: React.ReactNode = <DropDownXS />\n): HvTableColumnConfig<D, H> {\n  return {\n    Cell: (cellProps: HvCellProps<D, H>) => {\n      const { value, row } = cellProps;\n      const expandedProps = row.getToggleRowExpandedProps?.();\n\n      const hasContent = getCanRowExpand?.(row) ?? true;\n\n      return (\n        <ClassNames>\n          {({ css }) => (\n            <>\n              {hasContent && (\n                <HvButton\n                  icon\n                  aria-label={\n                    row.isExpanded\n                      ? collapseRowButtonAriaLabel\n                      : expandRowButtonAriaLabel\n                  }\n                  aria-expanded={row.isExpanded}\n                  onClick={expandedProps?.onClick}\n                  classes={{\n                    root: css({\n                      position: \"absolute\",\n                      left: 0,\n                      top: \"50%\",\n                      transform: \"translateY(-50%)\",\n                    }),\n                  }}\n                >\n                  {row.isExpanded ? ExpandedIcon : CollapsedIcon}\n                </HvButton>\n              )}\n\n              <HvOverflowTooltip data={hvStringFallback(value)} />\n            </>\n          )}\n        </ClassNames>\n      );\n    },\n    sortType: \"alphanumeric\",\n    cellStyle: {\n      position: \"relative\",\n    },\n    ...col,\n  };\n}\n\nexport function hvTagColumn<\n  D extends object = Record<string, unknown>,\n  H extends HvTableHeaderRenderer | undefined = HvTableHeaderRenderer,\n  A extends object = Record<string, unknown>\n>(\n  col: HvTableColumnConfig<D, H>,\n  valueDataKey: keyof A,\n  colorDataKey: keyof A,\n  textColorDataKey: keyof A,\n  fromRowData: boolean = false,\n  tagProps?: HvTagProps\n): HvTableColumnConfig<D, H> {\n  return {\n    Cell: (cellProps: HvCellProps<D, H>) => {\n      const { value, row } = cellProps;\n      if (!value) {\n        return <>—</>;\n      }\n\n      const {\n        [valueDataKey]: name,\n        [colorDataKey]: color,\n        [textColorDataKey]: textColor,\n      } = fromRowData ? row.original : value;\n\n      return (\n        <HvTag\n          label={<HvTypography variant=\"body\">{name}</HvTypography>}\n          type=\"semantic\"\n          color={color}\n          style={textColor != null ? { color: textColor } : {}}\n          tabIndex={-1}\n          {...tagProps}\n        />\n      );\n    },\n    cellStyle: {\n      paddingTop: 0,\n      paddingBottom: 0,\n    },\n    ...col,\n  };\n}\n\n// TODO - Review accessibility on the next renderers because they all differ\n\nexport function hvSwitchColumn<\n  D extends object = Record<string, unknown>,\n  H extends HvTableHeaderRenderer | undefined = HvTableHeaderRenderer\n>(\n  col: HvTableColumnConfig<D, H>,\n  switchLabel: string,\n  falseLabel?: string,\n  trueLabel?: string,\n  switchProps?: HvBaseSwitchProps\n): HvTableColumnConfig<D, H> {\n  return {\n    Cell: (cellProps: HvCellProps<D, H>) => {\n      const { value, row } = cellProps;\n      return (\n        <HvSwitchColumnCell\n          checked={value}\n          value={row.id}\n          switchLabel={switchLabel}\n          falseLabel={falseLabel}\n          trueLabel={trueLabel}\n          switchProps={switchProps}\n        />\n      );\n    },\n    cellStyle: {\n      paddingTop: 0,\n      paddingBottom: 0,\n    },\n    ...col,\n  };\n}\n\nexport function hvDropdownColumn<\n  D extends object = Record<string, unknown>,\n  H extends HvTableHeaderRenderer | undefined = HvTableHeaderRenderer\n>(\n  col: HvTableColumnConfig<D, H>,\n  id: string | undefined,\n  placeholder: string,\n  disabledPlaceholder: string,\n  onChange?: (identifier: string, value: HvListValue) => void\n): HvTableColumnConfig<D, H> {\n  return {\n    Cell: (cellProps: HvCellProps<D, H>) => {\n      const { value, row, column } = cellProps;\n      const dsbld = value.length < 1;\n      return (\n        <HvDropdownColumnCell\n          values={value}\n          placeholder={dsbld ? disabledPlaceholder : placeholder}\n          onChange={(val) => onChange?.(row.id, val)}\n          disabled={dsbld}\n          dropdownProps={{\n            \"aria-labelledby\": setId(id, column.id) || column.id || id, // TODO - to be reviewed because it doesn't make much sense\n          }}\n        />\n      );\n    },\n    cellStyle: {\n      paddingTop: 0,\n      paddingBottom: 0,\n    },\n    ...col,\n  };\n}\n\nexport function hvProgressColumn<\n  D extends object = Record<string, unknown>,\n  H extends HvTableHeaderRenderer | undefined = HvTableHeaderRenderer\n>(\n  col: HvTableColumnConfig<D, H>,\n  getPartial?: (row: HvRowInstance<D, H>) => number,\n  getTotal?: (row: HvRowInstance<D, H>) => number,\n  color?: \"primary\" | \"secondary\"\n): HvTableColumnConfig<D, H> {\n  return {\n    Cell: (cellProps: HvCellProps<D, H>) => {\n      const { row, column } = cellProps;\n      const partial = getPartial?.(row) || 0;\n      const total = getTotal?.(row);\n\n      if (total) {\n        return (\n          <HvProgressColumnCell\n            partial={partial}\n            total={total}\n            color={color}\n            aria-labelledby={column.id}\n          />\n        );\n      }\n\n      return <>—</>;\n    },\n\n    cellStyle: {\n      paddingTop: 0,\n      paddingBottom: 0,\n    },\n    ...col,\n  };\n}\n"],"names":["hvTextColumn","col","overflowTooltipProps","Cell","value","HvOverflowTooltip","hvStringFallback","sortType","hvNumberColumn","jsx","Fragment","hvNumberFallback","align","hvDateColumn","dateFormat","HvDateColumnCell","sortDescFirst","hvExpandColumn","expandRowButtonAriaLabel","collapseRowButtonAriaLabel","getCanRowExpand","ExpandedIcon","DropUpXS","CollapsedIcon","DropDownXS","cellProps","row","expandedProps","getToggleRowExpandedProps","hasContent","ClassNames","css","HvButton","isExpanded","onClick","root","position","left","top","transform","cellStyle","hvTagColumn","valueDataKey","colorDataKey","textColorDataKey","fromRowData","tagProps","name","color","textColor","original","HvTag","HvTypography","paddingTop","paddingBottom","hvSwitchColumn","switchLabel","falseLabel","trueLabel","switchProps","HvSwitchColumnCell","id","hvDropdownColumn","placeholder","disabledPlaceholder","onChange","column","dsbld","length","HvDropdownColumnCell","val","setId","hvProgressColumn","getPartial","getTotal","partial","total","HvProgressColumnCell"],"mappings":"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"}