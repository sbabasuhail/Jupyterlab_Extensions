"use strict";
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const jsxRuntime = require("@emotion/react/jsx-runtime");
const React = require("react");
const capitalize = require("lodash/capitalize");
const material = require("@mui/material");
const uikitStyles = require("@hitachivantara/uikit-styles");
const useTheme = require("../../../hooks/useTheme.cjs");
const TableContext = require("../TableContext.cjs");
const TableSectionContext = require("../TableSectionContext.cjs");
const utils = require("./utils.cjs");
const TableHeader_styles = require("./TableHeader.styles.cjs");
const Button = require("../../Button/Button.cjs");
const Typography = require("../../Typography/Typography.cjs");
const _interopDefault = (e) => e && e.__esModule ? e : { default: e };
const capitalize__default = /* @__PURE__ */ _interopDefault(capitalize);
const defaultComponent = "th";
const HvTableHeader = React.forwardRef(({
  children,
  component,
  className,
  style,
  classes: classesProp,
  scope: scopeProp,
  align = "inherit",
  variant = "default",
  type: typeProp,
  stickyColumn = false,
  stickyColumnMostLeft = false,
  stickyColumnLeastRight = false,
  groupColumnMostLeft = false,
  groupColumnMostRight = false,
  sortDirection = "none",
  sorted,
  sortable,
  headerTextProps,
  resizerProps = {},
  resizable = false,
  resizing = false,
  sortButtonProps,
  ...others
}, externalRef) => {
  var _a;
  const {
    classes,
    cx,
    css
  } = TableHeader_styles.useClasses(classesProp);
  const {
    colors
  } = useTheme.useTheme();
  const tableContext = React.useContext(TableContext.default);
  const tableSectionContext = React.useContext(TableSectionContext.default);
  const type = typeProp || (tableSectionContext == null ? void 0 : tableSectionContext.type) || "body";
  const isHeadCell = type === "head";
  const scope = scopeProp ?? (isHeadCell ? "col" : "row");
  const Sort = React.useMemo(() => utils.getSortIcon(sorted && sortDirection), [sorted, sortDirection]);
  const Component = component || ((_a = tableContext == null ? void 0 : tableContext.components) == null ? void 0 : _a.Th) || defaultComponent;
  const role = Component === defaultComponent ? null : isHeadCell ? "columnheader" : "rowheader";
  const paragraph = utils.isParagraph(children);
  return /* @__PURE__ */ jsxRuntime.jsx(Component, { ref: externalRef, role, scope, style, className: cx(classes.root, classes[type], type === "body" && css({
    [`&.${TableHeader_styles.staticClasses.sorted}`]: {
      backgroundColor: material.alpha(material.hexToRgb((colors == null ? void 0 : colors.atmo1) || uikitStyles.theme.colors.atmo1), 0.4)
    }
  }), {
    [classes.groupColumnMostLeft]: groupColumnMostLeft,
    [classes.groupColumnMostRight]: groupColumnMostRight,
    [classes.sortable]: sortable,
    [classes.sorted]: sorted,
    [classes.resizable]: resizable,
    [classes.resizing]: resizing,
    [classes.stickyColumn]: stickyColumn,
    [classes.stickyColumnMostLeft]: stickyColumnMostLeft,
    [classes.stickyColumnLeastRight]: stickyColumnLeastRight,
    [classes.variantList]: tableContext.variant === "listrow",
    [classes[`align${capitalize__default.default(align)}`]]: align !== "inherit",
    [classes[`variant${capitalize__default.default(variant)}`]]: variant !== "default"
  }, className), "aria-sort": sortable ? sortDirection : void 0, ...others, children: /* @__PURE__ */ jsxRuntime.jsxs("div", { className: cx(classes.headerContent, {
    [classes[`alignFlex${capitalize__default.default(align)}`]]: align !== "inherit"
  }), children: [
    isHeadCell && sortable && /* @__PURE__ */ jsxRuntime.jsx(Button.HvButton, { className: classes.sortButton, icon: true, overrideIconColors: false, "aria-label": "Sort", ...sortButtonProps, children: /* @__PURE__ */ jsxRuntime.jsx(Sort, { className: classes.sortIcon }) }),
    /* @__PURE__ */ jsxRuntime.jsx(Typography.HvTypography, { component: "div", className: cx({
      [classes.headerText]: !paragraph,
      [classes.headerParagraph]: paragraph,
      [classes.sortableHeaderText]: sortable
    }), variant: "label", ...headerTextProps, children }),
    resizable && /* @__PURE__ */ jsxRuntime.jsx("div", { ...resizerProps, className: classes.resizer })
  ] }) });
});
exports.tableHeaderClasses = TableHeader_styles.staticClasses;
exports.HvTableHeader = HvTableHeader;
//# sourceMappingURL=TableHeader.cjs.map
