{"version":3,"file":"useSticky.cjs","sources":["../../../../../src/components/Table/hooks/useSticky.ts"],"sourcesContent":["import {\n  makePropGetter,\n  useGetLatest,\n  Hooks,\n  PropGetter,\n  TableCommonProps,\n} from \"react-table\";\nimport { CSSProperties } from \"react\";\nimport { theme } from \"@hitachivantara/uikit-styles\";\n\n// #region ##### TYPES #####\n\nexport interface UseHvTableStickyTableHeadProps extends TableCommonProps {\n  stickyHeader?: boolean;\n}\n\nexport type HvTableHeadPropGetter<D extends object> = PropGetter<\n  D,\n  UseHvTableStickyTableHeadProps\n>;\n\nexport type UseHvTableStickyTableOptions = {\n  stickyHeader?: boolean;\n  stickyColumns?: boolean;\n};\n\nexport interface UseHvTableStickyHooks<D extends object> {\n  getTableHeadProps: Array<HvTableHeadPropGetter<D>>;\n}\n\nexport interface UseHvTableStickyTableInstance<D extends object> {\n  getTableHeadProps: (\n    propGetter?: HvTableHeadPropGetter<D>\n  ) => UseHvTableStickyTableHeadProps;\n\n  totalRight?: number;\n  hasStickyColumns?: boolean;\n}\n\n// props target: <table>\nexport interface UseHvTableStickyTableProps {\n  stickyHeader?: boolean;\n  stickyColumns?: boolean;\n}\n\n// props target: <table><thead><tr><th>\nexport interface UseHvTableStickyColumnProps {\n  stickyColumn?: boolean;\n  stickyColumnMostLeft?: boolean;\n  stickyColumnLeastRight?: boolean;\n}\n\n// props target: <table><tbody><tr><td>\nexport interface UseHvTableStickyCellProps {\n  stickyColumn?: boolean;\n  stickyColumnMostLeft?: boolean;\n  stickyColumnLeastRight?: boolean;\n}\n\nexport type UseHvTableSticky = (<D extends object = Record<string, unknown>>(\n  hooks: Hooks<D>\n) => void) & { pluginName: string };\n\n// #endregion ##### TYPES #####\n\nconst isSticky = (value) => /left|right/i.test(value);\n\nconst getStickyValue = ({ sticky, parent }) => {\n  if (isSticky(sticky)) {\n    return sticky;\n  }\n\n  if (parent != null) {\n    // check if parent is sticky\n    sticky = getStickyValue(parent);\n    if (isSticky(sticky)) {\n      return sticky;\n    }\n\n    const { columns } = parent;\n    // check if any column in the same group is sticky\n    if (columns?.length > 0) {\n      sticky = columns?.find((col) => col.sticky != null)?.sticky;\n      if (isSticky(sticky)) {\n        return sticky;\n      }\n    }\n  }\n\n  return undefined;\n};\n\nconst updateColumnAndParent = (column, props) => {\n  Object.assign(column, props);\n\n  if (column.parent != null) {\n    updateColumnAndParent(column.parent, props);\n  }\n};\n\nconst visibleColumnsHook = (columns, { instance }) => {\n  const toTheLeft: any[] = [];\n  const toTheRight: any[] = [];\n  const others: any[] = [];\n\n  columns.forEach((column) => {\n    const sticky = getStickyValue(column)?.toLowerCase();\n\n    updateColumnAndParent(column, { sticky });\n\n    if (sticky === \"left\") {\n      toTheLeft.push(column);\n    } else if (sticky === \"right\") {\n      toTheRight.push(column);\n    } else {\n      others.push(column);\n    }\n  });\n\n  if (others.length > 0) {\n    const [firstNotSticky] = others;\n    updateColumnAndParent(firstNotSticky, { isFirstNotSticky: true });\n\n    const lastNotSticky = others[others.length - 1];\n    updateColumnAndParent(lastNotSticky, { isLastNotSticky: true });\n  }\n\n  const hasLeftSticky = toTheLeft.length > 0;\n  if (hasLeftSticky) {\n    const lastLeftSticky = toTheLeft[toTheLeft.length - 1];\n\n    updateColumnAndParent(lastLeftSticky, { isLastLeftSticky: true });\n  }\n\n  const hasRightSticky = toTheRight.length > 0;\n  if (hasRightSticky) {\n    const [firstRightSticky] = toTheRight;\n\n    updateColumnAndParent(firstRightSticky, { isFirstRightSticky: true });\n  }\n\n  instance.hasStickyColumns = hasLeftSticky || hasRightSticky;\n\n  return [...toTheLeft, ...others, ...toTheRight];\n};\n\nconst calculateHeaderWidthsToTheRight = (headers, right = 0) => {\n  if (!headers?.length) {\n    return;\n  }\n\n  for (let i = headers.length - 1; i !== -1; i -= 1) {\n    const header = headers[i];\n\n    header.totalRight = right;\n\n    const { headers: subHeaders } = header;\n    if (subHeaders?.length > 0) {\n      calculateHeaderWidthsToTheRight(subHeaders, right);\n    }\n\n    if (header.isVisible) {\n      right += header.totalWidth;\n    }\n  }\n};\n\nconst useInstanceHook = (instance) => {\n  calculateHeaderWidthsToTheRight(instance.headers);\n\n  const getInstance = useGetLatest(instance);\n  instance.getTableHeadProps = makePropGetter(\n    instance.getHooks().getTableHeadProps,\n    {\n      instance: getInstance(),\n    }\n  );\n};\n\nconst getRowProps = () => ({\n  style: {\n    display: \"flex\",\n    flex: \"1 0 auto\",\n  },\n});\n\nconst getCellProps = (header, isHeaderCell: boolean) => {\n  const props: UseHvTableStickyCellProps & { style: CSSProperties } = {\n    style: {\n      display: \"inline-flex\",\n      flex: `${header.totalWidth} ${header.totalMinWidth} auto`,\n      alignItems: isHeaderCell ? \"start\" : \"center\",\n      justifyContent: header.align,\n\n      width: `${header.totalWidth}px`,\n      minWidth: `${header.totalMinWidth}px`,\n      ...(isHeaderCell && { backgroundColor: theme.colors.atmo2 }),\n    },\n  };\n\n  if (header.sticky != null) {\n    props.stickyColumn = true;\n\n    const margin =\n      header.sticky === \"left\" ? header.totalLeft : header.totalRight;\n\n    props.style[header.sticky] = `${margin}px`;\n\n    if (header.isLastLeftSticky) {\n      props.stickyColumnMostLeft = true;\n    }\n\n    if (header.isFirstRightSticky) {\n      props.stickyColumnLeastRight = true;\n    }\n  } else {\n    if (header.isFirstNotSticky) {\n      props.style.borderLeft = 0;\n    }\n\n    if (header.isLastNotSticky) {\n      props.style.borderRight = 0;\n    }\n  }\n\n  return props;\n};\n\n/*\n * STICKY POSITION MANAGEMENT\n *   <thead>: sticky if stickyHeader: true\n *   <tr>: never sticky\n *   <th>: sticky only if that particular column is sticky (left or right)\n */\n\n/*\n * We need to hide the last non sticky column right border, to avoid issues with double borders.\n *\n * This could be done with css, using the `:has()` selector:\n *  - \".not-sticky:has(+ .first-right-sticky)\": { border-right: 0 }\n *\n * Until the `:has()` selector is supported by modern browsers,\n * that at the moment is just a proposal https://developer.mozilla.org/en-US/docs/Web/CSS/:has,\n * we need to override the last not sticky column \"borderRight\" here.\n */\n\n// props target: <table>\nconst getTablePropsHook = (props, { instance }) => {\n  const nextProps: UseHvTableStickyTableProps = {\n    stickyHeader: instance.stickyHeader,\n    stickyColumns: instance.hasStickyColumns,\n  };\n\n  return [props, nextProps];\n};\n\n// props target: <table><thead>\nexport const getTableHeadPropsHook = (props, { instance }) => {\n  const nextProps = {\n    stickyHeader: instance.stickyHeader,\n  };\n\n  return [props, nextProps];\n};\n\n// props target: <table><thead><tr>\nexport const getHeaderGroupPropsHook = (props, { instance }) => {\n  const nextProps = instance.hasStickyColumns ? getRowProps() : {};\n\n  return [props, nextProps];\n};\n\n// props target: <table><thead><tr><th>\nconst getHeaderPropsHook = (props, { instance, column }) => {\n  const nextProps = instance.hasStickyColumns ? getCellProps(column, true) : {};\n\n  return [props, nextProps];\n};\n\n// props target: <table><tbody><tr>\nconst getRowPropsHook = (props, { instance }) => {\n  const nextProps = instance.hasStickyColumns ? getRowProps() : {};\n\n  return [props, nextProps];\n};\n\n// props target: <table><tbody><tr><td>\nconst getCellPropsHook = (props, { instance, cell }) => {\n  const nextProps: UseHvTableStickyCellProps = instance.hasStickyColumns\n    ? getCellProps(cell.column, false)\n    : {};\n\n  return [props, nextProps];\n};\n\nconst useSticky: UseHvTableSticky = (hooks) => {\n  hooks.visibleColumns.push(visibleColumnsHook);\n  hooks.useInstance.push(useInstanceHook);\n\n  // props target: <table>\n  hooks.getTableProps.push(getTablePropsHook);\n  // props target: <table><thead>\n  hooks.getTableHeadProps = [getTableHeadPropsHook];\n  // props target: <table><thead><tr>\n  hooks.getHeaderGroupProps.push(getHeaderGroupPropsHook);\n  // props target: <table><thead><tr><th>\n  hooks.getHeaderProps.push(getHeaderPropsHook);\n  // props target: <table><tbody><tr>\n  hooks.getRowProps.push(getRowPropsHook);\n  // props target: <table><tbody><tr><td>\n  hooks.getCellProps.push(getCellPropsHook);\n};\n\nuseSticky.pluginName = \"useHvTableSticky\";\n\nexport default useSticky;\n"],"names":["isSticky","value","test","getStickyValue","sticky","parent","columns","length","find","col","undefined","updateColumnAndParent","column","props","assign","visibleColumnsHook","instance","toTheLeft","toTheRight","others","forEach","toLowerCase","push","firstNotSticky","isFirstNotSticky","lastNotSticky","isLastNotSticky","hasLeftSticky","lastLeftSticky","isLastLeftSticky","hasRightSticky","firstRightSticky","isFirstRightSticky","hasStickyColumns","calculateHeaderWidthsToTheRight","headers","right","i","header","totalRight","subHeaders","isVisible","totalWidth","useInstanceHook","getInstance","useGetLatest","getTableHeadProps","makePropGetter","getHooks","getRowProps","style","display","flex","getCellProps","isHeaderCell","totalMinWidth","alignItems","justifyContent","align","width","minWidth","backgroundColor","theme","colors","atmo2","stickyColumn","margin","totalLeft","stickyColumnMostLeft","stickyColumnLeastRight","borderLeft","borderRight","getTablePropsHook","nextProps","stickyHeader","stickyColumns","getTableHeadPropsHook","getHeaderGroupPropsHook","getHeaderPropsHook","getRowPropsHook","getCellPropsHook","cell","useSticky","hooks","visibleColumns","useInstance","getTableProps","getHeaderGroupProps","getHeaderProps","pluginName"],"mappings":"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"}