"use strict";
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const jsxRuntime = require("@emotion/react/jsx-runtime");
const capitalize = require("lodash/capitalize");
const React = require("react");
const uikitStyles = require("@hitachivantara/uikit-styles");
const checkValidHexColorValue = require("../../../utils/checkValidHexColorValue.cjs");
const theme = require("../../../utils/theme.cjs");
const hexToRgbA = require("../../../utils/hexToRgbA.cjs");
const useTheme = require("../../../hooks/useTheme.cjs");
const TableContext = require("../TableContext.cjs");
const TableSectionContext = require("../TableSectionContext.cjs");
const TableCell_styles = require("./TableCell.styles.cjs");
const _interopDefault = (e) => e && e.__esModule ? e : { default: e };
const capitalize__default = /* @__PURE__ */ _interopDefault(capitalize);
const defaultComponent = "td";
const getSortedColor = (color, alpha) => {
  return checkValidHexColorValue.checkValidHexColorValue(color) && alpha ? hexToRgbA.hexToRgbA(color, parseFloat(alpha)) : color;
};
const HvTableCell = React.forwardRef((props, externalRef) => {
  var _a;
  const {
    children,
    component,
    className,
    style,
    classes: classesProp,
    align = "inherit",
    variant = "default",
    type: typeProp,
    stickyColumn = false,
    stickyColumnMostLeft = false,
    stickyColumnLeastRight = false,
    groupColumnMostLeft = false,
    groupColumnMostRight = false,
    sorted = false,
    resizable = false,
    resizing = false,
    ...others
  } = props;
  const {
    classes,
    cx,
    css
  } = TableCell_styles.useClasses(classesProp);
  const {
    colors,
    rootId
  } = useTheme.useTheme();
  const tableContext = React.useContext(TableContext.default);
  const tableSectionContext = React.useContext(TableSectionContext.default);
  const [sortedColorValue, setSortedColorValue] = React.useState();
  const [sortedColorAlpha, setSortedColorAlpha] = React.useState();
  const type = typeProp || (tableSectionContext == null ? void 0 : tableSectionContext.type) || "body";
  const Component = component || ((_a = tableContext == null ? void 0 : tableContext.components) == null ? void 0 : _a.Td) || defaultComponent;
  const [sortedColor, setSortedColor] = React.useState(getSortedColor(sortedColorValue, sortedColorAlpha));
  React.useEffect(() => {
    setSortedColorValue(theme.getVarValue(uikitStyles.theme.table.rowSortedColor, rootId));
    setSortedColorAlpha(theme.getVarValue(uikitStyles.theme.table.rowSortedColorAlpha, rootId));
    setSortedColor(getSortedColor(sortedColorValue, sortedColorAlpha));
  }, [colors, sortedColorValue, sortedColorAlpha, rootId]);
  return /* @__PURE__ */ jsxRuntime.jsx(Component, { ref: externalRef, role: Component === defaultComponent ? null : "cell", style, className: cx(classes.root, classes[type], type === "body" && css({
    [`&.${TableCell_styles.staticClasses.sorted}`]: {
      backgroundColor: sortedColor
    }
  }), stickyColumn && css({
    [`&.${TableCell_styles.staticClasses.sorted}`]: {
      backgroundImage: `linear-gradient(to right, ${sortedColor}, ${sortedColor})`
    }
  }), {
    [classes[`align${capitalize__default.default(align)}`]]: align !== "inherit",
    [classes.variantList]: tableContext.variant === "listrow",
    [classes.variantListHead]: tableContext.variant === "listrow" && type !== "body",
    [classes[`variant${capitalize__default.default(variant)}`]]: variant !== "default",
    [classes.sorted]: sorted,
    [classes.stickyColumn]: stickyColumn,
    [classes.stickyColumnMostLeft]: stickyColumnMostLeft,
    [classes.stickyColumnLeastRight]: stickyColumnLeastRight,
    [classes.groupColumnMostLeft]: groupColumnMostLeft,
    [classes.groupColumnMostRight]: groupColumnMostRight,
    [classes.resizable]: resizable,
    [classes.resizing]: resizing
  }, className), ...others, children });
});
exports.tableCellClasses = TableCell_styles.staticClasses;
exports.HvTableCell = HvTableCell;
//# sourceMappingURL=TableCell.cjs.map
