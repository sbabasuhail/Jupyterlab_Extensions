"use strict";
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const jsxRuntime = require("@emotion/react/jsx-runtime");
const useDefaultProps = require("../../hooks/useDefaultProps.cjs");
const React = require("react");
const MultiButton_styles = require("./MultiButton.styles.cjs");
const _interopDefault = (e) => e && e.__esModule ? e : { default: e };
const React__default = /* @__PURE__ */ _interopDefault(React);
const HvMultiButton = (props) => {
  const {
    className,
    children,
    classes: classesProp,
    disabled = false,
    vertical = false,
    variant = "secondarySubtle",
    ...others
  } = useDefaultProps.useDefaultProps("HvMultiButton", props);
  const {
    classes,
    cx
  } = MultiButton_styles.useClasses(classesProp);
  return /* @__PURE__ */ jsxRuntime.jsx("div", { className: cx(classes.root, {
    [classes.vertical]: vertical
  }, className), ...others, children: React__default.default.Children.map(children, (child) => {
    if (React__default.default.isValidElement(child)) {
      const childIsSelected = !!child.props.selected;
      return React.cloneElement(child, {
        variant,
        disabled: disabled || child.props.disabled,
        className: cx(child.props.className, classes.button, {
          [classes.selected]: childIsSelected
        }),
        "aria-pressed": childIsSelected
      });
    }
  }) });
};
exports.multiButtonClasses = MultiButton_styles.staticClasses;
exports.HvMultiButton = HvMultiButton;
//# sourceMappingURL=MultiButton.cjs.map
