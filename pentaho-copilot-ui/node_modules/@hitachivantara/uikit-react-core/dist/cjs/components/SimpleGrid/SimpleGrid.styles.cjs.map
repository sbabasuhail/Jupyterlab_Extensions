{"version":3,"file":"SimpleGrid.styles.cjs","sources":["../../../../src/components/SimpleGrid/SimpleGrid.styles.tsx"],"sourcesContent":["import { CSSObject } from \"@emotion/serialize\";\n\nimport { theme } from \"@hitachivantara/uikit-styles\";\n\nimport { createClasses } from \"@core/utils/classes\";\n\nimport { Spacing, Breakpoint } from \"./types\";\n\nexport const { staticClasses, useClasses } = createClasses(\"HvSimpleGrid\", {\n  root: {},\n});\n\nfunction size(props: { size: any; sizes: any }) {\n  if (typeof props.size === \"number\") {\n    return props.size;\n  }\n\n  return props.sizes[props.size] || props.size || props.sizes.md;\n}\n\nfunction getSortedBreakpoints(breakpoints: Breakpoint[]) {\n  if (breakpoints.length === 0) {\n    return breakpoints;\n  }\n\n  const property = \"maxWidth\" in breakpoints[0] ? \"maxWidth\" : \"minWidth\";\n  const sorted = [...breakpoints].sort(\n    (a, b) =>\n      size({ size: b[property], sizes: theme.breakpoints }) -\n      size({ size: a[property], sizes: theme.breakpoints })\n  );\n\n  return property === \"minWidth\" ? sorted.reverse() : sorted;\n}\n\nexport const getContainerStyle = ({\n  breakpoints,\n  spacing,\n  cols,\n}: {\n  breakpoints?: Breakpoint[];\n  spacing: Spacing;\n  cols?: number;\n}): CSSObject => {\n  return {\n    boxSizing: \"border-box\",\n    display: \"grid\",\n    gridTemplateColumns: `repeat(${cols}, minmax(0, 1fr))`,\n    gap: theme.space[spacing],\n    ...(breakpoints &&\n      getSortedBreakpoints(breakpoints).reduce((acc, breakpoint) => {\n        const property = \"maxWidth\" in breakpoint ? \"max-width\" : \"min-width\";\n        const breakpointSize = size({\n          size:\n            property === \"max-width\"\n              ? breakpoint.maxWidth\n              : breakpoint.minWidth,\n          sizes: theme.breakpoints,\n        });\n\n        acc[\n          `@media (${property}: ${\n            breakpointSize + (property === \"max-width\" ? 0 : 1)\n          }px)`\n        ] = {\n          gridTemplateColumns: `repeat(${breakpoint.cols}, minmax(0, 1fr))`,\n          gap: theme.space[spacing],\n        };\n\n        return acc;\n      }, {})),\n  };\n};\n"],"names":["staticClasses","useClasses","createClasses","root","size","props","sizes","md","getSortedBreakpoints","breakpoints","length","property","sorted","sort","a","b","theme","reverse","getContainerStyle","spacing","cols","boxSizing","display","gridTemplateColumns","gap","space","reduce","acc","breakpoint","breakpointSize","maxWidth","minWidth"],"mappings":";;;;AAQa,MAAA;AAAA,EAAEA;AAAAA,EAAeC;AAAW,IAAIC,QAAAA,cAAc,gBAAgB;AAAA,EACzEC,MAAM,CAAC;AACT,CAAC;AAED,SAASC,KAAKC,OAAkC;AAC1C,MAAA,OAAOA,MAAMD,SAAS,UAAU;AAClC,WAAOC,MAAMD;AAAAA,EACf;AAEOC,SAAAA,MAAMC,MAAMD,MAAMD,IAAI,KAAKC,MAAMD,QAAQC,MAAMC,MAAMC;AAC9D;AAEA,SAASC,qBAAqBC,aAA2B;AACnDA,MAAAA,YAAYC,WAAW,GAAG;AACrBD,WAAAA;AAAAA,EACT;AAEA,QAAME,WAAW,cAAcF,YAAY,CAAC,IAAI,aAAa;AACvDG,QAAAA,SAAS,CAAC,GAAGH,WAAW,EAAEI,KAC9B,CAACC,GAAGC,MACFX,KAAK;AAAA,IAAEA,MAAMW,EAAEJ,QAAQ;AAAA,IAAGL,OAAOU,YAAMP,MAAAA;AAAAA,EAAa,CAAA,IACpDL,KAAK;AAAA,IAAEA,MAAMU,EAAEH,QAAQ;AAAA,IAAGL,OAAOU,YAAMP,MAAAA;AAAAA,EAAa,CAAA,CACxD;AAEA,SAAOE,aAAa,aAAaC,OAAOK,QAAAA,IAAYL;AACtD;AAEO,MAAMM,oBAAoBA,CAAC;AAAA,EAChCT;AAAAA,EACAU;AAAAA,EACAC;AAKF,MAAiB;AACR,SAAA;AAAA,IACLC,WAAW;AAAA,IACXC,SAAS;AAAA,IACTC,qBAAsB,UAASH,IAAK;AAAA,IACpCI,KAAKR,YAAAA,MAAMS,MAAMN,OAAO;AAAA,IACxB,GAAIV,eACFD,qBAAqBC,WAAW,EAAEiB,OAAO,CAACC,KAAKC,eAAe;AACtDjB,YAAAA,WAAW,cAAciB,aAAa,cAAc;AAC1D,YAAMC,iBAAiBzB,KAAK;AAAA,QAC1BA,MACEO,aAAa,cACTiB,WAAWE,WACXF,WAAWG;AAAAA,QACjBzB,OAAOU,YAAMP,MAAAA;AAAAA,MAAAA,CACd;AAGE,UAAA,WAAUE,QAAS,KAClBkB,kBAAkBlB,aAAa,cAAc,IAAI,EAClD,KAAI,IACH;AAAA,QACFY,qBAAsB,UAASK,WAAWR,IAAK;AAAA,QAC/CI,KAAKR,YAAAA,MAAMS,MAAMN,OAAO;AAAA,MAAA;AAGnBQ,aAAAA;AAAAA,IACT,GAAG,EAAE;AAAA,EAAA;AAEX;;;;"}