"use strict";
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const uikitStyles = require("@hitachivantara/uikit-styles");
const classes = require("../../utils/classes.cjs");
const {
  staticClasses,
  useClasses
} = classes.createClasses("HvSimpleGrid", {
  root: {}
});
function size(props) {
  if (typeof props.size === "number") {
    return props.size;
  }
  return props.sizes[props.size] || props.size || props.sizes.md;
}
function getSortedBreakpoints(breakpoints) {
  if (breakpoints.length === 0) {
    return breakpoints;
  }
  const property = "maxWidth" in breakpoints[0] ? "maxWidth" : "minWidth";
  const sorted = [...breakpoints].sort((a, b) => size({
    size: b[property],
    sizes: uikitStyles.theme.breakpoints
  }) - size({
    size: a[property],
    sizes: uikitStyles.theme.breakpoints
  }));
  return property === "minWidth" ? sorted.reverse() : sorted;
}
const getContainerStyle = ({
  breakpoints,
  spacing,
  cols
}) => {
  return {
    boxSizing: "border-box",
    display: "grid",
    gridTemplateColumns: `repeat(${cols}, minmax(0, 1fr))`,
    gap: uikitStyles.theme.space[spacing],
    ...breakpoints && getSortedBreakpoints(breakpoints).reduce((acc, breakpoint) => {
      const property = "maxWidth" in breakpoint ? "max-width" : "min-width";
      const breakpointSize = size({
        size: property === "max-width" ? breakpoint.maxWidth : breakpoint.minWidth,
        sizes: uikitStyles.theme.breakpoints
      });
      acc[`@media (${property}: ${breakpointSize + (property === "max-width" ? 0 : 1)}px)`] = {
        gridTemplateColumns: `repeat(${breakpoint.cols}, minmax(0, 1fr))`,
        gap: uikitStyles.theme.space[spacing]
      };
      return acc;
    }, {})
  };
};
exports.getContainerStyle = getContainerStyle;
exports.staticClasses = staticClasses;
exports.useClasses = useClasses;
//# sourceMappingURL=SimpleGrid.styles.cjs.map
