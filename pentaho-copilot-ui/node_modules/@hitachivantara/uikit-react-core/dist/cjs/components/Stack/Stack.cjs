"use strict";
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const jsxRuntime = require("@emotion/react/jsx-runtime");
const React = require("react");
const styles = require("@mui/material/styles");
const MuiDivider = require("@mui/material/Divider");
const isString = require("lodash/isString");
const isBoolean = require("lodash/isBoolean");
const useWidth = require("../../hooks/useWidth.cjs");
const useDefaultProps = require("../../hooks/useDefaultProps.cjs");
const Stack_styles = require("./Stack.styles.cjs");
const Focus = require("../Focus/Focus.cjs");
const _interopDefault = (e) => e && e.__esModule ? e : { default: e };
const React__default = /* @__PURE__ */ _interopDefault(React);
const MuiDivider__default = /* @__PURE__ */ _interopDefault(MuiDivider);
const isString__default = /* @__PURE__ */ _interopDefault(isString);
const isBoolean__default = /* @__PURE__ */ _interopDefault(isBoolean);
const getDirection = (direction, width, breakpoints) => {
  if (isString__default.default(direction))
    return direction;
  for (let i = breakpoints.indexOf(width); i >= 0; i -= 1) {
    if (direction[breakpoints[i]] !== void 0) {
      return direction[breakpoints[i]];
    }
  }
  return "column";
};
const HvStack = (props) => {
  const {
    classes: classesProp,
    className,
    children,
    direction = "column",
    spacing = "sm",
    divider = false,
    withNavigation = false,
    dividerProps = {},
    ...others
  } = useDefaultProps.useDefaultProps("HvStack", props);
  const {
    classes,
    cx
  } = Stack_styles.useClasses(classesProp);
  const width = useWidth.useWidth();
  const containerRef = React.useRef(null);
  const {
    breakpoints
  } = styles.useTheme();
  const processedDirection = React.useMemo(() => getDirection(direction, width, breakpoints.keys), [direction, width, breakpoints]);
  const getDividerComponent = React.useCallback(() => {
    if (isBoolean__default.default(divider) && divider) {
      return /* @__PURE__ */ jsxRuntime.jsx(MuiDivider__default.default, { orientation: processedDirection === "column" ? "horizontal" : "vertical", flexItem: processedDirection === "row", role: "separator", ...dividerProps });
    }
    return divider;
  }, [divider, dividerProps, processedDirection]);
  return /* @__PURE__ */ jsxRuntime.jsx("div", { ref: containerRef, className: cx(classes.root, classes[processedDirection], classes[spacing], className), ...others, children: React__default.default.Children.map(children, (child, i) => {
    return /* @__PURE__ */ jsxRuntime.jsxs(jsxRuntime.Fragment, { children: [
      divider && i !== 0 && getDividerComponent(),
      withNavigation ? /* @__PURE__ */ jsxRuntime.jsx(Focus.HvFocus, { rootRef: containerRef, focusDisabled: false, strategy: "grid", navigationJump: processedDirection === "column" ? 1 : React__default.default.Children.count(children) || 0, filterClass: "child", children: /* @__PURE__ */ jsxRuntime.jsx("div", { className: "child", children: child }) }) : child
    ] });
  }) });
};
exports.stackClasses = Stack_styles.staticClasses;
exports.HvStack = HvStack;
//# sourceMappingURL=Stack.cjs.map
