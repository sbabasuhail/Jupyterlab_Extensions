"use strict";
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const jsxRuntime = require("@emotion/react/jsx-runtime");
const React = require("react");
const useDefaultProps = require("../../../hooks/useDefaultProps.cjs");
const setId = require("../../../utils/setId.cjs");
const CharCounter_styles = require("./CharCounter.styles.cjs");
const FormElementContext = require("../FormElement/context/FormElementContext.cjs");
const Typography = require("../../Typography/Typography.cjs");
const HvCharCounter = (props) => {
  const {
    separator = "/",
    maxCharQuantity,
    currentCharQuantity = 0,
    classes: classesProp,
    className,
    id,
    disabled,
    disableGutter = false,
    ...others
  } = useDefaultProps.useDefaultProps("HvCharCounter", props);
  const {
    classes,
    cx
  } = CharCounter_styles.useClasses(classesProp);
  const {
    elementId,
    elementDisabled
  } = React.useContext(FormElementContext.HvFormElementContext);
  const localDisabled = disabled || elementDisabled;
  const localId = id ?? setId.setId(elementId, "counter");
  const currentId = setId.setId(localId, "currentQuantity");
  const maxQuantityId = setId.setId(localId, "maxQuantity");
  const isOverloaded = currentCharQuantity > maxCharQuantity;
  return /* @__PURE__ */ jsxRuntime.jsxs("div", { id: localId, className: cx(classes.root, {
    [classes.counterDisabled]: !!localDisabled,
    [classes.gutter]: !disableGutter
  }, className), "aria-live": "polite", "aria-disabled": localDisabled, ...others, children: [
    /* @__PURE__ */ jsxRuntime.jsx(Typography.HvTypography, { id: currentId, className: cx({
      [classes.overloaded]: isOverloaded && !localDisabled,
      [classes.counterDisabled]: !!localDisabled
    }), variant: "label", component: "label", children: currentCharQuantity }),
    /* @__PURE__ */ jsxRuntime.jsx(Typography.HvTypography, { id: maxQuantityId, className: cx({
      [classes.overloaded]: isOverloaded && !localDisabled,
      [classes.counterDisabled]: !!localDisabled
    }), variant: "body", component: "label", children: ` ${separator} ${maxCharQuantity}` })
  ] });
};
exports.charCounterClasses = CharCounter_styles.staticClasses;
exports.HvCharCounter = HvCharCounter;
//# sourceMappingURL=CharCounter.cjs.map
