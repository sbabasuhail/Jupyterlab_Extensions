"use strict";
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const jsxRuntime = require("@emotion/react/jsx-runtime");
const React = require("react");
const isNil = require("lodash/isNil");
const uikitReactIcons = require("@hitachivantara/uikit-react-icons");
const useDefaultProps = require("../../../hooks/useDefaultProps.cjs");
const setId = require("../../../utils/setId.cjs");
const WarningText_styles = require("./WarningText.styles.cjs");
const FormElementContext = require("../FormElement/context/FormElementContext.cjs");
const Typography = require("../../Typography/Typography.cjs");
const _interopDefault = (e) => e && e.__esModule ? e : { default: e };
const isNil__default = /* @__PURE__ */ _interopDefault(isNil);
const HvWarningText = (props) => {
  const {
    children,
    adornment,
    isVisible,
    classes: classesProp,
    className,
    id,
    disabled,
    disableGutter = false,
    disableBorder = false,
    disableAdornment = false,
    hideText = false,
    ...others
  } = useDefaultProps.useDefaultProps("HvWarningText", props);
  const {
    classes,
    cx
  } = WarningText_styles.useClasses(classesProp);
  const {
    elementId,
    elementStatus,
    elementDisabled
  } = React.useContext(FormElementContext.HvFormElementContext);
  const localDisabled = disabled || elementDisabled;
  const localVisible = !isNil__default.default(isVisible) ? isVisible : elementStatus === "invalid";
  const localId = id ?? setId.setId(elementId, "error");
  const showWarning = localVisible && !localDisabled;
  const content = showWarning ? children : "";
  const localAdornment = adornment || /* @__PURE__ */ jsxRuntime.jsx(uikitReactIcons.Fail, { className: classes.defaultIcon, color: "negative" });
  return /* @__PURE__ */ jsxRuntime.jsxs("div", { className: cx(classes.root, {
    [classes.show]: showWarning,
    [classes.topBorder]: !disableBorder
  }, className), children: [
    !disableAdornment && localAdornment,
    /* @__PURE__ */ jsxRuntime.jsx(Typography.HvTypography, { id: localId, className: cx(classes.warningText, {
      [classes.topGutter]: !disableGutter,
      [classes.hideText]: hideText
    }), role: "status", "aria-live": "polite", "aria-relevant": "additions text", ...others, children: showWarning && content })
  ] });
};
exports.warningTextClasses = WarningText_styles.staticClasses;
exports.HvWarningText = HvWarningText;
//# sourceMappingURL=WarningText.cjs.map
