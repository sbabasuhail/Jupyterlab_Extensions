{"version":3,"file":"Label.cjs","sources":["../../../../../src/components/Forms/Label/Label.tsx"],"sourcesContent":["import { useContext } from \"react\";\n\nimport { useDefaultProps } from \"@core/hooks/useDefaultProps\";\nimport { setId } from \"@core/utils/setId\";\nimport { ExtractNames } from \"@core/utils/classes\";\nimport { HvTypography, HvTypographyProps } from \"@core/components/Typography\";\n\nimport { HvFormElementContext } from \"../FormElement\";\nimport { findDescriptors } from \"../FormElement/utils/FormUtils\";\nimport { staticClasses, useClasses } from \"./Label.styles\";\n\nexport { staticClasses as labelClasses };\n\nexport type HvLabelClasses = ExtractNames<typeof useClasses>;\n\nexport interface HvLabelProps extends HvTypographyProps<\"label\"> {\n  /** Id to be applied to the root node */\n  id?: string;\n  /** The text to be shown by the label. */\n  label?: React.ReactNode;\n  /** The id of the form element the label is bound to. */\n  htmlFor?: string;\n  /** If `true` the label is displayed with a disabled style. */\n  disabled?: boolean;\n  /** If `true`, the label will indicate that the form element is required (an `*` after the label text). */\n  required?: boolean;\n  /** A Jss Object used to override or extend the styles applied to the component. */\n  classes?: HvLabelClasses;\n}\n\n/**\n * Provides the user with a recognizable name for a given form element.\n */\nexport const HvLabel = (props: HvLabelProps) => {\n  const {\n    id,\n    classes: classesProp,\n    className,\n    children,\n    label,\n    disabled,\n    required,\n    htmlFor: htmlForProp,\n    ...others\n  } = useDefaultProps(\"HvLabel\", props);\n\n  const { classes, cx } = useClasses(classesProp);\n\n  const { elementId, elementDisabled, elementRequired } =\n    useContext(HvFormElementContext);\n\n  const localDisabled = disabled || elementDisabled;\n  const localRequired = required || elementRequired;\n\n  const localId = id ?? setId(elementId, \"label\");\n\n  const forId = htmlForProp || findDescriptors(children)?.input?.[0]?.id;\n\n  return (\n    <>\n      <HvTypography\n        id={localId}\n        className={cx(\n          classes.root,\n          {\n            [classes.labelDisabled]: !!localDisabled,\n            [classes.childGutter]: !!(children && label),\n          },\n          className\n        )}\n        variant=\"label\"\n        component=\"label\"\n        htmlFor={forId}\n        {...others}\n      >\n        {label}\n        {localRequired && <span aria-hidden=\"true\">*</span>}\n      </HvTypography>\n      {children}\n    </>\n  );\n};\n"],"names":["HvLabel","props","id","classes","classesProp","className","children","label","disabled","required","htmlFor","htmlForProp","others","useDefaultProps","cx","useClasses","elementId","elementDisabled","elementRequired","useContext","HvFormElementContext","localDisabled","localRequired","localId","setId","forId","findDescriptors","input","jsxs","Fragment","HvTypography","root","labelDisabled","childGutter","jsx"],"mappings":";;;;;;;;;;AAiCaA,MAAAA,UAAUA,CAACC,UAAwB;;AACxC,QAAA;AAAA,IACJC;AAAAA,IACAC,SAASC;AAAAA,IACTC;AAAAA,IACAC;AAAAA,IACAC;AAAAA,IACAC;AAAAA,IACAC;AAAAA,IACAC,SAASC;AAAAA,IACT,GAAGC;AAAAA,EAAAA,IACDC,gBAAgB,gBAAA,WAAWZ,KAAK;AAE9B,QAAA;AAAA,IAAEE;AAAAA,IAASW;AAAAA,EAAAA,IAAOC,aAAAA,WAAWX,WAAW;AAExC,QAAA;AAAA,IAAEY;AAAAA,IAAWC;AAAAA,IAAiBC;AAAAA,EAAAA,IAClCC,MAAAA,WAAWC,mBAAAA,oBAAoB;AAEjC,QAAMC,gBAAgBb,YAAYS;AAClC,QAAMK,gBAAgBb,YAAYS;AAElC,QAAMK,UAAUrB,MAAMsB,MAAMR,MAAAA,WAAW,OAAO;AAE9C,QAAMS,QAAQd,iBAAee,2CAAgBpB,QAAQ,MAAxBoB,mBAA2BC,UAA3BD,mBAAmC,OAAnCA,mBAAuCxB;AAEpE,SAEI0B,2BAAA,KAAAC,qBAAA,EAAA,UAAA;AAAA,IAAAD,gCAACE,WAAAA,gBACC,IAAIP,SACJ,WAAWT,GACTX,QAAQ4B,MACR;AAAA,MACE,CAAC5B,QAAQ6B,aAAa,GAAG,CAAC,CAACX;AAAAA,MAC3B,CAAClB,QAAQ8B,WAAW,GAAG,CAAC,EAAE3B,YAAYC;AAAAA,IACxC,GACAF,SACF,GACA,SAAQ,SACR,WAAU,SACV,SAASoB,OACLb,GAAAA,QAEHL,UAAAA;AAAAA,MAAAA;AAAAA,MACAe,iBAAiBY,2BAAA,IAAC,QAAK,EAAA,eAAY,QAAO,UAAC,KAAA;AAAA,IAAA,GAC9C;AAAA,IACC5B;AAAAA,EACH,EAAA,CAAA;AAEJ;;;"}