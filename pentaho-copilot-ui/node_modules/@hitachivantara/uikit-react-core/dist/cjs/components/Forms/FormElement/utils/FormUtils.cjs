"use strict";
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const React = require("react");
const _interopDefault = (e) => e && e.__esModule ? e : { default: e };
const React__default = /* @__PURE__ */ _interopDefault(React);
const findDescriptors = (children, descriptors = {
  input: [],
  label: [],
  description: [],
  controlled: [],
  errormessage: [],
  // TODO: refactor this out
  HvCalendarHeader: []
}) => {
  React__default.default.Children.forEach(children, (child) => {
    var _a, _b, _c, _d, _e, _f, _g;
    if (((_a = child == null ? void 0 : child.type) == null ? void 0 : _a.formElementType) && ((_b = child.props) == null ? void 0 : _b.id)) {
      (_e = descriptors[child.type.formElementType]) == null ? void 0 : _e.push({
        id: (_c = child.props) == null ? void 0 : _c.id,
        htmlFor: (_d = child.props) == null ? void 0 : _d.htmlFor
      });
    }
    if (((_f = child == null ? void 0 : child.type) == null ? void 0 : _f.formElementType) !== "formelement") {
      findDescriptors((_g = child == null ? void 0 : child.props) == null ? void 0 : _g.children, descriptors);
    }
  });
  return descriptors;
};
const getIdReferenceListFor = (formElementType, descriptors, filterFor = null) => {
  var _a, _b;
  const referenceList = (_b = (_a = descriptors == null ? void 0 : descriptors[formElementType]) == null ? void 0 : _a.filter((d) => d.htmlFor !== filterFor)) == null ? void 0 : _b.map((d) => d.id).join(" ").trim();
  return referenceList !== "" ? referenceList : void 0;
};
const getIdReferenceFor = (formElementType, descriptors, filterFor = null) => {
  var _a, _b, _c;
  const referenceList = (_c = (_b = (_a = descriptors == null ? void 0 : descriptors[formElementType]) == null ? void 0 : _a.filter((d) => d.htmlFor !== filterFor)) == null ? void 0 : _b.map((d) => d.id)) == null ? void 0 : _c[0];
  return referenceList !== "" ? referenceList : void 0;
};
const buildFormElementPropsFromContext = (name, disabled, readOnly, required, context) => {
  return {
    name: name || (context == null ? void 0 : context.elementName),
    disabled: disabled !== void 0 ? disabled : context == null ? void 0 : context.elementDisabled,
    readOnly: readOnly !== void 0 ? readOnly : context == null ? void 0 : context.elementReadOnly,
    required: required !== void 0 ? required : context == null ? void 0 : context.elementRequired,
    status: context == null ? void 0 : context.elementStatus
  };
};
const buildAriaPropsFromContext = (props, context, isInvalid, inputId) => {
  const arias = {
    "aria-labelledby": (props == null ? void 0 : props["aria-labelledby"]) !== void 0 ? props == null ? void 0 : props["aria-labelledby"] : getIdReferenceListFor("label", context == null ? void 0 : context.descriptors, inputId),
    "aria-describedby": (props == null ? void 0 : props["aria-describedby"]) !== void 0 ? props == null ? void 0 : props["aria-describedby"] : getIdReferenceListFor("description", context == null ? void 0 : context.descriptors),
    "aria-controls": (props == null ? void 0 : props["aria-controls"]) !== void 0 ? props == null ? void 0 : props["aria-controls"] : getIdReferenceListFor("controlled", context == null ? void 0 : context.descriptors)
  };
  if (isInvalid) {
    arias["aria-invalid"] = isInvalid;
    arias["aria-errormessage"] = (props == null ? void 0 : props["aria-errormessage"]) !== void 0 ? props == null ? void 0 : props["aria-errormessage"] : getIdReferenceFor("errormessage", context == null ? void 0 : context.descriptors);
  }
  return arias;
};
exports.buildAriaPropsFromContext = buildAriaPropsFromContext;
exports.buildFormElementPropsFromContext = buildFormElementPropsFromContext;
exports.findDescriptors = findDescriptors;
exports.getIdReferenceFor = getIdReferenceFor;
exports.getIdReferenceListFor = getIdReferenceListFor;
//# sourceMappingURL=FormUtils.cjs.map
