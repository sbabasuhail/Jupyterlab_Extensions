"use strict";
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const jsxRuntime = require("@emotion/react/jsx-runtime");
const React = require("react");
const useDefaultProps = require("../../../hooks/useDefaultProps.cjs");
const setId = require("../../../utils/setId.cjs");
const InfoMessage_styles = require("./InfoMessage.styles.cjs");
const FormElementContext = require("../FormElement/context/FormElementContext.cjs");
const Typography = require("../../Typography/Typography.cjs");
const HvInfoMessage = (props) => {
  const {
    id,
    classes: classesProp,
    className,
    children,
    disabled,
    disableGutter = false,
    ...others
  } = useDefaultProps.useDefaultProps("HvInfoMessage", props);
  const {
    classes,
    cx
  } = InfoMessage_styles.useClasses(classesProp);
  const {
    elementId,
    elementDisabled
  } = React.useContext(FormElementContext.HvFormElementContext);
  const localDisabled = disabled || elementDisabled;
  const localId = id ?? setId.setId(elementId, "description");
  return /* @__PURE__ */ jsxRuntime.jsx(Typography.HvTypography, { id: localId, className: cx(classes.root, {
    [classes.infoDisabled]: !!localDisabled,
    [classes.gutter]: !disableGutter
  }, className), variant: "body", component: "label", ...others, children });
};
exports.infoMessageClasses = InfoMessage_styles.staticClasses;
exports.HvInfoMessage = HvInfoMessage;
//# sourceMappingURL=InfoMessage.cjs.map
