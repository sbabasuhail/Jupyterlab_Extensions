"use strict";
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const jsxRuntime = require("@emotion/react/jsx-runtime");
const React = require("react");
const useDefaultProps = require("../../hooks/useDefaultProps.cjs");
const uikitReactIcons = require("@hitachivantara/uikit-react-icons");
const useControlled = require("../../hooks/useControlled.cjs");
const setId = require("../../utils/setId.cjs");
const Accordion_styles = require("./Accordion.styles.cjs");
const Typography = require("../Typography/Typography.cjs");
const HvAccordion = (props) => {
  const {
    id,
    className,
    classes: classesProp,
    disabled = false,
    label,
    onChange,
    children,
    expanded,
    headingLevel,
    defaultExpanded = false,
    containerProps,
    labelVariant = "label",
    ...others
  } = useDefaultProps.useDefaultProps("HvAccordion", props);
  const {
    classes,
    cx
  } = Accordion_styles.useClasses(classesProp);
  const [isOpen, setIsOpen] = useControlled.useControlled(expanded, Boolean(defaultExpanded));
  const handleAction = React.useCallback((event) => {
    if (!disabled) {
      onChange == null ? void 0 : onChange(event, isOpen);
      setIsOpen(!isOpen);
      return true;
    }
    return false;
  }, [disabled, onChange, isOpen, setIsOpen]);
  const handleClick = React.useCallback((event) => {
    handleAction(event);
    event.preventDefault();
    event.stopPropagation();
  }, [handleAction]);
  const handleKeyDown = React.useCallback((event) => {
    let isEventHandled = false;
    const {
      key
    } = event;
    if (event.altKey || event.ctrlKey || event.metaKey || event.currentTarget !== event.target) {
      return;
    }
    switch (key) {
      case "Enter":
      case " ":
        isEventHandled = handleAction(event);
        break;
      default:
        return;
    }
    if (isEventHandled) {
      event.preventDefault();
      event.stopPropagation();
    }
  }, [handleAction]);
  const accordionHeaderId = setId.setId(id, "button");
  const accordionContainer = setId.setId(id, "container");
  const accordionHeader = React.useMemo(() => {
    const color = disabled && ["secondary_60"] || void 0;
    const accordionButton = /* @__PURE__ */ jsxRuntime.jsxs(Typography.HvTypography, { id: accordionHeaderId, component: "div", role: "button", className: cx(classes.label, {
      [classes.disabled]: disabled
    }), disabled, tabIndex: 0, onKeyDown: handleKeyDown, onClick: handleClick, variant: labelVariant, "aria-expanded": isOpen, "aria-disabled": disabled, children: [
      isOpen ? /* @__PURE__ */ jsxRuntime.jsx(uikitReactIcons.DropUpXS, { color }) : /* @__PURE__ */ jsxRuntime.jsx(uikitReactIcons.DropDownXS, { color }),
      label
    ] });
    const result = headingLevel === void 0 ? accordionButton : /* @__PURE__ */ jsxRuntime.jsx(Typography.HvTypography, { component: `h${headingLevel}`, variant: labelVariant, children: accordionButton });
    return result;
  }, [cx, classes, handleClick, handleKeyDown, label, accordionHeaderId, disabled, headingLevel, isOpen, labelVariant]);
  return /* @__PURE__ */ jsxRuntime.jsxs("div", { id, className: cx(classes.root, className), ...others, children: [
    accordionHeader,
    /* @__PURE__ */ jsxRuntime.jsx("div", { id: accordionContainer, role: "region", "aria-labelledby": accordionHeaderId, className: cx(classes.container, {
      [classes.hidden]: !isOpen
    }), hidden: !isOpen, ...containerProps, children })
  ] });
};
exports.accordionClasses = Accordion_styles.staticClasses;
exports.HvAccordion = HvAccordion;
//# sourceMappingURL=Accordion.cjs.map
