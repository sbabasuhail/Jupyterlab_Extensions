"use strict";
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const jsxRuntime = require("@emotion/react/jsx-runtime");
const useDefaultProps = require("../../hooks/useDefaultProps.cjs");
const styles = require("@mui/material/styles");
const material = require("@mui/material");
const isString = require("lodash/isString");
const uikitStyles = require("@hitachivantara/uikit-styles");
const useTheme = require("../../hooks/useTheme.cjs");
const GlobalActions_styles = require("./GlobalActions.styles.cjs");
const Typography = require("../Typography/Typography.cjs");
const _interopDefault = (e) => e && e.__esModule ? e : { default: e };
const isString__default = /* @__PURE__ */ _interopDefault(isString);
const getBreakpointStyles = (isUpMd, isSmDown) => isUpMd ? {
  width: `calc(100% - 2 * ${uikitStyles.theme.spacing(4)})`,
  marginLeft: `${uikitStyles.theme.spacing(4)}`,
  marginRight: `${uikitStyles.theme.spacing(4)}`
} : isSmDown ? {
  width: `calc(100% - 2 * ${uikitStyles.theme.spacing(2)})`,
  marginLeft: `${uikitStyles.theme.spacing(2)}`,
  marginRight: `${uikitStyles.theme.spacing(2)}`
} : {};
const HvGlobalActions = (props) => {
  const {
    children,
    classes: classesProp,
    className,
    title,
    variant = "global",
    backButton,
    headingLevel,
    position: positionProp,
    ...others
  } = useDefaultProps.useDefaultProps("HvGlobalActions", props);
  const muiTheme = styles.useTheme();
  const {
    activeTheme
  } = useTheme.useTheme();
  const {
    classes,
    cx,
    css
  } = GlobalActions_styles.useClasses(classesProp);
  const isSmDown = material.useMediaQuery(muiTheme.breakpoints.down("sm"));
  const isUpMd = material.useMediaQuery(muiTheme.breakpoints.up("md"));
  const fixedPositionCss = positionProp === "fixed" && getBreakpointStyles(isUpMd, isSmDown);
  const headingLevelToApply = headingLevel || (variant === "global" ? 1 : 2);
  const position = positionProp || (variant === "global" ? "sticky" : "relative");
  return /* @__PURE__ */ jsxRuntime.jsx("div", { className: cx(classes.root, {
    [classes.positionSticky]: position === "sticky",
    [classes.positionFixed]: position === "fixed",
    [classes.global]: variant === "global"
  }, css(fixedPositionCss), className), ...others, children: /* @__PURE__ */ jsxRuntime.jsxs("div", { className: cx(classes.wrapper, {
    [classes.globalWrapperComplement]: variant === "global",
    [classes.globalSectionArea]: variant === "section"
  }), children: [
    variant === "global" && backButton && /* @__PURE__ */ jsxRuntime.jsx("div", { className: classes.backButton, children: backButton }),
    !isString__default.default(title) ? title : /* @__PURE__ */ jsxRuntime.jsx(Typography.HvTypography, { variant: variant === "global" ? "title3" : activeTheme == null ? void 0 : activeTheme.globalActions.sectionVariant, component: `h${headingLevelToApply}`, className: classes.name, children: title }),
    children && /* @__PURE__ */ jsxRuntime.jsx("div", { className: classes.actions, children })
  ] }) });
};
exports.globalActionsClasses = GlobalActions_styles.staticClasses;
exports.HvGlobalActions = HvGlobalActions;
//# sourceMappingURL=GlobalActions.cjs.map
