"use strict";
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const jsxRuntime = require("@emotion/react/jsx-runtime");
const React = require("react");
const useDefaultProps = require("../../hooks/useDefaultProps.cjs");
const uikitReactIcons = require("@hitachivantara/uikit-react-icons");
const uikitStyles = require("@hitachivantara/uikit-styles");
const MuiAvatar = require("@mui/material/Avatar");
const useImageLoaded = require("../../hooks/useImageLoaded.cjs");
const sizes = require("../../utils/sizes.cjs");
const Avatar_styles = require("./Avatar.styles.cjs");
const _interopDefault = (e) => e && e.__esModule ? e : { default: e };
const MuiAvatar__default = /* @__PURE__ */ _interopDefault(MuiAvatar);
const HvAvatar = React.forwardRef((props, ref) => {
  const {
    className,
    style,
    classes: classesProp,
    children: childrenProp,
    component = "div",
    size = "sm",
    backgroundColor = "secondary",
    color = "atmo1",
    src,
    srcSet,
    sizes: sizes$1,
    alt,
    imgProps,
    status,
    badge,
    variant = "circular",
    avatarProps,
    ...others
  } = useDefaultProps.useDefaultProps("HvAvatar", props);
  const {
    classes,
    cx
  } = Avatar_styles.useClasses(classesProp);
  let children;
  const imageLoaded = useImageLoaded.useImageLoaded(src, srcSet);
  const hasImg = src || srcSet;
  const hasImgNotFailing = hasImg && imageLoaded !== "error";
  if (hasImgNotFailing) {
    children = /* @__PURE__ */ jsxRuntime.jsx("img", { alt, src, srcSet, sizes: sizes$1, className: classes.img, ...imgProps });
  } else if (childrenProp != null) {
    children = childrenProp;
  } else if (hasImg && alt) {
    [children] = alt;
  } else {
    children = /* @__PURE__ */ jsxRuntime.jsx(uikitReactIcons.User, { color, iconSize: sizes.decreaseSize(size), className: classes.fallback });
  }
  const inlineStyle = {
    ...style
  };
  if (component != null && typeof component !== "string") {
    inlineStyle.borderRadius = "50%";
  }
  if (!hasImgNotFailing) {
    inlineStyle.backgroundColor = uikitStyles.getColor(backgroundColor, uikitStyles.theme.colors.secondary);
    inlineStyle.color = uikitStyles.getColor(color, uikitStyles.theme.colors.atmo1);
  }
  const statusInlineStyle = {};
  if (status) {
    const statusColor = uikitStyles.getColor(status, uikitStyles.theme.colors.positive);
    statusInlineStyle.boxShadow = `inset 0px 0px 0px 2px ${statusColor}`;
  }
  const badgeColor = uikitStyles.getColor(badge || "", uikitStyles.theme.colors.positive);
  return /* @__PURE__ */ jsxRuntime.jsx("div", { ref, className: classes.container, ...others, children: /* @__PURE__ */ jsxRuntime.jsxs("div", { className: cx(classes.status, classes[variant], classes[size]), style: statusInlineStyle, children: [
    badge && /* @__PURE__ */ jsxRuntime.jsx("div", { className: classes.badge, style: {
      backgroundColor: badgeColor
    } }),
    /* @__PURE__ */ jsxRuntime.jsx(
      MuiAvatar__default.default,
      {
        component,
        className: cx(classes.root, classes.avatar, classes[size], className),
        style: inlineStyle,
        variant,
        size,
        ...avatarProps,
        children
      }
    )
  ] }) });
});
exports.avatarClasses = Avatar_styles.staticClasses;
exports.HvAvatar = HvAvatar;
//# sourceMappingURL=Avatar.cjs.map
