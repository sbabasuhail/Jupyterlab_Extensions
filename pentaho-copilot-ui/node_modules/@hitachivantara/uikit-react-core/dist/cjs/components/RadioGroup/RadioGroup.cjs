"use strict";
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const jsxRuntime = require("@emotion/react/jsx-runtime");
const React = require("react");
const useDefaultProps = require("../../hooks/useDefaultProps.cjs");
const useUniqueId = require("../../hooks/useUniqueId.cjs");
const useControlled = require("../../hooks/useControlled.cjs");
const setId = require("../../utils/setId.cjs");
const RadioGroup_styles = require("./RadioGroup.styles.cjs");
const FormElement = require("../Forms/FormElement/FormElement.cjs");
const Label = require("../Forms/Label/Label.cjs");
const InfoMessage = require("../Forms/InfoMessage/InfoMessage.cjs");
const WarningText = require("../Forms/WarningText/WarningText.cjs");
const getValueFromSelectedChildren = (children) => {
  var _a, _b, _c, _d;
  const childrenArray = React.Children.toArray(children);
  const childrenCount = childrenArray.length;
  for (let i = 0; i !== childrenCount; i += 1) {
    const child = childrenArray[i];
    const childIsControlled = ((_a = child == null ? void 0 : child.props) == null ? void 0 : _a.checked) !== void 0;
    const childIsSelected = childIsControlled ? (_b = child == null ? void 0 : child.props) == null ? void 0 : _b.checked : (_c = child == null ? void 0 : child.props) == null ? void 0 : _c.defaultChecked;
    if (childIsSelected) {
      return (_d = child == null ? void 0 : child.props) == null ? void 0 : _d.value;
    }
  }
  return null;
};
const HvRadioGroup = (props) => {
  const {
    id,
    classes: classesProp,
    className,
    children,
    name,
    value: valueProp,
    defaultValue,
    label,
    description,
    status,
    statusMessage,
    required = false,
    readOnly = false,
    disabled = false,
    orientation = "vertical",
    "aria-label": ariaLabel,
    "aria-labelledby": ariaLabelledBy,
    "aria-describedby": ariaDescribedBy,
    "aria-errormessage": ariaErrorMessage,
    onChange,
    ...others
  } = useDefaultProps.useDefaultProps("HvRadioGroup", props);
  const {
    classes,
    cx
  } = RadioGroup_styles.useClasses(classesProp);
  const elementId = useUniqueId.useUniqueId(id, "hvradiogroup");
  const [value, setValue] = useControlled.useControlled(valueProp, defaultValue !== void 0 ? defaultValue : (
    // When uncontrolled and no default value is given,
    // extract the initial selected values from the children own state
    () => getValueFromSelectedChildren(children)
  ));
  const onChildChangeInterceptor = React.useCallback((childOnChange, event, isChecked, newValue) => {
    childOnChange == null ? void 0 : childOnChange(event, isChecked, newValue);
    onChange == null ? void 0 : onChange(event, newValue);
    setValue(newValue);
  }, [onChange, setValue]);
  const modifiedChildren = React.useMemo(() => {
    return React.Children.map(children, (child) => {
      var _a, _b, _c, _d, _e;
      const childValue = ((_a = child == null ? void 0 : child.props) == null ? void 0 : _a.value) ?? "on";
      const childIsSelected = childValue === value;
      return React.cloneElement(child, {
        checked: childIsSelected,
        name: ((_b = child == null ? void 0 : child.props) == null ? void 0 : _b.name) || name || elementId,
        onChange: (event, isChecked, newValue) => {
          var _a2;
          return onChildChangeInterceptor((_a2 = child == null ? void 0 : child.props) == null ? void 0 : _a2.onChange, event, isChecked, newValue);
        },
        inputProps: {
          ...(_c = child == null ? void 0 : child.props) == null ? void 0 : _c.inputProps,
          // Set the required attribute directly in the input
          // the radio form element context shouldn't be aware so the
          // label doesn't show redundant asterisk
          required
        },
        disabled: disabled || ((_d = child == null ? void 0 : child.props) == null ? void 0 : _d.disabled),
        readOnly: readOnly || ((_e = child == null ? void 0 : child.props) == null ? void 0 : _e.readOnly)
      });
    });
  }, [children, disabled, elementId, name, onChildChangeInterceptor, readOnly, required, value]);
  const canShowError = ariaErrorMessage == null && (status !== void 0 && statusMessage !== void 0 || status === void 0 && required);
  const errorMessageId = canShowError ? setId.setId(elementId, "error") : ariaErrorMessage;
  return /* @__PURE__ */ jsxRuntime.jsxs(FormElement.HvFormElement, { id, name, status: status || "standBy", disabled, required, readOnly, className: cx(classes.root, className), children: [
    label && /* @__PURE__ */ jsxRuntime.jsx(Label.HvLabel, { id: setId.setId(elementId, "label"), label, className: classes.label }),
    description && /* @__PURE__ */ jsxRuntime.jsx(InfoMessage.HvInfoMessage, { id: setId.setId(elementId, "description"), children: description }),
    /* @__PURE__ */ jsxRuntime.jsx("div", { role: "radiogroup", "aria-label": ariaLabel, "aria-labelledby": ariaLabelledBy || label && setId.setId(elementId, "label") || void 0, "aria-invalid": status === "invalid" ? true : void 0, "aria-errormessage": status === "invalid" ? errorMessageId : void 0, "aria-describedby": [description && setId.setId(elementId, "description"), ariaDescribedBy].join(" ").trim() || void 0, className: cx(classes.group, {
      [classes.vertical]: orientation === "vertical",
      [classes.horizontal]: orientation === "horizontal",
      [classes.invalid]: status === "invalid"
    }), ...others, children: modifiedChildren }),
    canShowError && /* @__PURE__ */ jsxRuntime.jsx(WarningText.HvWarningText, { id: setId.setId(elementId, "error"), disableBorder: true, className: classes.error, children: statusMessage })
  ] });
};
exports.radioGroupClasses = RadioGroup_styles.staticClasses;
exports.HvRadioGroup = HvRadioGroup;
//# sourceMappingURL=RadioGroup.cjs.map
