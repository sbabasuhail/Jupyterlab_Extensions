"use strict";
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const jsxRuntime = require("@emotion/react/jsx-runtime");
const React = require("react");
const useDefaultProps = require("../../../hooks/useDefaultProps.cjs");
const useTheme = require("../../../hooks/useTheme.cjs");
const useUniqueId = require("../../../hooks/useUniqueId.cjs");
const keyboardUtils = require("../../../utils/keyboardUtils.cjs");
const setId = require("../../../utils/setId.cjs");
const hexToRgbA = require("../../../utils/hexToRgbA.cjs");
const ScrollToVertical_styles = require("./ScrollToVertical.styles.cjs");
const useScrollTo = require("../useScrollTo.cjs");
const withTooltip = require("../withTooltip.cjs");
const VerticalScrollListItem = require("./VerticalScrollListItem/VerticalScrollListItem.cjs");
const HvScrollToVertical = (props) => {
  const {
    id,
    defaultSelectedIndex = 0,
    scrollElementId,
    href = true,
    onChange,
    onClick,
    onEnter,
    className,
    classes: classesProp,
    options,
    offset = 0,
    position = "relative",
    tooltipPosition = "left",
    style,
    ...others
  } = useDefaultProps.useDefaultProps("HvScrollToVertical", props);
  const {
    classes,
    css,
    cx
  } = ScrollToVertical_styles.useClasses(classesProp);
  const {
    activeTheme,
    colors
  } = useTheme.useTheme();
  const elementId = useUniqueId.useUniqueId(id, "hvVerticalScrollto");
  const [selectedIndex, setScrollTo] = useScrollTo.useScrollTo(defaultSelectedIndex, scrollElementId, href, offset, options, onChange);
  const handleSelection = (event, value, index) => {
    event.preventDefault();
    const wrappedOnChange = () => {
      onChange == null ? void 0 : onChange(event, index);
    };
    setScrollTo(event, value, index, wrappedOnChange);
  };
  const tooltipWrappers = React.useMemo(() => {
    return options.map((option) => {
      return withTooltip.withTooltip(option.label, "div", tooltipPosition, false);
    });
  }, [options, tooltipPosition]);
  const tabs = options.map((option, index) => {
    const selected = selectedIndex === index;
    const tooltipWrapper = tooltipWrappers[index];
    return /* @__PURE__ */ jsxRuntime.jsx(VerticalScrollListItem.HvVerticalScrollListItem, { id: setId.setId(elementId, `item-${index}`), onClick: (event) => {
      handleSelection(event, option.value, index);
      onClick == null ? void 0 : onClick(event, index);
    }, onKeyDown: (event) => {
      if (keyboardUtils.isKey(event, "Enter") === true) {
        handleSelection(event, option.value, index);
        onEnter == null ? void 0 : onEnter(event, index);
      }
    }, tooltipWrapper, selected, "aria-label": option.label }, option.key || option.label);
  });
  const positionOffset = ScrollToVertical_styles.calculateOffset(options.length);
  const backgroundColor = hexToRgbA.hexToRgbA(colors == null ? void 0 : colors.atmo2, activeTheme == null ? void 0 : activeTheme.scrollTo.backgroundColorOpacity);
  return /* @__PURE__ */ jsxRuntime.jsx("ol", { className: cx(css({
    backgroundColor
  }), classes.root, {
    [classes.positionFixed]: position === "fixed",
    [classes.positionAbsolute]: position === "absolute"
  }, className), style: {
    top: `calc(50% - ${positionOffset}px)`,
    ...style
  }, id: elementId, ...others, children: tabs });
};
exports.scrollToVerticalClasses = ScrollToVertical_styles.staticClasses;
exports.HvScrollToVertical = HvScrollToVertical;
//# sourceMappingURL=ScrollToVertical.cjs.map
