"use strict";
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const jsxRuntime = require("@emotion/react/jsx-runtime");
const setId = require("../../../../utils/setId.cjs");
const HorizontalScrollListItem_styles = require("./HorizontalScrollListItem.styles.cjs");
const HvHorizontalScrollListItem = ({
  id,
  className,
  classes: classesProp,
  selected,
  children,
  onClick,
  onKeyDown,
  tooltipWrapper,
  ...others
}) => {
  const {
    classes,
    cx
  } = HorizontalScrollListItem_styles.useClasses(classesProp);
  const variant = selected ? "label" : "body";
  const labelId = setId.setId(id, "label");
  const buttonId = setId.setId(id, "button");
  const Tooltip = tooltipWrapper;
  return /* @__PURE__ */ jsxRuntime.jsx("li", { id, className: cx(classes.root, className), "aria-current": selected, children: /* @__PURE__ */ jsxRuntime.jsx("div", { id: buttonId, role: "button", tabIndex: 0, onClick, onKeyDown, className: classes.button, "aria-labelledby": labelId, ...others, children: /* @__PURE__ */ jsxRuntime.jsx(Tooltip, { id: labelId, className: cx(classes.text, {
    [classes.selected]: selected
  }), variant, children }) }) });
};
exports.horizontalScrollListItemClasses = HorizontalScrollListItem_styles.staticClasses;
exports.HvHorizontalScrollListItem = HvHorizontalScrollListItem;
//# sourceMappingURL=HorizontalScrollListItem.cjs.map
