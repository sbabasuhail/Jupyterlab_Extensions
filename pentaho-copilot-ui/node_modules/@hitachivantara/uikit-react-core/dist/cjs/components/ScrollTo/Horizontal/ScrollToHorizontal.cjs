"use strict";
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const jsxRuntime = require("@emotion/react/jsx-runtime");
const React = require("react");
const useDefaultProps = require("../../../hooks/useDefaultProps.cjs");
const styles = require("@mui/material/styles");
const material = require("@mui/material");
const uikitStyles = require("@hitachivantara/uikit-styles");
const uikitReactIcons = require("@hitachivantara/uikit-react-icons");
const useUniqueId = require("../../../hooks/useUniqueId.cjs");
const useTheme = require("../../../hooks/useTheme.cjs");
const keyboardUtils = require("../../../utils/keyboardUtils.cjs");
const setId = require("../../../utils/setId.cjs");
const hexToRgbA = require("../../../utils/hexToRgbA.cjs");
const withTooltip = require("../withTooltip.cjs");
const useScrollTo = require("../useScrollTo.cjs");
const ScrollToHorizontal_styles = require("./ScrollToHorizontal.styles.cjs");
const HorizontalScrollListItem = require("./HorizontalScrollListItem/HorizontalScrollListItem.cjs");
const HvScrollToHorizontal = (props) => {
  const {
    id,
    defaultSelectedIndex = 0,
    scrollElementId,
    href = true,
    onChange,
    onClick,
    onEnter,
    className,
    classes: classesProp,
    options,
    offset = 0,
    position = "relative",
    tooltipPosition = "top",
    ...others
  } = useDefaultProps.useDefaultProps("HvScrollToHorizontal", props);
  const {
    classes,
    css,
    cx
  } = ScrollToHorizontal_styles.useClasses(classesProp);
  const muiTheme = styles.useTheme();
  const downSm = material.useMediaQuery(muiTheme.breakpoints.down("sm"));
  const upMd = material.useMediaQuery(muiTheme.breakpoints.up("md"));
  const {
    activeTheme,
    colors
  } = useTheme.useTheme();
  const elementId = useUniqueId.useUniqueId(id, "hvHorizontalScrollto");
  const [selectedIndex, setScrollTo] = useScrollTo.useScrollTo(defaultSelectedIndex, scrollElementId, href, offset, options, onChange);
  const handleSelection = (event, value, index) => {
    event.preventDefault();
    const wrappedOnChange = () => {
      onChange == null ? void 0 : onChange(event, index);
    };
    setScrollTo(event, value, index, wrappedOnChange);
  };
  const tooltipWrappers = React.useMemo(() => {
    return options.map((option) => {
      return withTooltip.withTooltip(option.label, "div", tooltipPosition);
    });
  }, [options, tooltipPosition]);
  const NotSelected = React.useCallback(() => {
    return /* @__PURE__ */ jsxRuntime.jsx("div", { className: classes.notSelectedRoot, children: /* @__PURE__ */ jsxRuntime.jsx("div", { className: classes.notSelected }) });
  }, [classes.notSelectedRoot, classes.notSelected]);
  const Selected = React.useCallback(() => {
    return /* @__PURE__ */ jsxRuntime.jsx(uikitReactIcons.CurrentStep, { height: activeTheme == null ? void 0 : activeTheme.scrollTo.dotSelectedSize, width: activeTheme == null ? void 0 : activeTheme.scrollTo.dotSelectedSize, className: classes.selected });
  }, [classes.selected, activeTheme == null ? void 0 : activeTheme.scrollTo.dotSelectedSize]);
  const tabs = options.map((option, index) => {
    const selected = selectedIndex === index;
    const tooltipWrapper = tooltipWrappers[index];
    return /* @__PURE__ */ jsxRuntime.jsxs(HorizontalScrollListItem.HvHorizontalScrollListItem, { id: setId.setId(elementId, `item-${index}`), onClick: (event) => {
      handleSelection(event, option.value, index);
      onClick == null ? void 0 : onClick(event, index);
    }, onKeyDown: (event) => {
      if (keyboardUtils.isKey(event, "Enter") === true) {
        handleSelection(event, option.value, index);
        onEnter == null ? void 0 : onEnter(event, index);
      }
    }, tooltipWrapper, selected, children: [
      /* @__PURE__ */ jsxRuntime.jsx("p", { children: option.label }),
      selected ? /* @__PURE__ */ jsxRuntime.jsx(Selected, {}) : /* @__PURE__ */ jsxRuntime.jsx(NotSelected, {})
    ] }, option.key || option.label);
  });
  return /* @__PURE__ */ jsxRuntime.jsx("ol", { className: cx(css({
    width: position === "fixed" && (upMd || downSm) ? `calc(100% - 2*${uikitStyles.theme.spacing(upMd ? 4 : 2)})` : "100%",
    marginTop: 0,
    marginBottom: 0,
    marginRight: position === "fixed" && (upMd || downSm) ? uikitStyles.theme.spacing(upMd ? 4 : 2) : 0,
    marginLeft: position === "fixed" && (upMd || downSm) ? uikitStyles.theme.spacing(upMd ? 4 : 2) : 0,
    backgroundColor: hexToRgbA.hexToRgbA(colors == null ? void 0 : colors.atmo2, activeTheme == null ? void 0 : activeTheme.scrollTo.backgroundColorOpacity)
  }), classes.root, {
    [classes.positionSticky]: position === "sticky",
    [classes.positionFixed]: position === "fixed"
  }, className), id: elementId, ...others, children: tabs });
};
exports.scrollToHorizontalClasses = ScrollToHorizontal_styles.staticClasses;
exports.HvScrollToHorizontal = HvScrollToHorizontal;
//# sourceMappingURL=ScrollToHorizontal.cjs.map
