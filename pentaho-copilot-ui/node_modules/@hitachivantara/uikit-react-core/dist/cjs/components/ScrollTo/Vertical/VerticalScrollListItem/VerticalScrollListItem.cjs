"use strict";
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const jsxRuntime = require("@emotion/react/jsx-runtime");
const uikitReactIcons = require("@hitachivantara/uikit-react-icons");
const setId = require("../../../../utils/setId.cjs");
const useTheme = require("../../../../hooks/useTheme.cjs");
const VerticalScrollListItem_styles = require("./VerticalScrollListItem.styles.cjs");
const HvVerticalScrollListItem = ({
  id,
  className,
  classes: classesProp,
  selected,
  "aria-label": ariaLabel,
  onClick,
  onKeyDown,
  tooltipWrapper,
  ...others
}) => {
  const {
    classes,
    cx
  } = VerticalScrollListItem_styles.useClasses(classesProp);
  const {
    activeTheme
  } = useTheme.useTheme();
  const variant = selected ? "label" : "body";
  const labelId = setId.setId(id, "label");
  const buttonId = setId.setId(id, "button");
  const Tooltip = tooltipWrapper;
  const icon = selected ? /* @__PURE__ */ jsxRuntime.jsx(uikitReactIcons.CurrentStep, { height: activeTheme == null ? void 0 : activeTheme.scrollTo.dotSelectedSize, width: activeTheme == null ? void 0 : activeTheme.scrollTo.dotSelectedSize }) : /* @__PURE__ */ jsxRuntime.jsx("div", { className: cx(classes.notSelected) });
  return /* @__PURE__ */ jsxRuntime.jsx("li", { id, className: cx(classes.root, className), "aria-current": selected, children: /* @__PURE__ */ jsxRuntime.jsx("div", { id: buttonId, role: "button", tabIndex: 0, onClick, onKeyDown, className: classes.button, "aria-label": ariaLabel, "aria-labelledby": labelId, ...others, children: /* @__PURE__ */ jsxRuntime.jsx(Tooltip, { id: labelId, className: classes.text, variant, children: icon }) }) });
};
exports.verticalScrollListItemClasses = VerticalScrollListItem_styles.staticClasses;
exports.HvVerticalScrollListItem = HvVerticalScrollListItem;
//# sourceMappingURL=VerticalScrollListItem.cjs.map
