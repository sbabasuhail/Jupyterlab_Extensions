"use strict";
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const getScrollTop = (c = window) => {
  if (c === window) {
    return window.scrollY || window.pageYOffset || document.documentElement && document.documentElement.scrollTop || document.body.scrollTop;
  }
  return c.scrollTop;
};
const verticalScrollOffset = (t, c = window) => {
  var _a;
  if (c === window) {
    return (((_a = t == null ? void 0 : t.getBoundingClientRect) == null ? void 0 : _a.call(t).top) || 0) + (window.scrollY || window.pageYOffset);
  }
  if (getComputedStyle(c).position !== "static") {
    return t.offsetTop;
  }
  return t.offsetTop - c.offsetTop;
};
const horizontalScrollOffset = (t, c = window) => {
  var _a;
  if (c === window) {
    return (((_a = t == null ? void 0 : t.getBoundingClientRect) == null ? void 0 : _a.call(t).left) || 0) + (window.scrollX || window.pageXOffset);
  }
  if (getComputedStyle(c).position !== "static") {
    return t.offsetLeft;
  }
  return t.offsetLeft - c.offsetLeft;
};
const scrollElement = (element, container, offset = 0, direction) => {
  var _a, _b;
  if (direction === "row") {
    const elemLeft = horizontalScrollOffset(element, container);
    (_a = container == null ? void 0 : container.scrollTo) == null ? void 0 : _a.call(container, {
      left: elemLeft - offset,
      behavior: "smooth"
    });
  } else {
    const elemTop = verticalScrollOffset(element, container);
    (_b = container == null ? void 0 : container.scrollTo) == null ? void 0 : _b.call(container, {
      top: elemTop - offset,
      behavior: "smooth"
    });
  }
  element.focus({
    preventScroll: true
  });
};
const isScrolledToTheBottom = (container) => {
  const containerScrollTop = getScrollTop(container);
  if (container === window) {
    const scrollHeight = document.documentElement && document.documentElement.scrollHeight || document.body.scrollHeight;
    return containerScrollTop + window.innerHeight >= scrollHeight;
  }
  return containerScrollTop + container.offsetHeight >= container.scrollHeight;
};
const findFirstVisibleElement = (container, options, offset) => {
  const boundsTop = verticalScrollOffset(container);
  let i = 0;
  for (; i < options.length; i += 1) {
    const ele = document.getElementById(options[i].value);
    if (ele) {
      const elemTop = verticalScrollOffset(ele) - (options[i].offset || offset);
      if (elemTop > boundsTop) {
        break;
      }
    }
  }
  return i - 1;
};
exports.findFirstVisibleElement = findFirstVisibleElement;
exports.getScrollTop = getScrollTop;
exports.horizontalScrollOffset = horizontalScrollOffset;
exports.isScrolledToTheBottom = isScrolledToTheBottom;
exports.scrollElement = scrollElement;
exports.verticalScrollOffset = verticalScrollOffset;
//# sourceMappingURL=utils.cjs.map
