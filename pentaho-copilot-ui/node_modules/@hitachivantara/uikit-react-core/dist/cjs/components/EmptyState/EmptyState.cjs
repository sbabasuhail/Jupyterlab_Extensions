"use strict";
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const jsxRuntime = require("@emotion/react/jsx-runtime");
const styles = require("@mui/material/styles");
const useMediaQuery = require("@mui/material/useMediaQuery");
const uikitStyles = require("@hitachivantara/uikit-styles");
const useDefaultProps = require("../../hooks/useDefaultProps.cjs");
const useTheme = require("../../hooks/useTheme.cjs");
const EmptyState_styles = require("./EmptyState.styles.cjs");
const Typography = require("../Typography/Typography.cjs");
const _interopDefault = (e) => e && e.__esModule ? e : { default: e };
const useMediaQuery__default = /* @__PURE__ */ _interopDefault(useMediaQuery);
const HvEmptyState = (props) => {
  const {
    action,
    icon,
    title,
    message,
    classes: classesProp,
    className,
    ...others
  } = useDefaultProps.useDefaultProps("HvEmptyState", props);
  const {
    classes,
    cx,
    css
  } = EmptyState_styles.useClasses(classesProp);
  const {
    activeTheme
  } = useTheme.useTheme();
  const muiTheme = styles.useTheme();
  const onlyXs = useMediaQuery__default.default(muiTheme.breakpoints.only("xs"));
  const upSm = useMediaQuery__default.default(muiTheme.breakpoints.up("sm"));
  const messageOnly = !!(message && !(title || action));
  const renderNode = (variant, node, style) => node && /* @__PURE__ */ jsxRuntime.jsx(Typography.HvTypography, { variant, className: style, children: node });
  return /* @__PURE__ */ jsxRuntime.jsx("div", { className: cx(classes.root, className), ...others, children: /* @__PURE__ */ jsxRuntime.jsxs("div", { className: cx(classes.container, onlyXs && css({
    flexDirection: "column",
    alignItems: "center",
    textAlign: "center"
  }), {
    [classes.containerMessageOnly]: messageOnly
  }, onlyXs && messageOnly && css({
    flexDirection: "row"
  })), children: [
    /* @__PURE__ */ jsxRuntime.jsx("div", { className: classes.iconContainer, children: icon }),
    /* @__PURE__ */ jsxRuntime.jsxs("div", { className: cx(classes.textContainer, upSm && css({
      marginLeft: uikitStyles.theme.space.xs
    })), children: [
      renderNode(activeTheme == null ? void 0 : activeTheme.emptyState.titleVariant, title, classes.titleContainer),
      renderNode("body", message, classes.messageContainer),
      renderNode("body", action, classes.actionContainer)
    ] })
  ] }) });
};
exports.emptyStateClasses = EmptyState_styles.staticClasses;
exports.HvEmptyState = HvEmptyState;
//# sourceMappingURL=EmptyState.cjs.map
