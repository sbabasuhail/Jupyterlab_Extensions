{"version":3,"file":"RightControl.cjs","sources":["../../../../../src/components/Controls/RightControl/RightControl.tsx"],"sourcesContent":["import { useContext, useState } from \"react\";\n\nimport { HvBaseProps } from \"@core/types/generic\";\nimport { setId } from \"@core/utils/setId\";\nimport { HvDropdown, HvDropdownProps } from \"@core/components/Dropdown\";\nimport { HvListValue } from \"@core/components/List\";\nimport { ExtractNames } from \"@core/utils/classes\";\n\nimport { useClasses, staticClasses } from \"./RightControl.styles\";\nimport { HvControlsContext } from \"../context/ControlsContext\";\n\nexport { staticClasses as rightControlClasses };\n\nexport type HvRightControlClasses = ExtractNames<typeof useClasses>;\n\nexport interface HvRightListControls extends HvListValue {\n  accessor: string;\n  desc: boolean;\n}\n\nexport interface HvRightControlProps extends HvBaseProps {\n  /** if `true` the hide sort by dropdown is not rendered */\n  hideSortBy?: boolean;\n  /** options for the dropdown to sort */\n  values?: HvRightListControls[];\n  /** Callback called when a sort action occurs */\n  onSort?: (selected: HvRightListControls | undefined) => void;\n  /** Extra props passed to dropdown */\n  sortProps?: HvDropdownProps;\n  /** A Jss Object used to override or extend the styles applied to the component. */\n  classes?: HvRightControlClasses;\n}\n\nexport const HvRightControl = ({\n  id,\n  classes: classesProp,\n  className,\n  children,\n  values,\n  onSort,\n  hideSortBy = false,\n  sortProps,\n  ...others\n}: HvRightControlProps) => {\n  const { classes, cx } = useClasses(classesProp);\n\n  const [dropDownValues, setDropdownValues] = useState(values);\n\n  const { onSort: onSortHandler } = useContext(HvControlsContext);\n\n  const handleChangeSort: HvDropdownProps[\"onChange\"] = (value: any) => {\n    onSort?.(value);\n    onSortHandler?.(value);\n    // this should be changed when dropdown changes his \"values\" behavior\n    setDropdownValues((prevValues) =>\n      prevValues?.map((prevValue) => ({\n        ...prevValue,\n        selected: prevValue.id === value.id,\n      }))\n    );\n  };\n\n  return (\n    <div id={id} className={cx(classes.root, className)} {...others}>\n      {!hideSortBy && (\n        <HvDropdown\n          id={setId(id, \"sort-by-dropdown\")}\n          values={dropDownValues}\n          className={classes.sortDropdown}\n          onChange={handleChangeSort}\n          singleSelectionToggle={false}\n          {...sortProps}\n        />\n      )}\n      {children}\n    </div>\n  );\n};\n"],"names":["HvRightControl","id","classes","classesProp","className","children","values","onSort","hideSortBy","sortProps","others","cx","useClasses","dropDownValues","setDropdownValues","useState","onSortHandler","useContext","HvControlsContext","handleChangeSort","value","prevValues","map","prevValue","selected","jsxs","root","jsx","HvDropdown","setId","sortDropdown"],"mappings":";;;;;;;;AAiCO,MAAMA,iBAAiBA,CAAC;AAAA,EAC7BC;AAAAA,EACAC,SAASC;AAAAA,EACTC;AAAAA,EACAC;AAAAA,EACAC;AAAAA,EACAC;AAAAA,EACAC,aAAa;AAAA,EACbC;AAAAA,EACA,GAAGC;AACgB,MAAM;AACnB,QAAA;AAAA,IAAER;AAAAA,IAASS;AAAAA,EAAAA,IAAOC,oBAAAA,WAAWT,WAAW;AAE9C,QAAM,CAACU,gBAAgBC,iBAAiB,IAAIC,eAAST,MAAM;AAErD,QAAA;AAAA,IAAEC,QAAQS;AAAAA,EAAAA,IAAkBC,MAAAA,WAAWC,gBAAAA,iBAAiB;AAExDC,QAAAA,mBAAgDA,CAACC,UAAe;AACpEb,qCAASa;AACTJ,mDAAgBI;AAEGC,sBAAAA,CAAAA,eACjBA,yCAAYC,IAAKC,CAAe,eAAA;AAAA,MAC9B,GAAGA;AAAAA,MACHC,UAAUD,UAAUtB,OAAOmB,MAAMnB;AAAAA,OAErC;AAAA,EAAA;AAIA,SAAAwB,gCAAC,OAAI,EAAA,IAAQ,WAAWd,GAAGT,QAAQwB,MAAMtB,SAAS,GAAOM,GAAAA,QACtD,UAAA;AAAA,IAAA,CAACF,cACCmB,2BAAA,IAAAC,qBAAA,EACC,IAAIC,YAAM5B,IAAI,kBAAkB,GAChC,QAAQY,gBACR,WAAWX,QAAQ4B,cACnB,UAAUX,kBACV,uBAAuB,OACvB,GAAIV,WAEP;AAAA,IACAJ;AAAAA,EACH,EAAA,CAAA;AAEJ;;;"}