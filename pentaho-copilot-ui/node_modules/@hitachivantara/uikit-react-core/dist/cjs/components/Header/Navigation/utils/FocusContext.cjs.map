{"version":3,"file":"FocusContext.cjs","sources":["../../../../../../src/components/Header/Navigation/utils/FocusContext.tsx"],"sourcesContent":["import React, { createContext, useMemo, useReducer } from \"react\";\n\ninterface SetItemFocused {\n  type: \"setItemFocused\";\n  itemFocused: EventTarget & Element;\n}\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case \"setItemFocused\":\n      return { itemFocused: action.itemFocused };\n    default:\n      return state;\n  }\n};\n\nconst initialState = { itemFocused: undefined, dispatch: undefined };\n\nexport const FocusContext = createContext<{\n  itemFocused?: EventTarget & Element;\n  dispatch?: React.Dispatch<SetItemFocused>;\n}>(initialState);\n\nexport const FocusProvider = (props) => {\n  const [state, dispatch] = useReducer(reducer, initialState);\n  const contextValue = useMemo(\n    () => ({ ...state, dispatch }),\n    [state, dispatch]\n  );\n  const { children } = props;\n\n  return (\n    <FocusContext.Provider value={contextValue}>\n      {children}\n    </FocusContext.Provider>\n  );\n};\n"],"names":["reducer","state","action","type","itemFocused","initialState","undefined","dispatch","FocusContext","createContext","FocusProvider","props","useReducer","contextValue","useMemo","children"],"mappings":";;;;AAOA,MAAMA,UAAUA,CAACC,OAAOC,WAAW;AACjC,UAAQA,OAAOC,MAAI;AAAA,IACjB,KAAK;AACI,aAAA;AAAA,QAAEC,aAAaF,OAAOE;AAAAA,MAAAA;AAAAA,IAC/B;AACSH,aAAAA;AAAAA,EACX;AACF;AAEA,MAAMI,eAAe;AAAA,EAAED,aAAaE;AAAAA,EAAWC,UAAUD;AAAU;AAEtDE,MAAAA,eAAeC,oBAGzBJ,YAAY;AAER,MAAMK,gBAAiBC,CAAU,UAAA;AACtC,QAAM,CAACV,OAAOM,QAAQ,IAAIK,MAAAA,WAAWZ,SAASK,YAAY;AACpDQ,QAAAA,eAAeC,MAAAA,QACnB,OAAO;AAAA,IAAE,GAAGb;AAAAA,IAAOM;AAAAA,EACnB,IAAA,CAACN,OAAOM,QAAQ,CAClB;AACM,QAAA;AAAA,IAAEQ;AAAAA,EAAaJ,IAAAA;AAErB,wCACG,aAAa,UAAb,EAAsB,OAAOE,cAC3BE,SACH,CAAA;AAEJ;;;"}