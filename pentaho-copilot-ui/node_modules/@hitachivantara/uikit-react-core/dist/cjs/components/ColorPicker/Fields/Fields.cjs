"use strict";
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const jsxRuntime = require("@emotion/react/jsx-runtime");
const React = require("react");
const color = require("react-color/lib/helpers/color");
const Fields_styles = require("./Fields.styles.cjs");
const Input = require("../../Input/Input.cjs");
function _interopNamespace(e) {
  if (e && e.__esModule)
    return e;
  const n = Object.create(null, { [Symbol.toStringTag]: { value: "Module" } });
  if (e) {
    for (const k in e) {
      if (k !== "default") {
        const d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: () => e[k]
        });
      }
    }
  }
  n.default = e;
  return Object.freeze(n);
}
const color__namespace = /* @__PURE__ */ _interopNamespace(color);
const Fields = ({
  className,
  onChange,
  rgb,
  hex,
  classes: classesProp
}) => {
  const {
    classes,
    cx
  } = Fields_styles.useClasses(classesProp);
  const [internalHex, setInternalHex] = React.useState(hex);
  const [internalRed, setInternalRed] = React.useState(rgb == null ? void 0 : rgb.r);
  const [internalGreen, setInternalGreen] = React.useState(rgb == null ? void 0 : rgb.g);
  const [internalBlue, setInternalBlue] = React.useState(rgb == null ? void 0 : rgb.b);
  const hexInputRef = React.useRef(null);
  const redInputRef = React.useRef(null);
  const greenInputRef = React.useRef(null);
  const blueInputRef = React.useRef(null);
  React.useEffect(() => {
    if (document.activeElement !== hexInputRef.current) {
      setInternalHex(hex);
    }
  }, [hex]);
  React.useEffect(() => {
    if (document.activeElement !== redInputRef.current) {
      setInternalRed(rgb == null ? void 0 : rgb.r);
    }
    if (document.activeElement !== greenInputRef.current) {
      setInternalGreen(rgb == null ? void 0 : rgb.g);
    }
    if (document.activeElement !== blueInputRef.current) {
      setInternalBlue(rgb == null ? void 0 : rgb.b);
    }
  }, [rgb]);
  const handleChange = (data, event) => {
    if (data.hex && color__namespace.isValidHex(data.hex)) {
      onChange({
        hex: data.hex,
        source: "hex"
      }, event);
    } else if (data.r || data.g || data.b) {
      onChange({
        r: data.r || (rgb == null ? void 0 : rgb.r),
        g: data.g || (rgb == null ? void 0 : rgb.g),
        b: data.b || (rgb == null ? void 0 : rgb.b),
        source: "rgb"
      }, event);
    }
  };
  const onChangeHex = (event, value) => {
    setInternalHex(value);
    handleChange({
      hex: value
    }, event);
  };
  const onChangeRbg = (event, value, colorPart) => {
    if (colorPart === "r")
      setInternalRed(Number(value));
    if (colorPart === "g")
      setInternalGreen(Number(value));
    if (colorPart === "b")
      setInternalBlue(Number(value));
    handleChange({
      r: colorPart === "r" ? Number(value) : rgb == null ? void 0 : rgb.r,
      g: colorPart === "g" ? Number(value) : rgb == null ? void 0 : rgb.g,
      b: colorPart === "b" ? Number(value) : rgb == null ? void 0 : rgb.b
    }, event);
  };
  return /* @__PURE__ */ jsxRuntime.jsxs("div", { className: cx(classes.fields, className), children: [
    /* @__PURE__ */ jsxRuntime.jsx(Input.HvInput, { ref: hexInputRef, className: classes.double, label: "HEX", value: internalHex == null ? void 0 : internalHex.replace("#", ""), onChange: onChangeHex, onBlur: () => setInternalHex(hex), disableClear: true }),
    /* @__PURE__ */ jsxRuntime.jsx(Input.HvInput, { ref: redInputRef, className: classes.single, label: "R", value: `${internalRed}`, onChange: (event, value) => onChangeRbg(event, value, "r"), onBlur: () => setInternalRed(rgb == null ? void 0 : rgb.r), disableClear: true }),
    /* @__PURE__ */ jsxRuntime.jsx(Input.HvInput, { ref: greenInputRef, className: classes.single, label: "G", value: `${internalGreen}`, onChange: (event, value) => onChangeRbg(event, value, "g"), onBlur: () => setInternalGreen(rgb == null ? void 0 : rgb.g), disableClear: true }),
    /* @__PURE__ */ jsxRuntime.jsx(Input.HvInput, { ref: blueInputRef, className: classes.single, label: "B", value: `${internalBlue}`, onChange: (event, value) => onChangeRbg(event, value, "b"), onBlur: () => setInternalBlue(rgb == null ? void 0 : rgb.b), disableClear: true })
  ] });
};
exports.colorPickerFieldsClasses = Fields_styles.staticClasses;
exports.Fields = Fields;
//# sourceMappingURL=Fields.cjs.map
