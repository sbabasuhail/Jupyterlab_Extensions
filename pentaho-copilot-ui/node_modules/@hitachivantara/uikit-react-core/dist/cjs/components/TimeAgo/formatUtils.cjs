"use strict";
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const dayjs = require("dayjs");
const calendar = require("dayjs/plugin/calendar");
const duration = require("dayjs/plugin/duration");
const localeData = require("dayjs/plugin/localeData");
const localizedFormat = require("dayjs/plugin/localizedFormat");
const relativeTime = require("dayjs/plugin/relativeTime");
const updateLocale = require("dayjs/plugin/updateLocale");
const _interopDefault = (e) => e && e.__esModule ? e : { default: e };
const dayjs__default = /* @__PURE__ */ _interopDefault(dayjs);
const calendar__default = /* @__PURE__ */ _interopDefault(calendar);
const duration__default = /* @__PURE__ */ _interopDefault(duration);
const localeData__default = /* @__PURE__ */ _interopDefault(localeData);
const localizedFormat__default = /* @__PURE__ */ _interopDefault(localizedFormat);
const relativeTime__default = /* @__PURE__ */ _interopDefault(relativeTime);
const updateLocale__default = /* @__PURE__ */ _interopDefault(updateLocale);
const thresholds = [{
  l: "s",
  r: 119,
  d: "second"
}, {
  l: "m",
  r: 1
}, {
  l: "mm",
  r: 59,
  d: "minute"
}, {
  l: "h",
  r: 1
}, {
  l: "hh",
  r: 23,
  d: "hour"
}, {
  l: "d",
  r: 1
}, {
  l: "dd",
  r: 29,
  d: "day"
}, {
  l: "M",
  r: 1
}, {
  l: "MM",
  r: 11,
  d: "month"
}, {
  l: "y",
  r: 17
}, {
  l: "yy",
  d: "year"
}];
dayjs__default.default.extend(localeData__default.default);
dayjs__default.default.extend(duration__default.default);
dayjs__default.default.extend(calendar__default.default);
dayjs__default.default.extend(localizedFormat__default.default);
dayjs__default.default.extend(relativeTime__default.default, {
  thresholds
});
dayjs__default.default.extend(updateLocale__default.default);
const secondsUntilNextDay = (date = /* @__PURE__ */ new Date()) => {
  const midnight = new Date(date.getTime());
  midnight.setDate(midnight.getDate() + 1);
  midnight.setHours(0);
  midnight.setMinutes(0);
  midnight.setSeconds(0);
  midnight.setMilliseconds(0);
  return (midnight.getTime() - date.getTime()) / 1e3;
};
const secondsUntilNextWeek = (date = /* @__PURE__ */ new Date()) => {
  const firstMonthDayOfWeek = date.getDate() - date.getDay();
  const firstMonthDayOfNextWeek = firstMonthDayOfWeek + 7;
  const firstDayNextWeek = new Date(date.getTime());
  firstDayNextWeek.setDate(firstMonthDayOfNextWeek);
  firstDayNextWeek.setHours(0);
  firstDayNextWeek.setMinutes(0);
  firstDayNextWeek.setSeconds(0);
  firstDayNextWeek.setMilliseconds(0);
  return (firstDayNextWeek.getTime() - date.getTime()) / 1e3;
};
const formatTimeAgo = (date, locale, showSeconds = false, referenceDate = /* @__PURE__ */ new Date()) => {
  const dayReferenceDate = dayjs__default.default(referenceDate);
  const dayDate = dayjs__default.default(date).locale(locale);
  const dayDiffSeconds = dayReferenceDate.diff(dayDate, "second");
  const formatUseSeconds = showSeconds ? "LTS" : "LT";
  if (date.getTime() > referenceDate.getTime()) {
    return {
      timeAgo: dayDate.format(`L ${formatUseSeconds}`),
      delay: (date.getTime() - referenceDate.getTime()) / 1e3
    };
  }
  if (dayDiffSeconds < 120) {
    return {
      timeAgo: dayjs__default.default.duration(dayDiffSeconds, "second").locale(locale).humanize(),
      delay: 120 - dayDiffSeconds
    };
  }
  const dayDiffMinutes = dayReferenceDate.diff(dayDate, "minute");
  if (dayDiffMinutes < 60) {
    return {
      timeAgo: dayjs__default.default.duration(-dayDiffMinutes, "minute").locale(locale).humanize(true),
      delay: 60 * (dayDiffMinutes + 1) - dayDiffSeconds
    };
  }
  if (dayReferenceDate.isSame(dayDate, "day")) {
    return {
      timeAgo: `${dayDate.calendar(dayReferenceDate)}`,
      delay: secondsUntilNextDay(referenceDate)
    };
  }
  if (dayReferenceDate.subtract(1, "day").isSame(dayDate, "day")) {
    return {
      timeAgo: `${dayDate.calendar(dayReferenceDate)}`,
      delay: secondsUntilNextDay(referenceDate)
    };
  }
  if (dayDate.isSame(dayReferenceDate, "week")) {
    return {
      timeAgo: dayDate.format(`ddd, ${formatUseSeconds}`),
      delay: secondsUntilNextWeek(date)
    };
  }
  return {
    timeAgo: dayDate.format(`L ${formatUseSeconds}`),
    delay: 0
  };
};
exports.formatTimeAgo = formatTimeAgo;
exports.secondsUntilNextDay = secondsUntilNextDay;
//# sourceMappingURL=formatUtils.cjs.map
