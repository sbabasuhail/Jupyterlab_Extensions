"use strict";
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const dayjs = require("dayjs");
const isNil = require("lodash/isNil");
const capitalize = require("lodash/capitalize");
const _interopDefault = (e) => e && e.__esModule ? e : { default: e };
const dayjs__default = /* @__PURE__ */ _interopDefault(dayjs);
const isNil__default = /* @__PURE__ */ _interopDefault(isNil);
const capitalize__default = /* @__PURE__ */ _interopDefault(capitalize);
const CALENDAR_WEEKS = 6;
const getMonthDays = (month, year) => new Date(year, month, 0).getDate();
const getMonthFirstWeekday = (month, year) => new Date(year, month - 1, 1).getDay();
const makeUTCDate = (year, monthIndex, day, hour = 1) => new Date(Date.UTC(year, monthIndex, day, hour));
const isDate = (date) => Object.prototype.toString.call(date) === "[object Date]" && !Number.isNaN(date.valueOf());
const isDateRangeProp = (date) => "startDate" in date;
const isSameMonth = (date1, date2) => {
  if (!(isDate(date1) && isDate(date2)))
    return false;
  return date1.getMonth() === date2.getMonth() && date1.getFullYear() === date2.getFullYear();
};
const isSameDay = (date1, date2) => {
  if (!(isDate(date1) && isDate(date2)))
    return false;
  return date1.getDate() === date2.getDate() && date1.getMonth() === date2.getMonth() && date1.getFullYear() === date2.getFullYear();
};
const getPreviousMonth = (month, year) => {
  const prevMonth = month > 1 ? month - 1 : 12;
  const prevMonthYear = month > 1 ? year : year - 1;
  return {
    month: prevMonth,
    year: prevMonthYear
  };
};
const getNextMonth = (month, year) => {
  const nextMonth = month < 12 ? month + 1 : 1;
  const nextMonthYear = month < 12 ? year : year + 1;
  return {
    month: nextMonth,
    year: nextMonthYear
  };
};
const getMonthNamesList = (locale, representationValue = "long") => {
  const options = {
    month: representationValue,
    timeZone: "UTC"
  };
  return [...new Array(12)].map((n, index) => {
    const auxDate = makeUTCDate(1970, index, 1);
    return capitalize__default.default(Intl.DateTimeFormat(locale, options).format(auxDate));
  });
};
const getWeekdayNamesList = (locale, dateTimeFormatValue = "long") => {
  const options = {
    weekday: dateTimeFormatValue,
    timeZone: "UTC"
  };
  const weekdayNames = [];
  for (let day = 4; day <= 10; day += 1) {
    const auxDate = makeUTCDate(1970, 0, day);
    weekdayNames.push(Intl.DateTimeFormat(locale, options).format(auxDate));
  }
  return weekdayNames;
};
const getMonthName = (date, locale, representationValue = "long") => new Intl.DateTimeFormat(locale, {
  month: representationValue
}).format(date);
const getFormattedDate = (date, locale, rep = "short") => `${date.getDate()} ${getMonthName(date, locale, rep)} ${date.getFullYear()}`;
const createDatesArray = (month, year) => {
  const monthDays = getMonthDays(month, year);
  const daysFromPrevMonth = getMonthFirstWeekday(month, year);
  const daysFromNextMonth = CALENDAR_WEEKS * 7 - (daysFromPrevMonth + monthDays);
  const prevMonthYear = getPreviousMonth(month, year);
  const nextMonthYear = getNextMonth(month, year);
  const prevMonthDays = getMonthDays(prevMonthYear.month, prevMonthYear.year);
  const prevMonthDates = [...new Array(daysFromPrevMonth)].map((n, index) => {
    const day = index + 1 + (prevMonthDays - daysFromPrevMonth);
    return new Date(prevMonthYear.year, prevMonthYear.month - 1, day);
  });
  const currentMonthDates = [...new Array(monthDays)].map((n, index) => {
    const day = index + 1;
    return new Date(year, month - 1, day);
  });
  const nextMonthDates = [...new Array(daysFromNextMonth)].map((n, index) => {
    const day = index + 1;
    return new Date(nextMonthYear.year, nextMonthYear.month - 1, day);
  });
  return [...prevMonthDates, ...currentMonthDates, ...nextMonthDates];
};
const isRange = (date) => date != null && typeof date === "object" && "startDate" in date;
const dateInProvidedValueRange = (date, providedValueRange) => {
  const {
    startDate,
    endDate
  } = providedValueRange;
  if (!isRange(providedValueRange) || isNil__default.default(endDate))
    return false;
  const localEndDate = endDate;
  const modStartDate = dayjs__default.default(startDate).format("YYYY-MM-DD");
  const modEndDate = dayjs__default.default(localEndDate).format("YYYY-MM-DD");
  const convertedDate = dayjs__default.default(date).format("YYYY-MM-DD");
  return convertedDate >= modStartDate && convertedDate <= modEndDate;
};
const checkIfDateIsDisabled = (date, minimumDate, maximumDate) => {
  if (!minimumDate && !maximumDate)
    return false;
  const modStartDate = minimumDate ? dayjs__default.default(minimumDate).format("YYYY-MM-DD") : void 0;
  const modEndDate = maximumDate ? dayjs__default.default(maximumDate).format("YYYY-MM-DD") : void 0;
  const convertedDate = dayjs__default.default(date).format("YYYY-MM-DD");
  return modStartDate !== void 0 && convertedDate < modStartDate || modEndDate !== void 0 && convertedDate > modEndDate;
};
const formatToLocale = (date, locale) => {
  return new Intl.DateTimeFormat(locale, {
    day: "numeric",
    month: "short",
    year: "numeric"
  }).format(date);
};
exports.CALENDAR_WEEKS = CALENDAR_WEEKS;
exports.checkIfDateIsDisabled = checkIfDateIsDisabled;
exports.createDatesArray = createDatesArray;
exports.dateInProvidedValueRange = dateInProvidedValueRange;
exports.formatToLocale = formatToLocale;
exports.getFormattedDate = getFormattedDate;
exports.getMonthDays = getMonthDays;
exports.getMonthFirstWeekday = getMonthFirstWeekday;
exports.getMonthName = getMonthName;
exports.getMonthNamesList = getMonthNamesList;
exports.getNextMonth = getNextMonth;
exports.getPreviousMonth = getPreviousMonth;
exports.getWeekdayNamesList = getWeekdayNamesList;
exports.isDate = isDate;
exports.isDateRangeProp = isDateRangeProp;
exports.isRange = isRange;
exports.isSameDay = isSameDay;
exports.isSameMonth = isSameMonth;
exports.makeUTCDate = makeUTCDate;
//# sourceMappingURL=utils.cjs.map
