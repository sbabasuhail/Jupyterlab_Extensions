"use strict";
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const jsxRuntime = require("@emotion/react/jsx-runtime");
const React = require("react");
const isNil = require("lodash/isNil");
const keyboardUtils = require("../../../utils/keyboardUtils.cjs");
const setId = require("../../../utils/setId.cjs");
const utils = require("../utils.cjs");
const model = require("../model.cjs");
const CalendarCell = require("./CalendarCell.cjs");
const CalendarHeader = require("../CalendarHeader/CalendarHeader.cjs");
const SingleCalendar_styles = require("./SingleCalendar.styles.cjs");
const ComposedNavigation = require("../CalendarNavigation/ComposedNavigation/ComposedNavigation.cjs");
const CalendarWeekLabels = require("../CalendarWeekLabels/CalendarWeekLabels.cjs");
const MonthSelector = require("../CalendarNavigation/MonthSelector/MonthSelector.cjs");
const _interopDefault = (e) => e && e.__esModule ? e : { default: e };
const isNil__default = /* @__PURE__ */ _interopDefault(isNil);
const HvSingleCalendar = ({
  classes: classesProp,
  className,
  id,
  locale = "en-US",
  value,
  visibleMonth,
  visibleYear,
  minimumDate,
  maximumDate,
  onChange,
  onInputChange,
  onVisibleDateChange,
  showEndDate,
  showDayOfWeek,
  invalidDateLabel,
  children,
  ...others
}) => {
  var _a, _b;
  const {
    classes,
    cx
  } = SingleCalendar_styles.useClasses(classesProp);
  const today = /* @__PURE__ */ new Date();
  const localValue = isNil__default.default(value) ? today : value;
  const [calViewMode, setCalViewMode] = React.useState("calendar");
  const rangeMode = utils.isRange(localValue);
  const isDateSelectionMode = rangeMode && !utils.isDate(localValue.endDate);
  const calModel = rangeMode ? model.generateCalendarModel(localValue.startDate, visibleMonth, visibleYear) : model.generateCalendarModel(localValue, visibleMonth, visibleYear);
  const firstDayOfCurrentMonth = new Date(calModel.year, calModel.month - 1, 1);
  const firstDayOfCurrentMonthTime = firstDayOfCurrentMonth.getTime();
  const listWeekdayNames = React.useMemo(() => utils.getWeekdayNamesList(locale, "narrow"), [locale]);
  const handleChange = (event, date) => {
    event == null ? void 0 : event.preventDefault();
    onChange == null ? void 0 : onChange(event, date);
  };
  const handleInputChange = (event, date) => {
    event == null ? void 0 : event.preventDefault();
    onInputChange == null ? void 0 : onInputChange(event, date);
  };
  const getNavChild = (event, siblings, i) => {
    if (keyboardUtils.isKey(event, "ArrowLeft"))
      return siblings[i - 1];
    if (keyboardUtils.isKey(event, "ArrowRight"))
      return siblings[i + 1];
    if (keyboardUtils.isKey(event, "ArrowUp"))
      return siblings[i - 7];
    if (keyboardUtils.isKey(event, "ArrowDown"))
      return siblings[i + 7];
    return void 0;
  };
  const handleKeyDown = (event) => {
    var _a2;
    const el = document == null ? void 0 : document.activeElement;
    const parent = (_a2 = el == null ? void 0 : el.parentElement) == null ? void 0 : _a2.parentElement;
    const siblings = parent != null ? Array.from(parent.getElementsByClassName(classes.cellContainer)) : [];
    const elIndex = el ? siblings.indexOf(el) : 0;
    if (keyboardUtils.isKey(event, "Enter")) {
      el.focus();
      return;
    }
    const child = getNavChild(event, siblings, elIndex);
    if (child) {
      const inMonth = child.getAttribute("data-in-month");
      if (inMonth === "true") {
        event == null ? void 0 : event.preventDefault();
        child == null ? void 0 : child.focus();
      }
    }
  };
  const renderCalendarDate = (currentDate) => {
    return /* @__PURE__ */ jsxRuntime.jsx(CalendarCell.HvCalendarCell, { classes, tabIndex: currentDate.getTime() === firstDayOfCurrentMonthTime ? 0 : -1, onChange: handleChange, onKeyDown: handleKeyDown, value: currentDate, today, calendarValue: localValue, rangeMode, isDateSelectionMode, locale, firstDayOfCurrentMonth, maximumDate, minimumDate }, currentDate);
  };
  return /* @__PURE__ */ jsxRuntime.jsx("div", { className: cx(classes.calendarContainer, className), ...others, children: /* @__PURE__ */ jsxRuntime.jsxs("div", { id, className: classes.calendarWrapper, children: [
    /* @__PURE__ */ jsxRuntime.jsx(CalendarHeader.HvCalendarHeader, { id: setId.setId(id, "header"), locale, onChange: handleInputChange, showEndDate: showEndDate && !isDateSelectionMode, showDayOfWeek, invalidDateLabel }),
    calViewMode === "calendar" && /* @__PURE__ */ jsxRuntime.jsxs("div", { children: [
      /* @__PURE__ */ jsxRuntime.jsx(ComposedNavigation.HvComposedNavigation, { id, locale, onChange: onVisibleDateChange, onViewModeChange: setCalViewMode, visibleYear: visibleYear || today.getFullYear(), visibleMonth: visibleMonth || today.getMonth() + 1 }),
      /* @__PURE__ */ jsxRuntime.jsxs("div", { className: classes.calendarGrid, "aria-controls": (_b = (_a = CalendarHeader.HvCalendarHeader) == null ? void 0 : _a[0]) == null ? void 0 : _b.id, children: [
        /* @__PURE__ */ jsxRuntime.jsx(CalendarWeekLabels.HvCalendarWeekLabel, { labels: listWeekdayNames }),
        calModel.dates.map(renderCalendarDate)
      ] })
    ] }),
    calViewMode === "monthly" && /* @__PURE__ */ jsxRuntime.jsx(MonthSelector.HvMonthSelector, { id, locale, onChange: onVisibleDateChange, onViewModeChange: setCalViewMode, visibleMonth: visibleMonth || today.getMonth() + 1, rangeMode })
  ] }) });
};
exports.singleCalendarClasses = SingleCalendar_styles.staticClasses;
exports.HvSingleCalendar = HvSingleCalendar;
//# sourceMappingURL=SingleCalendar.cjs.map
