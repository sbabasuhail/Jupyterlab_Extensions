"use strict";
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const jsxRuntime = require("@emotion/react/jsx-runtime");
const uikitReactIcons = require("@hitachivantara/uikit-react-icons");
const keyboardUtils = require("../../../../utils/keyboardUtils.cjs");
const setId = require("../../../../utils/setId.cjs");
const Navigation_styles = require("./Navigation.styles.cjs");
const Typography = require("../../../Typography/Typography.cjs");
const Navigation = ({
  id,
  classes: classesProp,
  onNavigatePrevious,
  onNavigateNext,
  onTextClick,
  navigationText = "n/a",
  isPreviousEnabled = true,
  isNextEnabled = true
}) => {
  const {
    classes,
    cx
  } = Navigation_styles.useClasses(classesProp);
  const onkeyDownHandler = (event, funcAction) => {
    if (keyboardUtils.isKey(event, "Enter") || keyboardUtils.isKey(event, "Space")) {
      event.preventDefault();
      funcAction(event);
    }
  };
  const onTextClickIsFunction = typeof onTextClick === "function";
  return /* @__PURE__ */ jsxRuntime.jsxs("div", { className: classes.root, children: [
    /* @__PURE__ */ jsxRuntime.jsx(uikitReactIcons.DropLeftXS, { id: setId.setId(id, "left"), className: cx(classes.icon, {
      [classes.disabled]: !isPreviousEnabled
    }), onClick: isPreviousEnabled ? (event) => onNavigatePrevious(event) : void 0, onKeyDown: (event) => isNextEnabled ? onkeyDownHandler(event, onNavigatePrevious) : void 0, tabIndex: 0 }),
    /* @__PURE__ */ jsxRuntime.jsx(
      "div",
      {
        id,
        className: cx({
          [classes.text]: onTextClickIsFunction,
          [classes.textWithoutHover]: !onTextClickIsFunction
        }),
        role: "presentation",
        onClick: onTextClick,
        onKeyDown: onTextClick && ((event) => onkeyDownHandler(event, onTextClick)),
        tabIndex: onTextClick ? 0 : -1,
        children: /* @__PURE__ */ jsxRuntime.jsx(Typography.HvTypography, { variant: "body", children: navigationText })
      }
    ),
    /* @__PURE__ */ jsxRuntime.jsx(uikitReactIcons.DropRightXS, { id: setId.setId(id, "right"), className: cx(classes.icon, {
      [classes.disabled]: !isNextEnabled
    }), onClick: isNextEnabled ? (event) => onNavigateNext(event) : void 0, onKeyDown: (event) => isNextEnabled ? onkeyDownHandler(event, onNavigateNext) : void 0, tabIndex: 0 })
  ] });
};
exports.navigationClasses = Navigation_styles.staticClasses;
exports.Navigation = Navigation;
//# sourceMappingURL=Navigation.cjs.map
