{"version":3,"file":"SingleCalendar.cjs","sources":["../../../../../src/components/Calendar/SingleCalendar/SingleCalendar.tsx"],"sourcesContent":["import { useState, useMemo } from \"react\";\n\nimport isNil from \"lodash/isNil\";\n\nimport { isKey } from \"@core/utils/keyboardUtils\";\nimport { setId } from \"@core/utils/setId\";\n\nimport { ExtractNames } from \"@core/utils/classes\";\nimport { ViewMode } from \"../enums\";\nimport { isRange, isDate, getWeekdayNamesList } from \"../utils\";\nimport { generateCalendarModel } from \"../model\";\nimport { HvComposedNavigation, HvMonthSelector } from \"../CalendarNavigation\";\nimport { DateRangeProp, VisibilitySelectorActions } from \"../types\";\n\nimport { HvCalendarCell } from \"./CalendarCell\";\nimport { HvCalendarWeekLabel } from \"../CalendarWeekLabels\";\nimport { HvCalendarHeader } from \"../CalendarHeader/CalendarHeader\";\n\nimport { staticClasses, useClasses } from \"./SingleCalendar.styles\";\n\nexport { staticClasses as singleCalendarClasses };\n\nexport type HvSingleCalendarClasses = ExtractNames<typeof useClasses>;\n\nexport const HvSingleCalendar = ({\n  classes: classesProp,\n  className,\n  id,\n  locale = \"en-US\",\n  value,\n  visibleMonth,\n  visibleYear,\n  minimumDate,\n  maximumDate,\n  onChange,\n  onInputChange,\n  onVisibleDateChange,\n  showEndDate,\n  showDayOfWeek,\n  invalidDateLabel,\n  children,\n  ...others\n}: HvSingleCalendarProps) => {\n  // TODO: refactor this out\n  // const { HvCalendarHeader } = useContext(HvFormElementDescriptorsContext);\n\n  const { classes, cx } = useClasses(classesProp);\n\n  const today = new Date();\n  const localValue = isNil(value) ? today : value;\n\n  const [calViewMode, setCalViewMode] = useState<ViewMode>(\"calendar\");\n\n  const rangeMode = isRange(localValue);\n  const isDateSelectionMode = rangeMode && !isDate(localValue.endDate);\n  const calModel = rangeMode\n    ? generateCalendarModel(localValue.startDate, visibleMonth, visibleYear)\n    : generateCalendarModel(localValue, visibleMonth, visibleYear);\n  const firstDayOfCurrentMonth = new Date(calModel.year, calModel.month - 1, 1);\n  const firstDayOfCurrentMonthTime = firstDayOfCurrentMonth.getTime();\n\n  const listWeekdayNames = useMemo(\n    () => getWeekdayNamesList(locale, \"narrow\"),\n    [locale]\n  );\n\n  const handleChange = (event, date: Date | DateRangeProp) => {\n    event?.preventDefault();\n    onChange?.(event, date);\n  };\n\n  const handleInputChange = (event, date) => {\n    event?.preventDefault();\n    onInputChange?.(event, date);\n  };\n\n  const getNavChild = (event: KeyboardEvent, siblings, i: number) => {\n    if (isKey(event, \"ArrowLeft\")) return siblings[i - 1];\n    if (isKey(event, \"ArrowRight\")) return siblings[i + 1];\n    if (isKey(event, \"ArrowUp\")) return siblings[i - 7];\n    if (isKey(event, \"ArrowDown\")) return siblings[i + 7];\n    return undefined;\n  };\n\n  const handleKeyDown = (event) => {\n    // This code is very brittle and should be managed with the focus wrapper\n    const el = document?.activeElement;\n    const parent = el?.parentElement?.parentElement;\n    const siblings =\n      parent != null\n        ? Array.from(\n            parent.getElementsByClassName(classes.cellContainer as string)\n          )\n        : [];\n    const elIndex = el ? siblings.indexOf(el) : 0;\n\n    if (isKey(event, \"Enter\")) {\n      (el as HTMLElement).focus();\n      return;\n    }\n\n    const child = getNavChild(event, siblings, elIndex);\n\n    if (child) {\n      const inMonth = child.getAttribute(\"data-in-month\");\n      if (inMonth === \"true\") {\n        event?.preventDefault();\n        child?.focus();\n      }\n    }\n  };\n\n  /**\n   * Renders the element representing the received date.\n   *\n   * @param currentDate - The array representing the date [YYYY, MM, DD].\n   * @memberOf Calendar\n   */\n  const renderCalendarDate = (currentDate) => {\n    return (\n      <HvCalendarCell\n        classes={classes}\n        key={currentDate}\n        tabIndex={currentDate.getTime() === firstDayOfCurrentMonthTime ? 0 : -1}\n        onChange={handleChange}\n        onKeyDown={handleKeyDown}\n        value={currentDate}\n        today={today}\n        calendarValue={localValue}\n        rangeMode={rangeMode}\n        isDateSelectionMode={isDateSelectionMode}\n        locale={locale}\n        firstDayOfCurrentMonth={firstDayOfCurrentMonth}\n        maximumDate={maximumDate}\n        minimumDate={minimumDate}\n      />\n    );\n  };\n\n  return (\n    <div className={cx(classes.calendarContainer, className)} {...others}>\n      <div id={id} className={classes.calendarWrapper}>\n        <HvCalendarHeader\n          id={setId(id, \"header\")}\n          locale={locale}\n          onChange={handleInputChange}\n          showEndDate={showEndDate && !isDateSelectionMode}\n          showDayOfWeek={showDayOfWeek}\n          invalidDateLabel={invalidDateLabel}\n        />\n        {calViewMode === \"calendar\" && (\n          <div>\n            <HvComposedNavigation\n              id={id}\n              locale={locale}\n              onChange={onVisibleDateChange}\n              onViewModeChange={setCalViewMode}\n              visibleYear={visibleYear || today.getFullYear()}\n              visibleMonth={visibleMonth || today.getMonth() + 1}\n            />\n            <div\n              className={classes.calendarGrid}\n              aria-controls={HvCalendarHeader?.[0]?.id}\n            >\n              <HvCalendarWeekLabel labels={listWeekdayNames} />\n              {calModel.dates.map(renderCalendarDate)}\n            </div>\n          </div>\n        )}\n        {calViewMode === \"monthly\" && (\n          <HvMonthSelector\n            id={id}\n            locale={locale}\n            onChange={onVisibleDateChange}\n            onViewModeChange={setCalViewMode}\n            visibleMonth={visibleMonth || today.getMonth() + 1}\n            rangeMode={rangeMode}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport interface HvSingleCalendarProps {\n  /**\n   * Styles applied from the theme.\n   */\n  classes?: HvSingleCalendarClasses;\n  /**\n   * Identifier.\n   */\n  id?: string;\n  /**\n   * The class name to add at the root of the single calendar\n   */\n  className?: string;\n  /**\n   * The calendar locale.\n   *\n   */\n  locale: string;\n  /**\n   * Date that the calendar would show.\n   */\n  value?: string | Date | DateRangeProp;\n  /**\n   * Date that will be used to know which month and year should be displayed on the calendar. The value of the day is\n   * irrelevant.\n   */\n  visibleDate?: Date;\n  /**\n   * Controls the visible month of the Calendar\n   */\n  visibleMonth?: number;\n  /**\n   * Controls the visible month of the Calendar\n   */\n  visibleYear?: number;\n  /**\n   * Callback function to be triggered when the selected date has changed.\n   */\n  onChange?: (\n    event:\n      | React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>\n      | undefined,\n    value: Date | DateRangeProp\n  ) => void;\n  /**\n   * Callback function to be triggered when the selected date input has changed.\n   */\n  onInputChange?: (\n    event:\n      | React.ChangeEvent<\n          HTMLTextAreaElement | HTMLInputElement | HTMLButtonElement\n        >\n      | undefined,\n    value: Date | DateRangeProp,\n    position?: \"left\" | \"right\"\n  ) => void;\n  /**\n   * Callback function to be triggered when visible date has changed.\n   */\n  onVisibleDateChange?: (\n    event:\n      | React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>\n      | undefined,\n    action: VisibilitySelectorActions,\n    value?: Date | DateRangeProp | number\n  ) => void;\n  /**\n   * The maximum selectable date after this all values are disabled.\n   */\n  maximumDate?: Date;\n  /**\n   * The minimum selectable date before this all values are disabled.\n   */\n  minimumDate?: Date;\n  /**\n   * Indicates if header should display end date in a date range.\n   */\n  showEndDate?: boolean;\n  /**\n   * Indicates if header should display the day of week.\n   */\n  showDayOfWeek?: boolean;\n  /**\n   * Content on the upper part of the calendar.\n   */\n  children?: React.ReactNode;\n  /**\n   * Label shown when date is invalid.\n   */\n  invalidDateLabel?: string;\n}\n"],"names":["HvSingleCalendar","classes","classesProp","className","id","locale","value","visibleMonth","visibleYear","minimumDate","maximumDate","onChange","onInputChange","onVisibleDateChange","showEndDate","showDayOfWeek","invalidDateLabel","children","others","cx","useClasses","today","Date","localValue","isNil","calViewMode","setCalViewMode","useState","rangeMode","isRange","isDateSelectionMode","isDate","endDate","calModel","generateCalendarModel","startDate","firstDayOfCurrentMonth","year","month","firstDayOfCurrentMonthTime","getTime","listWeekdayNames","useMemo","getWeekdayNamesList","handleChange","event","date","preventDefault","handleInputChange","getNavChild","siblings","i","isKey","undefined","handleKeyDown","el","document","activeElement","parent","parentElement","Array","from","getElementsByClassName","cellContainer","elIndex","indexOf","focus","child","inMonth","getAttribute","renderCalendarDate","currentDate","jsx","HvCalendarCell","calendarContainer","jsxs","calendarWrapper","HvCalendarHeader","setId","HvComposedNavigation","getFullYear","getMonth","calendarGrid","HvCalendarWeekLabel","dates","map","HvMonthSelector"],"mappings":"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"}