{"version":3,"file":"model.cjs","sources":["../../../../src/components/Calendar/model.tsx"],"sourcesContent":["import { createDatesArray, isRange } from \"./utils\";\n\n/**\n * Calendar builder for a specific month and year.\n * Returns an array of date objects.\n */\nexport default class CalendarModel {\n  month: any;\n\n  year: any;\n\n  dates: Date[] = [];\n\n  constructor(month?: number, year?: number) {\n    this.updateModel(month, year);\n  }\n\n  /**\n   * Updates the model with the received month and year\n   *\n   * @param {number} month - Number of the month (1 to 12).\n   * @param {number} year - Number of the year.\n   * @memberOf CalendarModel\n   */\n  updateModel = (month, year) => {\n    let validMonth = month;\n    let validYear = year;\n    if (!Number.isInteger(validMonth)) {\n      validMonth = new Date().getMonth() + 1;\n    }\n    if (!Number.isInteger(validYear)) {\n      validYear = new Date().getFullYear();\n    }\n\n    this.month = validMonth;\n    this.year = validYear;\n    this.dates = createDatesArray(validMonth, validYear);\n  };\n}\n\nconst generateModelFromDate = (seedValue) => {\n  let calendarModel;\n\n  if (typeof seedValue === \"string\") {\n    const today = new Date();\n    calendarModel = new CalendarModel(\n      today.getMonth() + 1,\n      today.getFullYear()\n    );\n  } else if (isRange(seedValue)) {\n    calendarModel = new CalendarModel(\n      seedValue.startDate.getMonth() + 1,\n      seedValue.startDate.getFullYear()\n    );\n  } else {\n    calendarModel = new CalendarModel(\n      seedValue.getMonth() + 1,\n      seedValue.getFullYear()\n    );\n  }\n\n  return calendarModel;\n};\n\nexport const generateCalendarModel = (seedValue, visibleMonth, visibleYear) => {\n  let calendarModel;\n\n  if (visibleMonth && visibleYear) {\n    calendarModel = new CalendarModel(visibleMonth, visibleYear);\n  } else if (visibleMonth && !visibleYear) {\n    calendarModel = new CalendarModel(visibleMonth, seedValue.getFullYear());\n  } else if (!visibleMonth && visibleYear) {\n    calendarModel = new CalendarModel(1, visibleYear);\n  } else {\n    calendarModel = generateModelFromDate(seedValue);\n  }\n\n  return calendarModel;\n};\n"],"names":["CalendarModel","constructor","month","year","dates","updateModel","validMonth","validYear","Number","isInteger","Date","getMonth","getFullYear","createDatesArray","generateModelFromDate","seedValue","calendarModel","today","isRange","startDate","generateCalendarModel","visibleMonth","visibleYear"],"mappings":";;;AAMA,MAAqBA,cAAc;AAAA,EAOjCC,YAAYC,OAAgBC,MAAe;AAF3CC,SAAAA,QAAgB;AAaFC,SAAAA,cAAAA,CAACH,QAAOC,UAAS;AAC7B,UAAIG,aAAaJ;AACjB,UAAIK,YAAYJ;AAChB,UAAI,CAACK,OAAOC,UAAUH,UAAU,GAAG;AACjCA,sBAAiBI,oBAAAA,KAAOC,GAAAA,SAAAA,IAAa;AAAA,MACvC;AACA,UAAI,CAACH,OAAOC,UAAUF,SAAS,GAAG;AACpB,qBAAA,oBAAIG,KAAK,GAAEE,YAAY;AAAA,MACrC;AAEA,WAAKV,QAAQI;AACb,WAAKH,OAAOI;AACPH,WAAAA,QAAQS,MAAAA,iBAAiBP,YAAYC,SAAS;AAAA,IAAA;AAtB9CF,SAAAA,YAAYH,OAAOC,IAAI;AAAA,EAC9B;AAuBF;AAEA,MAAMW,wBAAyBC,CAAc,cAAA;AACvCC,MAAAA;AAEA,MAAA,OAAOD,cAAc,UAAU;AAC3BE,UAAAA,4BAAYP;AACF,oBAAA,IAAIV,cAClBiB,MAAMN,aAAa,GACnBM,MAAML,aACR;AAAA,EAAA,WACSM,MAAAA,QAAQH,SAAS,GAAG;AACb,oBAAA,IAAIf,cAClBe,UAAUI,UAAUR,aAAa,GACjCI,UAAUI,UAAUP,YACtB,CAAA;AAAA,EAAA,OACK;AACW,oBAAA,IAAIZ,cAClBe,UAAUJ,aAAa,GACvBI,UAAUH,aACZ;AAAA,EACF;AAEOI,SAAAA;AACT;AAEO,MAAMI,wBAAwBA,CAACL,WAAWM,cAAcC,gBAAgB;AACzEN,MAAAA;AAEJ,MAAIK,gBAAgBC,aAAa;AACf,oBAAA,IAAItB,cAAcqB,cAAcC,WAAW;AAAA,EAAA,WAClDD,gBAAgB,CAACC,aAAa;AACvCN,oBAAgB,IAAIhB,cAAcqB,cAAcN,UAAUH,YAAa,CAAA;AAAA,EAAA,WAC9D,CAACS,gBAAgBC,aAAa;AACvB,oBAAA,IAAItB,cAAc,GAAGsB,WAAW;AAAA,EAAA,OAC3C;AACLN,oBAAgBF,sBAAsBC,SAAS;AAAA,EACjD;AAEOC,SAAAA;AACT;;;"}