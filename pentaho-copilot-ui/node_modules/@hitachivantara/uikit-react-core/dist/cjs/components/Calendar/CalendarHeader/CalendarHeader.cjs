"use strict";
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const jsxRuntime = require("@emotion/react/jsx-runtime");
const React = require("react");
const uikitReactIcons = require("@hitachivantara/uikit-react-icons");
const dayjs = require("dayjs");
const localeData = require("dayjs/plugin/localeData");
const localizedFormat = require("dayjs/plugin/localizedFormat");
const customParseFormat = require("dayjs/plugin/customParseFormat");
const isNil = require("lodash/isNil");
const keyboardUtils = require("../../../utils/keyboardUtils.cjs");
const setId = require("../../../utils/setId.cjs");
const utils = require("../utils.cjs");
const CalendarHeader_styles = require("./CalendarHeader.styles.cjs");
const FormElementValueContext = require("../../Forms/FormElement/context/FormElementValueContext.cjs");
const FormElementContext = require("../../Forms/FormElement/context/FormElementContext.cjs");
const FormElementDescriptorsContext = require("../../Forms/FormElement/context/FormElementDescriptorsContext.cjs");
const Typography = require("../../Typography/Typography.cjs");
const _interopDefault = (e) => e && e.__esModule ? e : { default: e };
const dayjs__default = /* @__PURE__ */ _interopDefault(dayjs);
const localeData__default = /* @__PURE__ */ _interopDefault(localeData);
const localizedFormat__default = /* @__PURE__ */ _interopDefault(localizedFormat);
const customParseFormat__default = /* @__PURE__ */ _interopDefault(customParseFormat);
const isNil__default = /* @__PURE__ */ _interopDefault(isNil);
dayjs__default.default.extend(localeData__default.default);
dayjs__default.default.extend(localizedFormat__default.default);
dayjs__default.default.extend(customParseFormat__default.default);
const HvCalendarHeader = ({
  id,
  value,
  locale = "en-US",
  classes: classesProp,
  onChange,
  showEndDate,
  showDayOfWeek = false,
  onFocus,
  invalidDateLabel = "Invalid Date",
  ...others
}) => {
  var _a;
  const {
    classes,
    cx
  } = CalendarHeader_styles.useClasses(classesProp);
  const {
    elementId
  } = React.useContext(FormElementContext.HvFormElementContext);
  const elementValue = React.useContext(FormElementValueContext.HvFormElementValueContext);
  const {
    label
  } = React.useContext(FormElementDescriptorsContext.HvFormElementDescriptorsContext);
  let localValue = value ?? elementValue ?? "";
  if (utils.isRange(localValue)) {
    localValue = showEndDate ? localValue.endDate : localValue.startDate;
  }
  const [dateValue, setDateValue] = React.useState(localValue);
  const [editedValue, setEditedValue] = React.useState(null);
  const [displayValue, setDisplayValue] = React.useState("");
  const [weekdayDisplay, setWeekdayDisplay] = React.useState("");
  const localId = id ?? setId.setId(elementId, "calendarHeader");
  const inputValue = editedValue ?? displayValue;
  const localeFormat = dayjs__default.default().locale(locale).localeData().longDateFormat("L");
  const [isValidValue, setIsValidValue] = React.useState(inputValue.length === 0 || !!inputValue && dayjs__default.default(localValue).isValid());
  const validateInput = (incomingValid) => incomingValid === void 0 || dayjs__default.default(incomingValid).isValid();
  React.useEffect(() => {
    const valid = validateInput(localValue);
    setIsValidValue(valid);
    if (valid) {
      if (!localValue) {
        setDisplayValue("");
        setEditedValue(null);
        setWeekdayDisplay("");
        return;
      }
      const weekday = new Intl.DateTimeFormat(locale, {
        weekday: "short"
      }).format(utils.isDate(localValue) ? localValue : 0);
      setDisplayValue(utils.formatToLocale(localValue, locale));
      setEditedValue(null);
      setWeekdayDisplay(weekday);
    }
  }, [localValue, locale]);
  const handleNewDate = (event, date) => {
    const localeParsedDate = dayjs__default.default(date, localeFormat);
    const isValidInput = localeParsedDate.isValid();
    const dateParsed = isValidInput ? localeParsedDate.toDate() : dayjs__default.default(date).toDate();
    if (!utils.isSameDay(dateParsed, dateValue)) {
      setDateValue(dateParsed);
      onChange == null ? void 0 : onChange(event, dateParsed);
    }
    setIsValidValue(isValidInput);
    if (isValidInput) {
      setEditedValue(null);
    }
  };
  const onBlurHandler = (event) => {
    if (isNil__default.default(editedValue))
      return;
    if (editedValue === "") {
      setIsValidValue(true);
      setEditedValue(null);
      return;
    }
    handleNewDate(event, editedValue);
  };
  const keyDownHandler = (event) => {
    if (!keyboardUtils.isKey(event, "Enter") || isNil__default.default(editedValue) || editedValue === "")
      return;
    event.preventDefault();
    handleNewDate(event, editedValue);
  };
  const onFocusHandler = (event) => {
    if (!localValue)
      return;
    const formattedDate = isValidValue && utils.isDate(localValue) ? dayjs__default.default(localValue).locale(locale).format("L") : editedValue;
    setEditedValue(formattedDate);
    onFocus == null ? void 0 : onFocus(event, formattedDate);
  };
  const onChangeHandler = (event) => {
    setEditedValue(event.target.value);
  };
  return /* @__PURE__ */ jsxRuntime.jsxs(jsxRuntime.Fragment, { children: [
    /* @__PURE__ */ jsxRuntime.jsxs("div", { id: localId, className: cx(classes.root, {
      [classes.invalid]: !isValidValue && inputValue !== ""
    }), children: [
      showDayOfWeek && /* @__PURE__ */ jsxRuntime.jsx(Typography.HvTypography, { className: classes.headerDayOfWeek, children: weekdayDisplay || "Â " }),
      /* @__PURE__ */ jsxRuntime.jsx("div", { className: classes.headerDate, children: /* @__PURE__ */ jsxRuntime.jsx("input", { type: "text", id: setId.setId(localId, "header-input"), placeholder: localeFormat, value: inputValue, className: classes.input, onBlur: onBlurHandler, onFocus: onFocusHandler, onChange: onChangeHandler, onKeyDown: keyDownHandler, "aria-labelledby": (_a = label == null ? void 0 : label[0]) == null ? void 0 : _a.id, ...others }) })
    ] }),
    !isValidValue && inputValue !== "" && /* @__PURE__ */ jsxRuntime.jsx("div", { role: "presentation", className: classes.inputBorderContainer }),
    /* @__PURE__ */ jsxRuntime.jsx("div", { style: {
      height: 32
    }, children: !isValidValue && inputValue !== "" && /* @__PURE__ */ jsxRuntime.jsxs(Typography.HvTypography, { component: "span", variant: "body", className: classes == null ? void 0 : classes.invalidMessageStyling, children: [
      /* @__PURE__ */ jsxRuntime.jsx(uikitReactIcons.Info, { color: "brand", iconSize: "S" }),
      invalidDateLabel
    ] }) })
  ] });
};
HvCalendarHeader.formElementType = "HvCalendarHeader";
exports.calendarHeaderClasses = CalendarHeader_styles.staticClasses;
exports.HvCalendarHeader = HvCalendarHeader;
//# sourceMappingURL=CalendarHeader.cjs.map
