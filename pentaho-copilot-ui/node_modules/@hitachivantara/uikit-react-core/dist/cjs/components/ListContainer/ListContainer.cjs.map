{"version":3,"file":"ListContainer.cjs","sources":["../../../../src/components/ListContainer/ListContainer.tsx"],"sourcesContent":["import React, { useRef, useContext, useMemo, forwardRef } from \"react\";\n\nimport { HvBaseProps } from \"@core/types/generic\";\nimport { useForkRef } from \"@core/hooks/useForkRef\";\nimport { useDefaultProps } from \"@core/hooks/useDefaultProps\";\nimport { ExtractNames } from \"@core/utils/classes\";\n\nimport { staticClasses, useClasses } from \"./ListContainer.styles\";\nimport HvListContext from \"./ListContext\";\n\nexport { staticClasses as listContainerClasses };\n\nexport type HvListContainerClasses = ExtractNames<typeof useClasses>;\n\nexport interface HvListContainerProps extends HvBaseProps<HTMLUListElement> {\n  /**\n   * If the list items should be focusable and react to mouse over events.\n   * Defaults to true if the list is selectable, false otherwise.\n   */\n  interactive?: boolean;\n  /** If `true` compact the vertical spacing between list items. */\n  condensed?: boolean;\n  /** If `true`, the list items' left and right padding is removed. */\n  disableGutters?: boolean;\n  /** A Jss Object used to override or extend the styles applied to the component. */\n  classes?: HvListContainerClasses;\n}\n\n/**\n * A <b>list</b> is any enumeration of a set of items.\n * The simple list is for continuous <b>vertical indexes of text or icons+text</b>. The content of these lists must be simple: ideally simples fields.\n * This pattern is ideal for <b>selections</b>. It should be used inside a HvPanel.\n */\nexport const HvListContainer = forwardRef(\n  (props: HvListContainerProps, externalRef) => {\n    const {\n      id,\n      classes: classesProp,\n      className,\n      interactive = false,\n      condensed,\n      disableGutters,\n      children,\n      ...others\n    } = useDefaultProps(\"HvListContainer\", props);\n\n    const { classes, cx } = useClasses(classesProp);\n\n    const containerRef = useRef(null);\n\n    const { topContainerRef, nesting = -1 } = useContext(HvListContext);\n\n    const listContext = useMemo(\n      () => ({\n        topContainerRef: topContainerRef || containerRef,\n        condensed,\n        disableGutters,\n        interactive,\n        nesting: nesting + 1,\n      }),\n      [condensed, disableGutters, interactive, nesting, topContainerRef]\n    );\n\n    const renderChildren = () => {\n      if (!interactive) {\n        return children;\n      }\n\n      const anySelected = React.Children.toArray(children)\n        .map((child: any) => child.props.selected && !child.props.disabled)\n        .reduce((result, selected) => result || selected, false);\n\n      return React.Children.map(children, (child: any, i) => {\n        const tabIndex =\n          child.props.tabIndex ||\n          (!anySelected && i === 0) ||\n          (child.props.selected && !child.props.disabled)\n            ? 0\n            : -1;\n\n        return React.cloneElement(child, {\n          tabIndex,\n          interactive,\n        });\n      });\n    };\n\n    const handleRef = useForkRef(externalRef, containerRef);\n\n    return (\n      <HvListContext.Provider value={listContext}>\n        <ul\n          ref={handleRef}\n          id={id}\n          className={cx(classes.root, className)}\n          {...others}\n        >\n          {renderChildren()}\n        </ul>\n      </HvListContext.Provider>\n    );\n  }\n);\n"],"names":["HvListContainer","forwardRef","props","externalRef","id","classes","classesProp","className","interactive","condensed","disableGutters","children","others","useDefaultProps","cx","useClasses","containerRef","useRef","topContainerRef","nesting","useContext","HvListContext","listContext","useMemo","renderChildren","anySelected","React","Children","toArray","map","child","selected","disabled","reduce","result","i","tabIndex","cloneElement","handleRef","useForkRef","jsx","root"],"mappings":";;;;;;;;;;AAiCO,MAAMA,kBAAkBC,MAAAA,WAC7B,CAACC,OAA6BC,gBAAgB;AACtC,QAAA;AAAA,IACJC;AAAAA,IACAC,SAASC;AAAAA,IACTC;AAAAA,IACAC,cAAc;AAAA,IACdC;AAAAA,IACAC;AAAAA,IACAC;AAAAA,IACA,GAAGC;AAAAA,EAAAA,IACDC,gBAAgB,gBAAA,mBAAmBX,KAAK;AAEtC,QAAA;AAAA,IAAEG;AAAAA,IAASS;AAAAA,EAAAA,IAAOC,qBAAAA,WAAWT,WAAW;AAExCU,QAAAA,eAAeC,aAAO,IAAI;AAE1B,QAAA;AAAA,IAAEC;AAAAA,IAAiBC,UAAU;AAAA,EAAA,IAAOC,MAAAA,WAAWC,YAAAA,OAAa;AAE5DC,QAAAA,cAAcC,MAAAA,QAClB,OAAO;AAAA,IACLL,iBAAiBA,mBAAmBF;AAAAA,IACpCP;AAAAA,IACAC;AAAAA,IACAF;AAAAA,IACAW,SAASA,UAAU;AAAA,EAAA,IAErB,CAACV,WAAWC,gBAAgBF,aAAaW,SAASD,eAAe,CACnE;AAEA,QAAMM,iBAAiBA,MAAM;AAC3B,QAAI,CAAChB,aAAa;AACTG,aAAAA;AAAAA,IACT;AAEMc,UAAAA,cAAcC,eAAAA,QAAMC,SAASC,QAAQjB,QAAQ,EAChDkB,IAAI,CAACC,UAAeA,MAAM5B,MAAM6B,YAAY,CAACD,MAAM5B,MAAM8B,QAAQ,EACjEC,OAAO,CAACC,QAAQH,aAAaG,UAAUH,UAAU,KAAK;AAEzD,WAAOL,eAAAA,QAAMC,SAASE,IAAIlB,UAAU,CAACmB,OAAYK,MAAM;AACrD,YAAMC,WACJN,MAAM5B,MAAMkC,YACX,CAACX,eAAeU,MAAM,KACtBL,MAAM5B,MAAM6B,YAAY,CAACD,MAAM5B,MAAM8B,WAClC,IACA;AAECN,aAAAA,eAAAA,QAAMW,aAAaP,OAAO;AAAA,QAC/BM;AAAAA,QACA5B;AAAAA,MAAAA,CACD;AAAA,IAAA,CACF;AAAA,EAAA;AAGG8B,QAAAA,YAAYC,WAAAA,WAAWpC,aAAaa,YAAY;AAGpD,SAAAwB,+BAACnB,YAAAA,QAAc,UAAd,EAAuB,OAAOC,aAC7B,UAAAkB,2BAAA,IAAC,QACC,KAAKF,WACL,IACA,WAAWxB,GAAGT,QAAQoC,MAAMlC,SAAS,GACrC,GAAIK,QAEHY,UAAe,iBAClB,CAAA,EACF,CAAA;AAEJ,CACF;;;"}