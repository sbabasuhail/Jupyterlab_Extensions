"use strict";
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const jsxRuntime = require("@emotion/react/jsx-runtime");
const React = require("react");
const useForkRef = require("../../hooks/useForkRef.cjs");
const useDefaultProps = require("../../hooks/useDefaultProps.cjs");
const ListContainer_styles = require("./ListContainer.styles.cjs");
const ListContext = require("./ListContext/ListContext.cjs");
const _interopDefault = (e) => e && e.__esModule ? e : { default: e };
const React__default = /* @__PURE__ */ _interopDefault(React);
const HvListContainer = React.forwardRef((props, externalRef) => {
  const {
    id,
    classes: classesProp,
    className,
    interactive = false,
    condensed,
    disableGutters,
    children,
    ...others
  } = useDefaultProps.useDefaultProps("HvListContainer", props);
  const {
    classes,
    cx
  } = ListContainer_styles.useClasses(classesProp);
  const containerRef = React.useRef(null);
  const {
    topContainerRef,
    nesting = -1
  } = React.useContext(ListContext.default);
  const listContext = React.useMemo(() => ({
    topContainerRef: topContainerRef || containerRef,
    condensed,
    disableGutters,
    interactive,
    nesting: nesting + 1
  }), [condensed, disableGutters, interactive, nesting, topContainerRef]);
  const renderChildren = () => {
    if (!interactive) {
      return children;
    }
    const anySelected = React__default.default.Children.toArray(children).map((child) => child.props.selected && !child.props.disabled).reduce((result, selected) => result || selected, false);
    return React__default.default.Children.map(children, (child, i) => {
      const tabIndex = child.props.tabIndex || !anySelected && i === 0 || child.props.selected && !child.props.disabled ? 0 : -1;
      return React__default.default.cloneElement(child, {
        tabIndex,
        interactive
      });
    });
  };
  const handleRef = useForkRef.useForkRef(externalRef, containerRef);
  return /* @__PURE__ */ jsxRuntime.jsx(ListContext.default.Provider, { value: listContext, children: /* @__PURE__ */ jsxRuntime.jsx("ul", { ref: handleRef, id, className: cx(classes.root, className), ...others, children: renderChildren() }) });
});
exports.listContainerClasses = ListContainer_styles.staticClasses;
exports.HvListContainer = HvListContainer;
//# sourceMappingURL=ListContainer.cjs.map
