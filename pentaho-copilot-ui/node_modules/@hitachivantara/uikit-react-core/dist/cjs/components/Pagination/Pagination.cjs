"use strict";
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const jsxRuntime = require("@emotion/react/jsx-runtime");
const React = require("react");
const useDefaultProps = require("../../hooks/useDefaultProps.cjs");
const material = require("@mui/material");
const uikitReactIcons = require("@hitachivantara/uikit-react-icons");
const setId = require("../../utils/setId.cjs");
const keyboardUtils = require("../../utils/keyboardUtils.cjs");
const useLabels = require("../../hooks/useLabels.cjs");
const Select = require("./Select.cjs");
const Pagination_styles = require("./Pagination.styles.cjs");
const utils = require("./utils.cjs");
const ButtonIconTooltip = require("./ButtonIconTooltip.cjs");
const Typography = require("../Typography/Typography.cjs");
const Input = require("../Input/Input.cjs");
const DEFAULT_LABELS = {
  pageSizePrev: "Show",
  pageSizeEntryName: "rows",
  pageSizeSelectorDescription: "Select how many to display",
  pagesSeparator: "/",
  paginationFirstPageTitle: "First page",
  paginationPreviousPageTitle: "Previous page",
  paginationNextPageTitle: "Next page",
  paginationLastPageTitle: "Last page",
  paginationInputLabel: "Current page",
  firstPage: "First Page",
  previousPage: "Previous Page",
  nextPage: "Next Page",
  lastPage: "Last Page"
};
const defaultPageSizeOptions = [5, 10, 20, 25, 50, 100];
const HvPagination = (props) => {
  const {
    classes: classesProp,
    className,
    id,
    pages = 1,
    page = 0,
    showPageSizeOptions = true,
    pageSizeOptions = defaultPageSizeOptions,
    pageSize = defaultPageSizeOptions[1],
    showPageJump = true,
    canPrevious = false,
    canNext = false,
    onPageChange,
    onPageSizeChange,
    labels: labelsProp,
    showPageProps,
    navigationProps,
    currentPageInputProps,
    ...others
  } = useDefaultProps.useDefaultProps("HvPagination", props);
  const labels = useLabels.useLabels(DEFAULT_LABELS, labelsProp);
  const [pageInput, handleInputChange] = utils.usePageInput(page);
  const {
    classes,
    cx
  } = Pagination_styles.useClasses(classesProp);
  const changePage = React.useCallback((newPage) => {
    const safePage = utils.getSafePage(newPage, page, pages);
    onPageChange == null ? void 0 : onPageChange(safePage);
    handleInputChange(null, safePage + 1);
  }, [page, pages, onPageChange, handleInputChange]);
  React.useEffect(() => {
    if (page >= pages && pages > 0) {
      changePage(page);
    }
  }, [changePage, page, pages]);
  React.useEffect(() => {
    if (pageInput !== page + 1) {
      handleInputChange(null, page + 1);
    }
  }, [handleInputChange, page]);
  const renderPageJump = () => /* @__PURE__ */ jsxRuntime.jsx("div", { className: classes.pageJump, children: /* @__PURE__ */ jsxRuntime.jsx(Input.HvInput, { id: setId.setId(id, "currentPage"), labels, inputProps: {
    "aria-label": labels == null ? void 0 : labels.paginationInputLabel,
    // We really want the native number input
    type: "number"
  }, classes: {
    root: classes == null ? void 0 : classes.pageSizeInputContainer,
    input: classes == null ? void 0 : classes.pageSizeInput,
    inputRoot: classes == null ? void 0 : classes.pageSizeInputRoot
  }, onChange: (event, value) => handleInputChange(event, Number(value)), value: String(pageInput), onBlur: (evt, value) => changePage(Number(value) - 1), onKeyDown: (evt, value) => keyboardUtils.isKey(evt, "Enter") && changePage(Number(value) - 1), disabled: pageSize === 0, disableClear: true, ...currentPageInputProps }) });
  return /* @__PURE__ */ jsxRuntime.jsxs("div", { id, className: cx(classes.root, className), ...others, children: [
    /* @__PURE__ */ jsxRuntime.jsx("div", { className: classes.pageSizeOptions, ...showPageProps, children: showPageSizeOptions && /* @__PURE__ */ jsxRuntime.jsxs(jsxRuntime.Fragment, { children: [
      /* @__PURE__ */ jsxRuntime.jsx(material.Hidden, { xsDown: true, children: /* @__PURE__ */ jsxRuntime.jsx(Typography.HvTypography, { component: "span", className: classes == null ? void 0 : classes.pageSizeTextContainer, children: labels == null ? void 0 : labels.pageSizePrev }) }),
      /* @__PURE__ */ jsxRuntime.jsx(Select.default, { id: setId.setId(id, "pageSize"), disabled: pageSize === 0, className: classes.pageSizeOptionsSelect, "aria-label": labels == null ? void 0 : labels.pageSizeSelectorDescription, onChange: (_, val) => onPageSizeChange == null ? void 0 : onPageSizeChange(val), value: pageSize, children: pageSizeOptions.map((option) => /* @__PURE__ */ jsxRuntime.jsx(Select.Option, { value: option, children: option }, option)) }),
      /* @__PURE__ */ jsxRuntime.jsx(material.Hidden, { xsDown: true, children: /* @__PURE__ */ jsxRuntime.jsx(Typography.HvTypography, { component: "span", className: classes.pageSizeTextContainer, children: labels == null ? void 0 : labels.pageSizeEntryName }) })
    ] }) }),
    /* @__PURE__ */ jsxRuntime.jsxs("div", { className: classes.pageNavigator, ...navigationProps, children: [
      /* @__PURE__ */ jsxRuntime.jsx(ButtonIconTooltip.default, { id: setId.setId(id, "firstPage-button"), "aria-label": labels == null ? void 0 : labels.firstPage, className: classes.iconContainer, disabled: !canPrevious, onClick: () => changePage(0), tooltip: labels == null ? void 0 : labels.paginationFirstPageTitle, children: /* @__PURE__ */ jsxRuntime.jsx(uikitReactIcons.Start, { className: classes.icon, color: utils.setColor(!canPrevious) }) }),
      /* @__PURE__ */ jsxRuntime.jsx(ButtonIconTooltip.default, { id: setId.setId(id, "previousPage-button"), "aria-label": labels == null ? void 0 : labels.previousPage, className: classes.iconContainer, disabled: !canPrevious, onClick: () => changePage(page - 1), tooltip: labels == null ? void 0 : labels.paginationPreviousPageTitle, children: /* @__PURE__ */ jsxRuntime.jsx(uikitReactIcons.Backwards, { className: classes.icon, color: utils.setColor(!canPrevious) }) }),
      /* @__PURE__ */ jsxRuntime.jsxs("div", { className: classes.pageInfo, children: [
        showPageJump ? renderPageJump() : /* @__PURE__ */ jsxRuntime.jsx(Typography.HvTypography, { component: "span", children: `${page + 1}` }),
        /* @__PURE__ */ jsxRuntime.jsx(Typography.HvTypography, { component: "span", children: `${labels == null ? void 0 : labels.pagesSeparator} ` }),
        /* @__PURE__ */ jsxRuntime.jsx(Typography.HvTypography, { component: "span", id: setId.setId(id, "totalPages"), children: pages })
      ] }),
      /* @__PURE__ */ jsxRuntime.jsx(ButtonIconTooltip.default, { id: setId.setId(id, "nextPage-button"), "aria-label": labels == null ? void 0 : labels.nextPage, className: classes.iconContainer, disabled: !canNext, onClick: () => changePage(page + 1), tooltip: labels == null ? void 0 : labels.paginationNextPageTitle, children: /* @__PURE__ */ jsxRuntime.jsx(uikitReactIcons.Forwards, { className: classes.icon, color: utils.setColor(!canNext) }) }),
      /* @__PURE__ */ jsxRuntime.jsx(ButtonIconTooltip.default, { id: setId.setId(id, "lastPage-button"), "aria-label": labels == null ? void 0 : labels.lastPage, className: classes.iconContainer, disabled: !canNext, onClick: () => changePage(pages - 1), tooltip: labels == null ? void 0 : labels.paginationLastPageTitle, children: /* @__PURE__ */ jsxRuntime.jsx(uikitReactIcons.End, { className: classes.icon, color: utils.setColor(!canNext) }) })
    ] })
  ] });
};
exports.paginationClasses = Pagination_styles.staticClasses;
exports.HvPagination = HvPagination;
//# sourceMappingURL=Pagination.cjs.map
