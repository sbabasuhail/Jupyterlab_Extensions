"use strict";
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const jsxRuntime = require("@emotion/react/jsx-runtime");
const React = require("react");
const useTheme = require("../../hooks/useTheme.cjs");
const useDefaultProps = require("../../hooks/useDefaultProps.cjs");
const Button_styles = require("./Button.styles.cjs");
const mapVariant = (variant, theme) => {
  if (theme === "ds3")
    return variant;
  const deprecatedVariantMap = {
    secondary: "secondarySubtle",
    ghost: "primaryGhost"
  };
  const mappedVariant = deprecatedVariantMap[variant];
  if (mappedVariant) {
    console.warn(`Button variant '${variant}' is deprecated. Please use '${mappedVariant}'.`);
  }
  return mappedVariant || variant;
};
const HvButton = React.forwardRef((props, ref) => {
  const {
    id,
    classes: classesProp,
    children,
    variant: variantProp,
    disabled = false,
    className,
    startIcon,
    endIcon,
    icon = false,
    size,
    radius,
    overrideIconColors = true,
    component: Component = "button",
    ...others
  } = useDefaultProps.useDefaultProps("HvButton", props);
  const {
    classes,
    css,
    cx
  } = Button_styles.useClasses(classesProp);
  const {
    activeTheme
  } = useTheme.useTheme();
  const variant = mapVariant(variantProp ?? (icon ? "secondaryGhost" : "primary"), activeTheme == null ? void 0 : activeTheme.name);
  return /* @__PURE__ */ jsxRuntime.jsxs(Component, { ref, className: cx(classes.root, css(Button_styles.getVariantStyles(variant)), size && css(Button_styles.getSizeStyles(size)), radius && css(Button_styles.getRadiusStyles(radius)), overrideIconColors && css(Button_styles.getOverrideColors()), {
    [classes.icon]: icon,
    [classes.disabled]: disabled
  }, className), ...Component === "button" && {
    type: "button"
  }, ...disabled && {
    disabled: true,
    tabIndex: -1,
    "aria-disabled": true
  }, ...others, children: [
    startIcon && /* @__PURE__ */ jsxRuntime.jsx("span", { className: classes.startIcon, children: startIcon }),
    children,
    endIcon && /* @__PURE__ */ jsxRuntime.jsx("span", { className: classes.endIcon, children: endIcon })
  ] });
});
exports.buttonClasses = Button_styles.staticClasses;
exports.HvButton = HvButton;
//# sourceMappingURL=Button.cjs.map
