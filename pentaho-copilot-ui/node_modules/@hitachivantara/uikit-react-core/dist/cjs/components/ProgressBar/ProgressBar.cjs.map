{"version":3,"file":"ProgressBar.cjs","sources":["../../../../src/components/ProgressBar/ProgressBar.tsx"],"sourcesContent":["import { useDefaultProps } from \"@core/hooks/useDefaultProps\";\n\nimport clamp from \"lodash/clamp\";\n\nimport { HvBaseProps } from \"@core/types/generic\";\nimport { HvTypography, HvTypographyProps } from \"@core/components/Typography\";\n\nimport { ExtractNames } from \"@core/utils/classes\";\nimport { staticClasses, useClasses } from \"./ProgressBar.styles\";\n\nexport { staticClasses as progressBarClasses };\n\nexport type HvProgressBarClasses = ExtractNames<typeof useClasses>;\n\nexport type HvProgressBarStatus = \"inProgress\" | \"completed\" | \"error\";\n\n/**\n * ProgressBar provides feedback about a process that is taking place in the application.\n */\nexport interface HvProgressBarProps extends HvBaseProps {\n  /** The value of the progress bar. */\n  value: number;\n  /**\n   * The status of the progress bar.\n   *\n   * inProgress is black, error is red and completed is green.\n   *\n   * When uncontrolled and unspecified it will default to \"inProgress\".\n   */\n  status?: HvProgressBarStatus;\n  /** Aria Properties passed on to the progress bar. */\n  labelProps?: HvTypographyProps;\n  /** A Jss Object used to override or extend the styles applied to the component. */\n  classes?: HvProgressBarClasses;\n  /**\n   * True if the text label should not be displayed.\n   */\n  hideLabel?: boolean;\n}\n\nexport const HvProgressBar = (props: HvProgressBarProps) => {\n  const {\n    className,\n    classes: classesProp,\n    value = 0,\n    status = \"inProgress\",\n    labelProps,\n    hideLabel,\n    ...others\n  } = useDefaultProps(\"HvProgressBar\", props);\n\n  const { classes, cx } = useClasses(classesProp);\n\n  const clampedValue = clamp(value, 0, 100);\n\n  return (\n    <div\n      className={cx(classes.root, classes.progress, className)}\n      role=\"progressbar\"\n      aria-valuemin={0}\n      aria-valuemax={100}\n      aria-valuenow={clampedValue}\n      {...others}\n    >\n      <div className={classes.progressContainer}>\n        {!hideLabel && (\n          <HvTypography\n            className={classes.progressBarLabel}\n            variant=\"caption2\"\n            style={{ width: `${clampedValue}%` }}\n            {...labelProps}\n          >\n            {`${clampedValue}%`}\n          </HvTypography>\n        )}\n        <div className={classes.progressBarContainer}>\n          <div\n            style={{ width: `${clampedValue}%` }}\n            className={cx(classes.progressBar, {\n              [classes.progressDone]: status === \"completed\",\n              [classes.progressError]: status === \"error\",\n            })}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n"],"names":["HvProgressBar","props","className","classes","classesProp","value","status","labelProps","hideLabel","others","useDefaultProps","cx","useClasses","clampedValue","clamp","jsx","root","progress","jsxs","progressContainer","HvTypography","progressBarLabel","width","progressBarContainer","progressBar","progressDone","progressError"],"mappings":";;;;;;;;;AAwCaA,MAAAA,gBAAgBA,CAACC,UAA8B;AACpD,QAAA;AAAA,IACJC;AAAAA,IACAC,SAASC;AAAAA,IACTC,QAAQ;AAAA,IACRC,SAAS;AAAA,IACTC;AAAAA,IACAC;AAAAA,IACA,GAAGC;AAAAA,EAAAA,IACDC,gBAAgB,gBAAA,iBAAiBT,KAAK;AAEpC,QAAA;AAAA,IAAEE;AAAAA,IAASQ;AAAAA,EAAAA,IAAOC,mBAAAA,WAAWR,WAAW;AAE9C,QAAMS,eAAeC,eAAAA,QAAMT,OAAO,GAAG,GAAG;AAGtC,SAAAU,2BAAA,IAAC,OACC,EAAA,WAAWJ,GAAGR,QAAQa,MAAMb,QAAQc,UAAUf,SAAS,GACvD,MAAK,eACL,iBAAe,GACf,iBAAe,KACf,iBAAeW,cACf,GAAIJ,QAEJ,UAACS,2BAAA,KAAA,OAAA,EAAI,WAAWf,QAAQgB,mBACrB,UAAA;AAAA,IAACX,CAAAA,4CACCY,WAAAA,cACC,EAAA,WAAWjB,QAAQkB,kBACnB,SAAQ,YACR,OAAO;AAAA,MAAEC,OAAQ,GAAET,YAAa;AAAA,IAAA,GAC5BN,GAAAA,YAEF,UAAA,GAAEM,YAAa,KACnB;AAAA,mCAED,OAAI,EAAA,WAAWV,QAAQoB,sBACtB,UAAAR,2BAAA,IAAC,SACC,OAAO;AAAA,MAAEO,OAAQ,GAAET,YAAa;AAAA,IAChC,GAAA,WAAWF,GAAGR,QAAQqB,aAAa;AAAA,MACjC,CAACrB,QAAQsB,YAAY,GAAGnB,WAAW;AAAA,MACnC,CAACH,QAAQuB,aAAa,GAAGpB,WAAW;AAAA,IAAA,CACrC,GAAE,EAEP,CAAA;AAAA,EAAA,EACF,CAAA,EACF,CAAA;AAEJ;;;"}