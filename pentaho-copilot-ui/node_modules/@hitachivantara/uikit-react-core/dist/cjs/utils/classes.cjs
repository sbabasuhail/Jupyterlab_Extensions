"use strict";
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const useCss = require("../hooks/useCss.cjs");
const getClasses = (keys, name) => {
  const classesObj = {};
  keys.forEach((key) => {
    classesObj[key] = `${name}-${key}`;
  });
  return classesObj;
};
const deepRenameKeys = (obj, mapFn) => {
  const result = {};
  for (const key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      const newKey = mapFn(key);
      const value = obj[key];
      result[newKey] = typeof value === "object" ? deepRenameKeys(value, mapFn) : value;
    }
  }
  return result;
};
const replace$ = (stylesObj, name) => {
  return deepRenameKeys(stylesObj, (key) => {
    const matches = key.match(/\$\w+/g);
    if (!(matches == null ? void 0 : matches.length))
      return key;
    const newKey = matches.reduce((acc, match) => acc.replace(match, `.${name}-${match.slice(1)}`), key);
    return newKey ?? key;
  });
};
function createClasses(name, stylesObject) {
  const styles = replace$(stylesObject, name);
  const staticClasses = getClasses(Object.keys(styles), name);
  function useClasses(classesProp = {}, addStatic = true) {
    const {
      cx,
      css
    } = useCss.useCss();
    const mergeClasses = (key) => cx(addStatic && `${name}-${key}`, css(styles[key]), classesProp == null ? void 0 : classesProp[key]);
    const classes = Object.fromEntries(Object.keys(styles).map((key) => [key, mergeClasses(key)]));
    return {
      classes,
      css,
      cx
    };
  }
  return {
    useClasses,
    staticClasses
  };
}
exports.createClasses = createClasses;
exports.getClasses = getClasses;
exports.replace$ = replace$;
//# sourceMappingURL=classes.cjs.map
