import { theme, themes } from "@hitachivantara/uikit-styles";
const setElementStyle = (element, style) => {
  Object.entries(style).forEach(([property, value]) => {
    element.style[property] = value;
  });
};
const setElementAttrs = (themeName, modeName, colorScheme, themeRootId) => {
  const element = themeRootId ? document.getElementById(themeRootId) : document.body;
  if (element) {
    element.setAttribute(`data-theme`, themeName);
    element.setAttribute(`data-color-mode`, modeName);
    setElementStyle(element, {
      colorScheme,
      backgroundColor: theme.colors.backgroundColor,
      accentColor: theme.colors.secondary,
      color: theme.colors.secondary,
      fontSize: theme.typography.body.fontSize,
      fontWeight: theme.typography.body.fontWeight,
      lineHeight: theme.typography.body.lineHeight,
      letterSpacing: theme.typography.body.letterSpacing,
      fontFamily: theme.fontFamily.body
    });
  }
};
const applyThemeCustomizations = (obj, customizations) => {
  const isObject = (val) => val && typeof val === "object" && !Array.isArray(val);
  const customizedTheme = {
    ...obj
  };
  Object.keys(customizations).forEach((key) => {
    if (customizedTheme[key]) {
      if (isObject(customizedTheme[key]) && isObject(customizations[key])) {
        customizedTheme[key] = applyThemeCustomizations(customizedTheme[key], customizations[key]);
      } else if (typeof customizedTheme[key] === typeof customizations[key]) {
        customizedTheme[key] = customizations[key];
      }
    } else {
      customizedTheme[key] = customizations[key];
    }
  });
  return customizedTheme;
};
const createTheme = (props) => {
  var _a;
  const {
    name,
    base = "ds5",
    inheritColorModes = true,
    ...customizations
  } = props;
  const customizedTheme = customizations ? applyThemeCustomizations(themes[base], customizations) : {
    ...themes[base]
  };
  customizedTheme.name = name.trim();
  customizedTheme.base = base;
  if (customizations) {
    Object.keys(customizedTheme.colors.modes).forEach((mode) => {
      if (!themes[base].colors.modes[mode]) {
        customizedTheme.colors.modes[mode] = {
          ...themes[base].colors.modes.dawn,
          ...customizedTheme.colors.modes[mode]
        };
      }
    });
  }
  if (!inheritColorModes && ((_a = customizations.colors) == null ? void 0 : _a.modes)) {
    Object.keys(customizedTheme.colors.modes).forEach((mode) => {
      var _a2;
      if (!Object.keys(((_a2 = customizations.colors) == null ? void 0 : _a2.modes) || {}).includes(mode)) {
        delete customizedTheme.colors.modes[mode];
      }
    });
  }
  return customizedTheme;
};
const processThemes = (themesList) => {
  if (themesList && Array.isArray(themesList) && themesList.length > 0) {
    const list = [];
    themesList.forEach((thm) => {
      const i = list.findIndex((t) => t.name.trim() === thm.name.trim());
      if (i !== -1) {
        list.splice(i, 1);
        list.push(thm);
      } else {
        list.push(thm);
      }
    });
    return list;
  }
  return [themes.ds5];
};
const getVarValue = (cssVar, rootElementId) => {
  if (typeof window !== "undefined") {
    const root = document.getElementById(rootElementId || "hv-root");
    if (root) {
      const computedValue = getComputedStyle(root).getPropertyValue(cssVar.replace("var(", "").replace(")", "")).trim();
      return computedValue;
    }
  }
};
export {
  createTheme,
  getVarValue,
  processThemes,
  setElementAttrs
};
//# sourceMappingURL=theme.js.map
