import dayjs from "dayjs";
import calendar from "dayjs/plugin/calendar";
import duration from "dayjs/plugin/duration";
import localeData from "dayjs/plugin/localeData";
import localizedFormat from "dayjs/plugin/localizedFormat";
import relativeTime from "dayjs/plugin/relativeTime";
import updateLocale from "dayjs/plugin/updateLocale";
const thresholds = [{
  l: "s",
  r: 119,
  d: "second"
}, {
  l: "m",
  r: 1
}, {
  l: "mm",
  r: 59,
  d: "minute"
}, {
  l: "h",
  r: 1
}, {
  l: "hh",
  r: 23,
  d: "hour"
}, {
  l: "d",
  r: 1
}, {
  l: "dd",
  r: 29,
  d: "day"
}, {
  l: "M",
  r: 1
}, {
  l: "MM",
  r: 11,
  d: "month"
}, {
  l: "y",
  r: 17
}, {
  l: "yy",
  d: "year"
}];
dayjs.extend(localeData);
dayjs.extend(duration);
dayjs.extend(calendar);
dayjs.extend(localizedFormat);
dayjs.extend(relativeTime, {
  thresholds
});
dayjs.extend(updateLocale);
const secondsUntilNextDay = (date = /* @__PURE__ */ new Date()) => {
  const midnight = new Date(date.getTime());
  midnight.setDate(midnight.getDate() + 1);
  midnight.setHours(0);
  midnight.setMinutes(0);
  midnight.setSeconds(0);
  midnight.setMilliseconds(0);
  return (midnight.getTime() - date.getTime()) / 1e3;
};
const secondsUntilNextWeek = (date = /* @__PURE__ */ new Date()) => {
  const firstMonthDayOfWeek = date.getDate() - date.getDay();
  const firstMonthDayOfNextWeek = firstMonthDayOfWeek + 7;
  const firstDayNextWeek = new Date(date.getTime());
  firstDayNextWeek.setDate(firstMonthDayOfNextWeek);
  firstDayNextWeek.setHours(0);
  firstDayNextWeek.setMinutes(0);
  firstDayNextWeek.setSeconds(0);
  firstDayNextWeek.setMilliseconds(0);
  return (firstDayNextWeek.getTime() - date.getTime()) / 1e3;
};
const formatTimeAgo = (date, locale, showSeconds = false, referenceDate = /* @__PURE__ */ new Date()) => {
  const dayReferenceDate = dayjs(referenceDate);
  const dayDate = dayjs(date).locale(locale);
  const dayDiffSeconds = dayReferenceDate.diff(dayDate, "second");
  const formatUseSeconds = showSeconds ? "LTS" : "LT";
  if (date.getTime() > referenceDate.getTime()) {
    return {
      timeAgo: dayDate.format(`L ${formatUseSeconds}`),
      delay: (date.getTime() - referenceDate.getTime()) / 1e3
    };
  }
  if (dayDiffSeconds < 120) {
    return {
      timeAgo: dayjs.duration(dayDiffSeconds, "second").locale(locale).humanize(),
      delay: 120 - dayDiffSeconds
    };
  }
  const dayDiffMinutes = dayReferenceDate.diff(dayDate, "minute");
  if (dayDiffMinutes < 60) {
    return {
      timeAgo: dayjs.duration(-dayDiffMinutes, "minute").locale(locale).humanize(true),
      delay: 60 * (dayDiffMinutes + 1) - dayDiffSeconds
    };
  }
  if (dayReferenceDate.isSame(dayDate, "day")) {
    return {
      timeAgo: `${dayDate.calendar(dayReferenceDate)}`,
      delay: secondsUntilNextDay(referenceDate)
    };
  }
  if (dayReferenceDate.subtract(1, "day").isSame(dayDate, "day")) {
    return {
      timeAgo: `${dayDate.calendar(dayReferenceDate)}`,
      delay: secondsUntilNextDay(referenceDate)
    };
  }
  if (dayDate.isSame(dayReferenceDate, "week")) {
    return {
      timeAgo: dayDate.format(`ddd, ${formatUseSeconds}`),
      delay: secondsUntilNextWeek(date)
    };
  }
  return {
    timeAgo: dayDate.format(`L ${formatUseSeconds}`),
    delay: 0
  };
};
export {
  formatTimeAgo,
  secondsUntilNextDay
};
//# sourceMappingURL=formatUtils.js.map
