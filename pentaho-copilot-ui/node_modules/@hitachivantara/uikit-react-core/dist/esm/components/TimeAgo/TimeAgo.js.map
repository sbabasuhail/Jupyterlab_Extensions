{"version":3,"file":"TimeAgo.js","sources":["../../../../src/components/TimeAgo/TimeAgo.tsx"],"sourcesContent":["import { forwardRef } from \"react\";\n\nimport isEmpty from \"lodash/isEmpty\";\n\nimport { useDefaultProps } from \"@core/hooks/useDefaultProps\";\nimport { ExtractNames } from \"@core/utils/classes\";\nimport { HvTypography } from \"@core/components/Typography\";\nimport { PolymorphicComponentRef, PolymorphicRef } from \"@core/types/generic\";\n\nimport { staticClasses, useClasses } from \"./TimeAgo.styles\";\nimport useTimeAgo from \"./useTimeAgo\";\n\nexport { staticClasses as timeAgoClasses };\n\nexport type HvTimeAgoClasses = ExtractNames<typeof useClasses>;\n\nexport type HvTimeAgoProps<C extends React.ElementType = \"p\"> =\n  PolymorphicComponentRef<\n    C,\n    {\n      /**\n       * The timestamp to format, in seconds or milliseconds.\n       * Defaults to `emptyElement` if value is null or 0\n       */\n      timestamp?: number;\n      /**\n       * The locale to be used. Should be on of the dayjs supported locales and explicitly imported\n       * @see https://day.js.org/docs/en/i18n/i18n\n       */\n      locale?: string;\n      /**\n       * The element to render when the timestamp is null or 0\n       * Defaults to `—` (Em Dash)\n       */\n      emptyElement?: React.ReactNode;\n      /** Disables periodic date refreshes */\n      disableRefresh?: boolean;\n      /** Whether to show seconds in the rendered time */\n      showSeconds?: boolean;\n      /**\n       * Whether the component should render just the string\n       * Consider using `useTimeAgo` instead\n       */\n      justText?: boolean;\n      /** A Jss Object used to override or extend the styles applied to the component. */\n      classes?: HvTimeAgoClasses;\n    }\n  >;\n\n/**\n * The HvTimeAgo component implements the Design System relative time format guidelines.\n */\nexport const HvTimeAgo: <C extends React.ElementType = \"p\">(\n  props: HvTimeAgoProps<C>\n) => React.ReactElement | null = forwardRef(\n  <C extends React.ElementType = \"p\">(\n    props: HvTimeAgoProps<C>,\n    ref: PolymorphicRef<C>\n  ) => {\n    const {\n      classes: classesProp,\n      className,\n      timestamp,\n      locale: localeProp = \"en\",\n      component: Component = HvTypography,\n      emptyElement = \"—\",\n      disableRefresh = false,\n      showSeconds = false,\n      justText = false,\n      ...others\n    } = useDefaultProps(\"HvTimeAgo\", props);\n\n    const { classes, cx } = useClasses(classesProp);\n    const locale = isEmpty(localeProp) ? \"en\" : localeProp;\n    const timeAgo = useTimeAgo(timestamp, {\n      locale,\n      disableRefresh,\n      showSeconds,\n    });\n\n    // eslint-disable-next-line react/jsx-no-useless-fragment\n    if (justText && timestamp) return <>{timeAgo}</>;\n\n    return (\n      <Component ref={ref} className={cx(classes.root, className)} {...others}>\n        {!timestamp ? emptyElement : timeAgo}\n      </Component>\n    );\n  }\n);\n"],"names":["HvTimeAgo","forwardRef","props","ref","classes","classesProp","className","timestamp","locale","localeProp","component","Component","HvTypography","emptyElement","disableRefresh","showSeconds","justText","others","useDefaultProps","cx","useClasses","isEmpty","timeAgo","useTimeAgo","root"],"mappings":";;;;;;;;AAoDO,MAAMA,YAEoBC,WAC/B,CACEC,OACAC,QACG;AACG,QAAA;AAAA,IACJC,SAASC;AAAAA,IACTC;AAAAA,IACAC;AAAAA,IACAC,QAAQC,aAAa;AAAA,IACrBC,WAAWC,YAAYC;AAAAA,IACvBC,eAAe;AAAA,IACfC,iBAAiB;AAAA,IACjBC,cAAc;AAAA,IACdC,WAAW;AAAA,IACX,GAAGC;AAAAA,EAAAA,IACDC,gBAAgB,aAAahB,KAAK;AAEhC,QAAA;AAAA,IAAEE;AAAAA,IAASe;AAAAA,EAAAA,IAAOC,WAAWf,WAAW;AAC9C,QAAMG,SAASa,QAAQZ,UAAU,IAAI,OAAOA;AACtCa,QAAAA,UAAUC,WAAWhB,WAAW;AAAA,IACpCC;AAAAA,IACAM;AAAAA,IACAC;AAAAA,EAAAA,CACD;AAGD,MAAIC,YAAYT;AAAW,2CAAUe,UAAQ,QAAA,CAAA;AAE7C,SACG,oBAAA,WAAA,EAAU,KAAU,WAAWH,GAAGf,QAAQoB,MAAMlB,SAAS,GAAOW,GAAAA,QAC9D,UAACV,CAAAA,YAAYM,eAAeS,QAC/B,CAAA;AAEJ,CACF;"}