import { jsxs, Fragment, jsx } from "@emotion/react/jsx-runtime";
import { useState, useRef } from "react";
import uniqueId from "lodash/uniqueId";
import accept from "attr-accept";
import { setId } from "../../../utils/setId.js";
import { useUniqueId } from "../../../hooks/useUniqueId.js";
import { Doc } from "@hitachivantara/uikit-react-icons";
import { convertUnits } from "../utils.js";
import { useClasses } from "./DropZone.styles.js";
import { staticClasses } from "./DropZone.styles.js";
import { HvLabel } from "../../Forms/Label/Label.js";
import { HvInfoMessage } from "../../Forms/InfoMessage/InfoMessage.js";
import { HvTypography } from "../../Typography/Typography.js";
const HvDropZone = ({
  id: idProp,
  classes: classesProp,
  labels,
  acceptedFiles,
  maxFileSize,
  inputProps,
  hideLabels,
  multiple = true,
  disabled = false,
  onFilesAdded
}) => {
  const id = useUniqueId(idProp, "dropzone");
  const {
    classes,
    cx
  } = useClasses(classesProp);
  const [dragState, setDrag] = useState(false);
  const inputRef = useRef(null);
  const leaveDropArea = () => {
    setDrag(false);
  };
  const enterDropArea = () => {
    setDrag(true);
  };
  const onChangeHandler = (filesList) => {
    const filesToProcess = Object.keys(filesList).map((e) => filesList[e]);
    const newFiles = [];
    filesToProcess.forEach((file) => {
      const newFile = file;
      const isSizeAllowed = file.size <= maxFileSize;
      const isFileAccepted = !acceptedFiles.length || acceptedFiles.indexOf(file.type.split("/")[1]) > -1 || acceptedFiles.some((acceptExtension) => accept({
        name: file.name,
        type: file.type
      }, acceptExtension));
      if (!isFileAccepted) {
        newFile.errorMessage = labels == null ? void 0 : labels.fileTypeError;
        newFile.status = "fail";
      } else if (!isSizeAllowed) {
        newFile.errorMessage = labels == null ? void 0 : labels.fileSizeError;
        newFile.status = "fail";
      }
      newFile.id = uniqueId("uploaded-file-data-");
      newFiles.push(newFile);
    });
    onFilesAdded == null ? void 0 : onFilesAdded(newFiles);
  };
  return /* @__PURE__ */ jsxs(Fragment, { children: [
    !hideLabels && /* @__PURE__ */ jsxs("div", { id, className: classes.dropZoneLabelsGroup, children: [
      /* @__PURE__ */ jsx(HvLabel, { id: setId(id, "input-file-label"), htmlFor: setId(id, "input-file"), label: labels == null ? void 0 : labels.dropzone, className: classes.dropZoneLabel }),
      /* @__PURE__ */ jsxs(HvInfoMessage, { id: setId(id, "description"), children: [
        Number.isInteger(maxFileSize) && `${labels == null ? void 0 : labels.sizeWarning} ${convertUnits(maxFileSize)}`,
        (labels == null ? void 0 : labels.acceptedFiles) && labels.acceptedFiles,
        !(labels == null ? void 0 : labels.acceptedFiles) && acceptedFiles.length > 0 && ` (${acceptedFiles.join(", ")})`
      ] })
    ] }),
    /* @__PURE__ */ jsxs("div", { id: setId(id, "input-file-container"), className: cx(classes.dropZoneContainer, {
      [classes.dragAction]: dragState,
      [classes.dropZoneContainerDisabled]: disabled
    }), children: [
      /* @__PURE__ */ jsx("input", { id: setId(id, "input-file"), className: classes.inputArea, type: "file", multiple, disabled, title: !disabled ? `${labels == null ? void 0 : labels.drag} ${labels == null ? void 0 : labels.selectFiles}` : "", onClick: () => {
        if (inputRef.current) {
          inputRef.current.value = "";
        }
      }, onChange: () => {
        var _a;
        if (!disabled && ((_a = inputRef.current) == null ? void 0 : _a.files)) {
          onChangeHandler(inputRef.current.files);
        }
      }, onDragEnter: (event) => {
        if (!disabled) {
          enterDropArea();
          event.stopPropagation();
          event.preventDefault();
        }
      }, onDragLeave: leaveDropArea, onDropCapture: leaveDropArea, onDragOver: (event) => {
        if (!disabled) {
          enterDropArea();
          event.stopPropagation();
          event.preventDefault();
        }
      }, onDrop: (event) => {
        if (!disabled) {
          const {
            files
          } = event.dataTransfer;
          if (multiple === true || files.length === 1) {
            event.stopPropagation();
            event.preventDefault();
            onChangeHandler(files);
          }
        }
      }, ref: inputRef, accept: acceptedFiles.join(","), ...inputProps }),
      /* @__PURE__ */ jsx("div", { className: classes == null ? void 0 : classes.dropArea, children: dragState ? /* @__PURE__ */ jsx("div", { className: classes.dropZoneAreaLabels, children: /* @__PURE__ */ jsx(HvTypography, { className: classes.dragText, children: labels == null ? void 0 : labels.dropFiles }) }) : /* @__PURE__ */ jsxs(Fragment, { children: [
        /* @__PURE__ */ jsx(Doc, { iconSize: "M", className: classes.dropZoneAreaIcon, color: disabled ? "secondary_60" : "secondary" }),
        /* @__PURE__ */ jsx("div", { className: classes.dropZoneAreaLabels, children: /* @__PURE__ */ jsxs(HvTypography, { className: classes.dragText, children: [
          labels == null ? void 0 : labels.drag,
          /* @__PURE__ */ jsx("span", { className: classes.selectFilesText, children: ` ${labels == null ? void 0 : labels.selectFiles}` })
        ] }) })
      ] }) })
    ] })
  ] });
};
export {
  HvDropZone,
  staticClasses as dropZoneClasses
};
//# sourceMappingURL=DropZone.js.map
