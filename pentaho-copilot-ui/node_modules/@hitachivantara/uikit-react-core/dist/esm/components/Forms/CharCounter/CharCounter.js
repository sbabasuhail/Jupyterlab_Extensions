import { jsxs, jsx } from "@emotion/react/jsx-runtime";
import { useContext } from "react";
import { useDefaultProps } from "../../../hooks/useDefaultProps.js";
import { setId } from "../../../utils/setId.js";
import { useClasses } from "./CharCounter.styles.js";
import { staticClasses } from "./CharCounter.styles.js";
import { HvFormElementContext } from "../FormElement/context/FormElementContext.js";
import { HvTypography } from "../../Typography/Typography.js";
const HvCharCounter = (props) => {
  const {
    separator = "/",
    maxCharQuantity,
    currentCharQuantity = 0,
    classes: classesProp,
    className,
    id,
    disabled,
    disableGutter = false,
    ...others
  } = useDefaultProps("HvCharCounter", props);
  const {
    classes,
    cx
  } = useClasses(classesProp);
  const {
    elementId,
    elementDisabled
  } = useContext(HvFormElementContext);
  const localDisabled = disabled || elementDisabled;
  const localId = id ?? setId(elementId, "counter");
  const currentId = setId(localId, "currentQuantity");
  const maxQuantityId = setId(localId, "maxQuantity");
  const isOverloaded = currentCharQuantity > maxCharQuantity;
  return /* @__PURE__ */ jsxs("div", { id: localId, className: cx(classes.root, {
    [classes.counterDisabled]: !!localDisabled,
    [classes.gutter]: !disableGutter
  }, className), "aria-live": "polite", "aria-disabled": localDisabled, ...others, children: [
    /* @__PURE__ */ jsx(HvTypography, { id: currentId, className: cx({
      [classes.overloaded]: isOverloaded && !localDisabled,
      [classes.counterDisabled]: !!localDisabled
    }), variant: "label", component: "label", children: currentCharQuantity }),
    /* @__PURE__ */ jsx(HvTypography, { id: maxQuantityId, className: cx({
      [classes.overloaded]: isOverloaded && !localDisabled,
      [classes.counterDisabled]: !!localDisabled
    }), variant: "body", component: "label", children: ` ${separator} ${maxCharQuantity}` })
  ] });
};
export {
  HvCharCounter,
  staticClasses as charCounterClasses
};
//# sourceMappingURL=CharCounter.js.map
