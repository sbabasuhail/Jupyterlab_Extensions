import { jsx } from "@emotion/react/jsx-runtime";
import { forwardRef, useContext } from "react";
import { useClasses } from "./Adornment.styles.js";
import { staticClasses } from "./Adornment.styles.js";
import { HvFormElementDescriptorsContext } from "../FormElement/context/FormElementDescriptorsContext.js";
import { HvFormElementContext } from "../FormElement/context/FormElementContext.js";
const noop = () => {
};
const HvAdornment = forwardRef(({
  id,
  classes: classesProp,
  className,
  icon,
  showWhen = void 0,
  onClick,
  isVisible = void 0,
  ...others
}, ref) => {
  var _a;
  const {
    classes,
    cx
  } = useClasses(classesProp);
  const {
    elementStatus = ""
  } = useContext(HvFormElementContext);
  const {
    input
  } = useContext(HvFormElementDescriptorsContext);
  const displayIcon = isVisible ?? (showWhen === void 0 || elementStatus === showWhen);
  const isClickable = !!onClick;
  return isClickable ? /* @__PURE__ */ jsx("button", { id, ref, type: "button", tabIndex: -1, "aria-controls": (_a = input == null ? void 0 : input[0]) == null ? void 0 : _a.id, className: cx(classes.root, classes.adornment, classes.adornmentButton, {
    [classes.hideIcon]: !displayIcon
  }, className), onClick, onMouseDown: (event) => event.preventDefault(), onKeyDown: noop, ...others, children: /* @__PURE__ */ jsx("div", { className: classes.icon, children: icon }) }) : /* @__PURE__ */ jsx("div", { id, ref, className: cx(classes.root, classes.adornment, classes.adornmentIcon, {
    [classes.hideIcon]: !displayIcon
  }, className), role: "presentation", ...others, children: /* @__PURE__ */ jsx("div", { className: classes.icon, children: icon }) });
});
export {
  HvAdornment,
  staticClasses as adornmentClasses
};
//# sourceMappingURL=Adornment.js.map
