import { jsxs, Fragment, jsx } from "@emotion/react/jsx-runtime";
import { useContext } from "react";
import { useDefaultProps } from "../../../hooks/useDefaultProps.js";
import { setId } from "../../../utils/setId.js";
import { findDescriptors } from "../FormElement/utils/FormUtils.js";
import { useClasses } from "./Label.styles.js";
import { staticClasses } from "./Label.styles.js";
import { HvFormElementContext } from "../FormElement/context/FormElementContext.js";
import { HvTypography } from "../../Typography/Typography.js";
const HvLabel = (props) => {
  var _a, _b, _c;
  const {
    id,
    classes: classesProp,
    className,
    children,
    label,
    disabled,
    required,
    htmlFor: htmlForProp,
    ...others
  } = useDefaultProps("HvLabel", props);
  const {
    classes,
    cx
  } = useClasses(classesProp);
  const {
    elementId,
    elementDisabled,
    elementRequired
  } = useContext(HvFormElementContext);
  const localDisabled = disabled || elementDisabled;
  const localRequired = required || elementRequired;
  const localId = id ?? setId(elementId, "label");
  const forId = htmlForProp || ((_c = (_b = (_a = findDescriptors(children)) == null ? void 0 : _a.input) == null ? void 0 : _b[0]) == null ? void 0 : _c.id);
  return /* @__PURE__ */ jsxs(Fragment, { children: [
    /* @__PURE__ */ jsxs(HvTypography, { id: localId, className: cx(classes.root, {
      [classes.labelDisabled]: !!localDisabled,
      [classes.childGutter]: !!(children && label)
    }, className), variant: "label", component: "label", htmlFor: forId, ...others, children: [
      label,
      localRequired && /* @__PURE__ */ jsx("span", { "aria-hidden": "true", children: "*" })
    ] }),
    children
  ] });
};
export {
  HvLabel,
  staticClasses as labelClasses
};
//# sourceMappingURL=Label.js.map
