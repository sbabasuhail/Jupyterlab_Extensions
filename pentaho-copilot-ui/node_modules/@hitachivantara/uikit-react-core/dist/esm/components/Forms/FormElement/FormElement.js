import { jsx } from "@emotion/react/jsx-runtime";
import { useMemo } from "react";
import { useDefaultProps } from "../../../hooks/useDefaultProps.js";
import { useUniqueId } from "../../../hooks/useUniqueId.js";
import { findDescriptors } from "./utils/FormUtils.js";
import { HvFormElementContextProvider } from "./context/FormElementContext.js";
import { HvFormElementValueContextProvider } from "./context/FormElementValueContext.js";
import { HvFormElementDescriptorsContextProvider } from "./context/FormElementDescriptorsContext.js";
import { useClasses } from "./FormElement.styles.js";
import { staticClasses } from "./FormElement.styles.js";
const HvFormElement = (props) => {
  const {
    classes: classesProp,
    className,
    children,
    id,
    name,
    value,
    disabled = false,
    required = false,
    readOnly = false,
    status = "standBy",
    ...others
  } = useDefaultProps("HvFormElement", props);
  const {
    classes,
    cx
  } = useClasses(classesProp);
  const elementId = useUniqueId(id, "hvformelement");
  const contextValue = useMemo(() => ({
    elementId,
    elementName: name,
    elementStatus: status,
    elementDisabled: disabled,
    elementRequired: required,
    elementReadOnly: readOnly
  }), [disabled, elementId, name, readOnly, required, status]);
  const descriptors = useMemo(() => findDescriptors(children), [children]);
  return /* @__PURE__ */ jsx("div", { id, className: cx(classes.root, className), ...others, children: /* @__PURE__ */ jsx(HvFormElementContextProvider, { value: contextValue, children: /* @__PURE__ */ jsx(HvFormElementValueContextProvider, { value, children: /* @__PURE__ */ jsx(HvFormElementDescriptorsContextProvider, { value: descriptors, children }) }) }) });
};
HvFormElement.formElementType = "formelement";
export {
  HvFormElement,
  staticClasses as formElementClasses
};
//# sourceMappingURL=FormElement.js.map
