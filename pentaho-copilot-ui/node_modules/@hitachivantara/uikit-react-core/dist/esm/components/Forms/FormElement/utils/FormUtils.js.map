{"version":3,"file":"FormUtils.js","sources":["../../../../../../src/components/Forms/FormElement/utils/FormUtils.ts"],"sourcesContent":["import React from \"react\";\n\ninterface Descriptor {\n  id?: string;\n  htmlFor?: string;\n}\n/**\n * Scans the element's children looking for the children IDs that match the different form element types.\n * This function will produce an object that has a key for each provided name\n * Inside each key there will be an array with each id of the found descriptor.\n *\n * @param {Array} children - The children inside the form element to scan.\n * @param {Object} descriptors - Initial descriptors map (used for recursion).\n *\n */\nconst findDescriptors = (\n  children,\n  descriptors: {\n    input: Descriptor[];\n    label: Descriptor[];\n    description: Descriptor[];\n    controlled: Descriptor[];\n    errormessage: Descriptor[];\n    HvCalendarHeader?: Descriptor[];\n  } = {\n    input: [],\n    label: [],\n    description: [],\n    controlled: [],\n    errormessage: [],\n\n    // TODO: refactor this out\n    HvCalendarHeader: [],\n  }\n) => {\n  React.Children.forEach(children, (child) => {\n    if (child?.type?.formElementType && child.props?.id) {\n      descriptors[child.type.formElementType]?.push({\n        id: child.props?.id,\n        htmlFor: child.props?.htmlFor,\n      });\n    }\n\n    if (child?.type?.formElementType !== \"formelement\") {\n      findDescriptors(child?.props?.children, descriptors);\n    }\n  });\n\n  return descriptors;\n};\n\nconst getIdReferenceListFor = (\n  formElementType,\n  descriptors,\n  filterFor = null\n) => {\n  const referenceList = descriptors?.[formElementType]\n    ?.filter((d) => d.htmlFor !== filterFor)\n    ?.map((d) => d.id)\n    .join(\" \")\n    .trim();\n\n  return referenceList !== \"\" ? referenceList : undefined;\n};\n\nconst getIdReferenceFor = (formElementType, descriptors, filterFor = null) => {\n  const referenceList = descriptors?.[formElementType]\n    ?.filter((d) => d.htmlFor !== filterFor)\n    ?.map((d) => d.id)?.[0];\n\n  return referenceList !== \"\" ? referenceList : undefined;\n};\n\nconst buildFormElementPropsFromContext = (\n  name,\n  disabled,\n  readOnly,\n  required,\n  context\n) => {\n  return {\n    name: name || context?.elementName,\n    disabled: disabled !== undefined ? disabled : context?.elementDisabled,\n    readOnly: readOnly !== undefined ? readOnly : context?.elementReadOnly,\n    required: required !== undefined ? required : context?.elementRequired,\n    status: context?.elementStatus,\n  };\n};\n\nconst buildAriaPropsFromContext = (props, context, isInvalid, inputId) => {\n  const arias = {\n    \"aria-labelledby\":\n      props?.[\"aria-labelledby\"] !== undefined\n        ? props?.[\"aria-labelledby\"]\n        : getIdReferenceListFor(\"label\", context?.descriptors, inputId),\n    \"aria-describedby\":\n      props?.[\"aria-describedby\"] !== undefined\n        ? props?.[\"aria-describedby\"]\n        : getIdReferenceListFor(\"description\", context?.descriptors),\n    \"aria-controls\":\n      props?.[\"aria-controls\"] !== undefined\n        ? props?.[\"aria-controls\"]\n        : getIdReferenceListFor(\"controlled\", context?.descriptors),\n  };\n\n  if (isInvalid) {\n    arias[\"aria-invalid\"] = isInvalid;\n    arias[\"aria-errormessage\"] =\n      props?.[\"aria-errormessage\"] !== undefined\n        ? props?.[\"aria-errormessage\"]\n        : getIdReferenceFor(\"errormessage\", context?.descriptors);\n  }\n\n  return arias;\n};\n\nexport {\n  findDescriptors,\n  getIdReferenceListFor,\n  getIdReferenceFor,\n  buildFormElementPropsFromContext,\n  buildAriaPropsFromContext,\n};\n"],"names":["findDescriptors","children","descriptors","input","label","description","controlled","errormessage","HvCalendarHeader","Children","forEach","child","type","formElementType","props","id","push","htmlFor","getIdReferenceListFor","filterFor","referenceList","filter","d","map","join","trim","undefined","getIdReferenceFor","buildFormElementPropsFromContext","name","disabled","readOnly","required","context","elementName","elementDisabled","elementReadOnly","elementRequired","status","elementStatus","buildAriaPropsFromContext","isInvalid","inputId","arias"],"mappings":";AAeMA,MAAAA,kBAAkBA,CACtBC,UACAC,cAOI;AAAA,EACFC,OAAO,CAAE;AAAA,EACTC,OAAO,CAAE;AAAA,EACTC,aAAa,CAAE;AAAA,EACfC,YAAY,CAAE;AAAA,EACdC,cAAc,CAAE;AAAA;AAAA,EAGhBC,kBAAkB,CAAA;AACpB,MACG;AACGC,iBAAAA,SAASC,QAAQT,UAAWU,CAAU,UAAA;;AAC1C,UAAIA,oCAAOC,SAAPD,mBAAaE,sBAAmBF,WAAMG,UAANH,mBAAaI,KAAI;AACnDb,wBAAYS,MAAMC,KAAKC,eAAe,MAAtCX,mBAAyCc,KAAK;AAAA,QAC5CD,KAAIJ,WAAMG,UAANH,mBAAaI;AAAAA,QACjBE,UAASN,WAAMG,UAANH,mBAAaM;AAAAA,MAAAA;AAAAA,IAE1B;AAEIN,UAAAA,oCAAOC,SAAPD,mBAAaE,qBAAoB,eAAe;AAClCF,uBAAAA,oCAAOG,UAAPH,mBAAcV,UAAUC,WAAW;AAAA,IACrD;AAAA,EAAA,CACD;AAEMA,SAAAA;AACT;AAEA,MAAMgB,wBAAwBA,CAC5BL,iBACAX,aACAiB,YAAY,SACT;;AACH,QAAMC,iBAAgBlB,sDAAcW,qBAAdX,mBAClBmB,OAAQC,CAAAA,MAAMA,EAAEL,YAAYE,eADVjB,mBAElBqB,IAAKD,OAAMA,EAAEP,IACdS,KAAK,KACLC;AAEIL,SAAAA,kBAAkB,KAAKA,gBAAgBM;AAChD;AAEA,MAAMC,oBAAoBA,CAACd,iBAAiBX,aAAaiB,YAAY,SAAS;;AAC5E,QAAMC,iBAAgBlB,4DAAcW,qBAAdX,mBAClBmB,OAAQC,CAAMA,MAAAA,EAAEL,YAAYE,eADVjB,mBAElBqB,IAAKD,CAAAA,MAAMA,EAAEP,QAFKb,mBAEC;AAEhBkB,SAAAA,kBAAkB,KAAKA,gBAAgBM;AAChD;AAEA,MAAME,mCAAmCA,CACvCC,MACAC,UACAC,UACAC,UACAC,YACG;AACI,SAAA;AAAA,IACLJ,MAAMA,SAAQI,mCAASC;AAAAA,IACvBJ,UAAUA,aAAaJ,SAAYI,WAAWG,mCAASE;AAAAA,IACvDJ,UAAUA,aAAaL,SAAYK,WAAWE,mCAASG;AAAAA,IACvDJ,UAAUA,aAAaN,SAAYM,WAAWC,mCAASI;AAAAA,IACvDC,QAAQL,mCAASM;AAAAA,EAAAA;AAErB;AAEA,MAAMC,4BAA4BA,CAAC1B,OAAOmB,SAASQ,WAAWC,YAAY;AACxE,QAAMC,QAAQ;AAAA,IACZ,oBACE7B,+BAAQ,wBAAuBY,SAC3BZ,+BAAQ,qBACRI,sBAAsB,SAASe,mCAAS/B,aAAawC,OAAO;AAAA,IAClE,qBACE5B,+BAAQ,yBAAwBY,SAC5BZ,+BAAQ,sBACRI,sBAAsB,eAAee,mCAAS/B,WAAW;AAAA,IAC/D,kBACEY,+BAAQ,sBAAqBY,SACzBZ,+BAAQ,mBACRI,sBAAsB,cAAce,mCAAS/B,WAAW;AAAA,EAAA;AAGhE,MAAIuC,WAAW;AACbE,UAAM,cAAc,IAAIF;AACxBE,UAAM,mBAAmB,KACvB7B,+BAAQ,0BAAyBY,SAC7BZ,+BAAQ,uBACRa,kBAAkB,gBAAgBM,mCAAS/B,WAAW;AAAA,EAC9D;AAEOyC,SAAAA;AACT;"}