{"version":3,"file":"Adornment.js","sources":["../../../../../src/components/Forms/Adornment/Adornment.tsx"],"sourcesContent":["import { useContext, forwardRef, MouseEventHandler, ForwardedRef } from \"react\";\n\nimport { HvBaseProps } from \"@core/types/generic\";\nimport { ExtractNames } from \"@core/utils/classes\";\n\nimport { staticClasses, useClasses } from \"./Adornment.styles\";\nimport {\n  HvFormElementContext,\n  HvFormElementDescriptorsContext,\n  HvFormStatus,\n} from \"../FormElement\";\n\nconst noop = () => {};\n\nexport { staticClasses as adornmentClasses };\n\nexport type HvAdornmentClasses = ExtractNames<typeof useClasses>;\n\nexport interface HvAdornmentProps\n  extends HvBaseProps<\n    HTMLDivElement | HTMLButtonElement,\n    \"onMouseDown\" | \"onKeyDown\"\n  > {\n  /** The icon to be added into the input. */\n  icon: React.ReactNode;\n  /** When the adornment should be displayed. */\n  showWhen?: HvFormStatus;\n  /** Function to be executed when this element is clicked. */\n  onClick?: MouseEventHandler<HTMLButtonElement> | undefined;\n  /** If this property is defined the adornment visibility will be exclusively controlled by this value. */\n  isVisible?: boolean;\n  /** A Jss Object used to override or extend the styles applied to the component. */\n  classes?: HvAdornmentClasses;\n}\n\n/**\n * Allows to add a decorative icon or an action to a form element, usually on the right side of an input.\n * E.g., the reveal password button.\n *\n * In addition to the showWhen feature, which uses the form element's context validation state to determine\n * its visibility, this component also ensures that it does not steal focus from the input and that it is\n * not accessible using the keyboard.\n *\n * As such, its functionality, if any, for accessibility purposes must be provided through an alternative mean,\n * or by using a regular icon button or toggle button instead.\n */\nexport const HvAdornment = forwardRef<\n  HTMLDivElement | HTMLButtonElement,\n  HvAdornmentProps\n>(\n  (\n    {\n      id,\n      classes: classesProp,\n      className,\n      icon,\n      showWhen = undefined,\n      onClick,\n      isVisible = undefined,\n      ...others\n    },\n    ref\n  ) => {\n    const { classes, cx } = useClasses(classesProp);\n\n    const { elementStatus = \"\" } = useContext(HvFormElementContext);\n\n    const { input } = useContext(HvFormElementDescriptorsContext);\n\n    const displayIcon =\n      isVisible ?? (showWhen === undefined || elementStatus === showWhen);\n\n    const isClickable = !!onClick;\n\n    return isClickable ? (\n      <button\n        id={id}\n        ref={ref as ForwardedRef<HTMLButtonElement>}\n        type=\"button\"\n        tabIndex={-1}\n        aria-controls={input?.[0]?.id}\n        className={cx(\n          classes.root,\n          classes.adornment,\n          classes.adornmentButton,\n          { [classes.hideIcon]: !displayIcon },\n          className\n        )}\n        onClick={onClick}\n        onMouseDown={(event) => event.preventDefault()}\n        onKeyDown={noop}\n        {...others}\n      >\n        <div className={classes.icon}>{icon}</div>\n      </button>\n    ) : (\n      <div\n        id={id}\n        ref={ref as ForwardedRef<HTMLDivElement>}\n        className={cx(\n          classes.root,\n          classes.adornment,\n          classes.adornmentIcon,\n          { [classes.hideIcon]: !displayIcon },\n          className\n        )}\n        role=\"presentation\"\n        {...others}\n      >\n        <div className={classes.icon}>{icon}</div>\n      </div>\n    );\n  }\n);\n"],"names":["noop","HvAdornment","forwardRef","id","classes","classesProp","className","icon","showWhen","undefined","onClick","isVisible","others","ref","cx","useClasses","elementStatus","useContext","HvFormElementContext","input","HvFormElementDescriptorsContext","displayIcon","isClickable","root","adornment","adornmentButton","hideIcon","event","preventDefault","adornmentIcon"],"mappings":";;;;;;AAYA,MAAMA,OAAOA,MAAM;AAAC;AAkCPC,MAAAA,cAAcC,WAIzB,CACE;AAAA,EACEC;AAAAA,EACAC,SAASC;AAAAA,EACTC;AAAAA,EACAC;AAAAA,EACAC,WAAWC;AAAAA,EACXC;AAAAA,EACAC,YAAYF;AAAAA,EACZ,GAAGG;AACL,GACAC,QACG;;AACG,QAAA;AAAA,IAAET;AAAAA,IAASU;AAAAA,EAAAA,IAAOC,WAAWV,WAAW;AAExC,QAAA;AAAA,IAAEW,gBAAgB;AAAA,EAAA,IAAOC,WAAWC,oBAAoB;AAExD,QAAA;AAAA,IAAEC;AAAAA,EAAAA,IAAUF,WAAWG,+BAA+B;AAE5D,QAAMC,cACJV,cAAcH,aAAaC,UAAaO,kBAAkBR;AAEtDc,QAAAA,cAAc,CAAC,CAACZ;AAEfY,SAAAA,kCACJ,UACC,EAAA,IACA,KACA,MAAK,UACL,UAAU,IACV,kBAAeH,oCAAQ,OAARA,mBAAYhB,IAC3B,WAAWW,GACTV,QAAQmB,MACRnB,QAAQoB,WACRpB,QAAQqB,iBACR;AAAA,IAAE,CAACrB,QAAQsB,QAAQ,GAAG,CAACL;AAAAA,EAAAA,GACvBf,SACF,GACA,SACA,aAAcqB,CAAUA,UAAAA,MAAMC,eAAe,GAC7C,WAAW5B,MACX,GAAIY,QAEJ,8BAAC,OAAI,EAAA,WAAWR,QAAQG,MAAOA,UAAK,KAAA,CAAA,EACtC,CAAA,IAEA,oBAAC,SACC,IACA,KACA,WAAWO,GACTV,QAAQmB,MACRnB,QAAQoB,WACRpB,QAAQyB,eACR;AAAA,IAAE,CAACzB,QAAQsB,QAAQ,GAAG,CAACL;AAAAA,EAAAA,GACvBf,SACF,GACA,MAAK,gBACDM,GAAAA,QAEJ,UAAA,oBAAC,OAAI,EAAA,WAAWR,QAAQG,MAAOA,gBAAK,EACtC,CAAA;AAEJ,CACF;"}