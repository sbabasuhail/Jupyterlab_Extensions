{"version":3,"file":"RadioGroup.js","sources":["../../../../src/components/RadioGroup/RadioGroup.tsx"],"sourcesContent":["import { Children, useMemo, useCallback, cloneElement } from \"react\";\n\nimport { useDefaultProps } from \"@core/hooks/useDefaultProps\";\nimport { HvBaseProps } from \"@core/types/generic\";\nimport { useUniqueId } from \"@core/hooks/useUniqueId\";\nimport { useControlled } from \"@core/hooks/useControlled\";\nimport { setId } from \"@core/utils/setId\";\nimport {\n  HvFormElement,\n  HvFormStatus,\n  HvInfoMessage,\n  HvLabel,\n  HvWarningText,\n} from \"@core/components/Forms\";\nimport { ExtractNames } from \"@core/utils/classes\";\n\nimport { staticClasses, useClasses } from \"./RadioGroup.styles\";\n\nexport { staticClasses as radioGroupClasses };\n\nexport type HvRadioGroupClasses = ExtractNames<typeof useClasses>;\n\nexport interface HvRadioGroupProps\n  extends HvBaseProps<HTMLDivElement, \"onChange\"> {\n  /**\n   * The form element name.\n   *\n   * It is propagated to the children radio buttons, unless they already have one (which they shouldn't).\n   */\n  name?: string;\n  /**\n   * The value of the form element, represented in one of the child radio buttons values.\n   *\n   * When defined the radio button group state becomes controlled.\n   */\n  value?: any;\n  /**\n   * When uncontrolled, defines the initial value.\n   */\n  defaultValue?: any;\n  /**\n   * The label of the form element.\n   *\n   * The form element must be labeled for accessibility reasons.\n   * If not provided, an aria-label or aria-labelledby must be provided instead.\n   */\n  label?: React.ReactNode;\n  /**\n   * Provide additional descriptive text for the form element.\n   */\n  description?: React.ReactNode;\n  /**\n   * Indicates that the form element is disabled.\n   * If `true` the state is propagated to the children radio buttons.\n   */\n  disabled?: boolean;\n  /**\n   * Indicates that the form element is not editable.\n   * If `true` the state is propagated to the children radio buttons.\n   */\n  readOnly?: boolean;\n  /**\n   * Indicates that user input is required on the form element.\n   * If `true` the state is propagated to the children radio buttons' input element.\n   */\n  required?: boolean;\n  /**\n   * The status of the form element.\n   *\n   * Valid is correct, invalid is incorrect and standBy means no validations have run.\n   *\n   * When uncontrolled and unspecified it will default to \"standBy\" and change to either \"valid\"\n   * or \"invalid\" after any change to the state.\n   */\n  status?: HvFormStatus;\n  /**\n   * The error message to show when `status` is \"invalid\".\n   */\n  statusMessage?: React.ReactNode;\n  /**\n   * The callback fired when the value changes.\n   */\n  onChange?: (event: React.ChangeEvent<HTMLInputElement>, value: any) => void;\n  /**\n   * Indicates whether the radio buttons group's orientation is horizontal or vertical.\n   *\n   * Defaults to vertical.\n   */\n  orientation?: \"vertical\" | \"horizontal\";\n  /**\n   * A Jss Object used to override or extend the component styles applied.\n   */\n  classes?: HvRadioGroupClasses;\n}\n\nconst getValueFromSelectedChildren = (children: React.ReactNode) => {\n  const childrenArray = Children.toArray(children);\n  const childrenCount = childrenArray.length;\n  for (let i = 0; i !== childrenCount; i += 1) {\n    const child: any = childrenArray[i];\n\n    const childIsControlled = child?.props?.checked !== undefined;\n    const childIsSelected = childIsControlled\n      ? child?.props?.checked\n      : child?.props?.defaultChecked;\n\n    if (childIsSelected) {\n      return child?.props?.value;\n    }\n  }\n\n  return null;\n};\n\n/**\n * A group of radio buttons.\n *\n * A radio group is a type of selection list that can only have a single entry checked at any one time.\n */\nexport const HvRadioGroup = (props: HvRadioGroupProps) => {\n  const {\n    id,\n    classes: classesProp,\n    className,\n    children,\n    name,\n    value: valueProp,\n    defaultValue,\n    label,\n    description,\n    status,\n    statusMessage,\n    required = false,\n    readOnly = false,\n    disabled = false,\n    orientation = \"vertical\",\n    \"aria-label\": ariaLabel,\n    \"aria-labelledby\": ariaLabelledBy,\n    \"aria-describedby\": ariaDescribedBy,\n    \"aria-errormessage\": ariaErrorMessage,\n    onChange,\n    ...others\n  } = useDefaultProps(\"HvRadioGroup\", props);\n\n  const { classes, cx } = useClasses(classesProp);\n\n  const elementId = useUniqueId(id, \"hvradiogroup\");\n\n  const [value, setValue] = useControlled(\n    valueProp,\n    defaultValue !== undefined\n      ? defaultValue\n      : // When uncontrolled and no default value is given,\n        // extract the initial selected values from the children own state\n        () => getValueFromSelectedChildren(children)\n  );\n\n  const onChildChangeInterceptor = useCallback(\n    (\n      childOnChange: (\n        event: React.ChangeEvent<HTMLInputElement>,\n        checked: boolean,\n        value: any\n      ) => void,\n      event: React.ChangeEvent<HTMLInputElement>,\n      isChecked: boolean,\n      newValue: any\n    ) => {\n      childOnChange?.(event, isChecked, newValue);\n\n      onChange?.(event, newValue);\n\n      setValue(newValue);\n    },\n    [onChange, setValue]\n  );\n\n  const modifiedChildren = useMemo(() => {\n    return Children.map(children, (child: any) => {\n      const childValue = child?.props?.value ?? \"on\";\n\n      const childIsSelected = childValue === value;\n\n      return cloneElement(child, {\n        checked: childIsSelected,\n        name: child?.props?.name || name || elementId,\n        onChange: (\n          event: React.ChangeEvent<HTMLInputElement>,\n          isChecked: boolean,\n          newValue: any\n        ) =>\n          onChildChangeInterceptor(\n            child?.props?.onChange,\n            event,\n            isChecked,\n            newValue\n          ),\n        inputProps: {\n          ...child?.props?.inputProps,\n          // Set the required attribute directly in the input\n          // the radio form element context shouldn't be aware so the\n          // label doesn't show redundant asterisk\n          required,\n        },\n        disabled: disabled || child?.props?.disabled,\n        readOnly: readOnly || child?.props?.readOnly,\n      });\n    });\n  }, [\n    children,\n    disabled,\n    elementId,\n    name,\n    onChildChangeInterceptor,\n    readOnly,\n    required,\n    value,\n  ]);\n\n  // The error message area will only be created if:\n  //   - an external element that provides an error message isn't identified via aria-errormessage AND\n  //   - both status and statusMessage properties are being controlled OR\n  //   - status is uncontrolled and required is true\n  const canShowError =\n    ariaErrorMessage == null &&\n    ((status !== undefined && statusMessage !== undefined) ||\n      (status === undefined && required));\n\n  const errorMessageId = canShowError\n    ? setId(elementId, \"error\")\n    : ariaErrorMessage;\n\n  return (\n    <HvFormElement\n      id={id}\n      name={name}\n      status={status || \"standBy\"}\n      disabled={disabled}\n      required={required}\n      readOnly={readOnly}\n      className={cx(classes.root, className)}\n    >\n      {label && (\n        <HvLabel\n          id={setId(elementId, \"label\")}\n          label={label}\n          className={classes.label}\n        />\n      )}\n\n      {description && (\n        <HvInfoMessage id={setId(elementId, \"description\")}>\n          {description}\n        </HvInfoMessage>\n      )}\n\n      <div\n        role=\"radiogroup\"\n        aria-label={ariaLabel}\n        aria-labelledby={\n          ariaLabelledBy || (label && setId(elementId, \"label\")) || undefined\n        }\n        aria-invalid={status === \"invalid\" ? true : undefined}\n        aria-errormessage={status === \"invalid\" ? errorMessageId : undefined}\n        aria-describedby={\n          [description && setId(elementId, \"description\"), ariaDescribedBy]\n            .join(\" \")\n            .trim() || undefined\n        }\n        className={cx(classes.group, {\n          [classes.vertical]: orientation === \"vertical\",\n          [classes.horizontal]: orientation === \"horizontal\",\n          [classes.invalid]: status === \"invalid\",\n        })}\n        {...others}\n      >\n        {modifiedChildren}\n      </div>\n\n      {canShowError && (\n        <HvWarningText\n          id={setId(elementId, \"error\")}\n          disableBorder\n          className={classes.error}\n        >\n          {statusMessage}\n        </HvWarningText>\n      )}\n    </HvFormElement>\n  );\n};\n"],"names":["getValueFromSelectedChildren","children","childrenArray","Children","toArray","childrenCount","length","i","child","childIsControlled","props","checked","undefined","childIsSelected","defaultChecked","value","HvRadioGroup","id","classes","classesProp","className","name","valueProp","defaultValue","label","description","status","statusMessage","required","readOnly","disabled","orientation","ariaLabel","ariaLabelledBy","ariaDescribedBy","ariaErrorMessage","onChange","others","useDefaultProps","cx","useClasses","elementId","useUniqueId","setValue","useControlled","onChildChangeInterceptor","useCallback","childOnChange","event","isChecked","newValue","modifiedChildren","useMemo","map","childValue","cloneElement","inputProps","canShowError","errorMessageId","setId","root","join","trim","group","vertical","horizontal","invalid","error"],"mappings":"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"}