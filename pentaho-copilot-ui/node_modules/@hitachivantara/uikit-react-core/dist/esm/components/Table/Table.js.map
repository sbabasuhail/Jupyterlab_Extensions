{"version":3,"file":"Table.js","sources":["../../../../src/components/Table/Table.tsx"],"sourcesContent":["import { forwardRef, TableHTMLAttributes, useMemo, useRef } from \"react\";\n\nimport { useDefaultProps } from \"@core/hooks/useDefaultProps\";\nimport { ExtractNames } from \"@core/utils/classes\";\n\nimport TableContext from \"./TableContext\";\nimport { staticClasses, useClasses } from \"./Table.styles\";\n\nexport { staticClasses as tableClasses };\n\nexport type HvTableClasses = ExtractNames<typeof useClasses>;\n\nexport type HvTableVariant = \"listrow\" | \"default\";\nexport type HvTableCellAlign =\n  | \"center\"\n  | \"inherit\"\n  | \"justify\"\n  | \"left\"\n  | \"right\";\nexport type HvTableCellType = \"body\" | \"footer\" | \"head\";\nexport type HvTableCellVariant =\n  | \"checkbox\"\n  | \"expand\"\n  | \"actions\"\n  | \"default\"\n  | \"none\";\n\nexport interface HvTableProps extends TableHTMLAttributes<HTMLTableElement> {\n  /**\n   * The component used for the root node. Either a string to use a HTML element or a component.\n   * Defaults to `table`.\n   *\n   * When using non-table elements, layout is up to the developer using the component.\n   */\n  component?: React.ElementType;\n  /** Content to be rendered */\n  children: React.ReactNode;\n  /** Whether the `HvTable` has a sticky header row. */\n  stickyHeader?: boolean;\n  /** Whether the `HvTable` has sticky columns. */\n  stickyColumns?: boolean;\n  /** Whether the `HvTable` has the list row styles or the default. */\n  variant?: HvTableVariant;\n  /** A Jss Object used to override or extend the styles applied to the component. */\n  classes?: HvTableClasses;\n}\n\nconst defaultComponent = \"table\";\n\nconst computeTablePartComponents = (rootComponent) => {\n  if (rootComponent === \"table\") {\n    return {\n      Table: \"table\",\n      THead: \"thead\",\n      TBody: \"tbody\",\n      Tr: \"tr\",\n      Th: \"th\",\n      Td: \"td\",\n    };\n  }\n\n  return {\n    Table: rootComponent,\n    THead: rootComponent,\n    TBody: rootComponent,\n    Tr: rootComponent,\n    Th: rootComponent,\n    Td: rootComponent,\n  };\n};\n\n/**\n * A table gathers relational data. It displays values arranged to allow quick numerical analysis like comparison and sorting.\n *\n * The **HvTable** component offers a set of HTML-equivalent elements, **styled to Design System's specification**,\n * for building tables.\n * You can rely on these **elements** when your table doesnâ€™t have many interactions or you need it to be very lightweight.\n *\n * For better data handling and **advanced features** we recommend the use of the utility hooks collection.\n * See the <a href=\"?id=guides-table-table-hooks--use-hv-hooks&viewMode=docs\" target=\"_self\">Table Hooks documentation</a> for more details.\n */\nexport const HvTable = forwardRef<HTMLElement, HvTableProps>((props, ref) => {\n  const {\n    classes: classesProp,\n    className,\n    component = defaultComponent,\n    stickyHeader = false,\n    stickyColumns = false,\n    variant = \"default\",\n    ...others\n  } = useDefaultProps(\"HvTable\", props);\n  const { classes, cx } = useClasses(classesProp);\n\n  const containerRef = useRef(ref);\n\n  const components = useMemo(\n    () => computeTablePartComponents(component),\n    [component]\n  );\n\n  const tableContext = useMemo(\n    () => ({ components, variant, containerRef }),\n    [components, variant, containerRef]\n  );\n\n  const Table = useMemo(() => components.Table, [components]);\n\n  return (\n    <TableContext.Provider value={tableContext}>\n      <Table\n        ref={ref}\n        role={component === defaultComponent ? null : \"table\"}\n        className={cx(\n          classes.root,\n          {\n            [classes.stickyHeader]: stickyHeader,\n            [classes.stickyColumns]: stickyColumns,\n            [classes.listRow]: variant === \"listrow\",\n          },\n          className\n        )}\n        {...others}\n      />\n    </TableContext.Provider>\n  );\n});\n"],"names":["defaultComponent","computeTablePartComponents","rootComponent","Table","THead","TBody","Tr","Th","Td","HvTable","forwardRef","props","ref","classes","classesProp","className","component","stickyHeader","stickyColumns","variant","others","useDefaultProps","cx","useClasses","containerRef","useRef","components","useMemo","tableContext","root","listRow"],"mappings":";;;;;;AA+CA,MAAMA,mBAAmB;AAEzB,MAAMC,6BAA8BC,CAAkB,kBAAA;AACpD,MAAIA,kBAAkB,SAAS;AACtB,WAAA;AAAA,MACLC,OAAO;AAAA,MACPC,OAAO;AAAA,MACPC,OAAO;AAAA,MACPC,IAAI;AAAA,MACJC,IAAI;AAAA,MACJC,IAAI;AAAA,IAAA;AAAA,EAER;AAEO,SAAA;AAAA,IACLL,OAAOD;AAAAA,IACPE,OAAOF;AAAAA,IACPG,OAAOH;AAAAA,IACPI,IAAIJ;AAAAA,IACJK,IAAIL;AAAAA,IACJM,IAAIN;AAAAA,EAAAA;AAER;AAYO,MAAMO,UAAUC,WAAsC,CAACC,OAAOC,QAAQ;AACrE,QAAA;AAAA,IACJC,SAASC;AAAAA,IACTC;AAAAA,IACAC,YAAYhB;AAAAA,IACZiB,eAAe;AAAA,IACfC,gBAAgB;AAAA,IAChBC,UAAU;AAAA,IACV,GAAGC;AAAAA,EAAAA,IACDC,gBAAgB,WAAWV,KAAK;AAC9B,QAAA;AAAA,IAAEE;AAAAA,IAASS;AAAAA,EAAAA,IAAOC,WAAWT,WAAW;AAExCU,QAAAA,eAAeC,OAAOb,GAAG;AAEzBc,QAAAA,aAAaC,QACjB,MAAM1B,2BAA2Be,SAAS,GAC1C,CAACA,SAAS,CACZ;AAEMY,QAAAA,eAAeD,QACnB,OAAO;AAAA,IAAED;AAAAA,IAAYP;AAAAA,IAASK;AAAAA,EAC9B,IAAA,CAACE,YAAYP,SAASK,YAAY,CACpC;AAEA,QAAMrB,QAAQwB,QAAQ,MAAMD,WAAWvB,OAAO,CAACuB,UAAU,CAAC;AAE1D,6BACG,aAAa,UAAb,EAAsB,OAAOE,cAC5B,UAAC,oBAAA,OAAA,EACC,KACA,MAAMZ,cAAchB,mBAAmB,OAAO,SAC9C,WAAWsB,GACTT,QAAQgB,MACR;AAAA,IACE,CAAChB,QAAQI,YAAY,GAAGA;AAAAA,IACxB,CAACJ,QAAQK,aAAa,GAAGA;AAAAA,IACzB,CAACL,QAAQiB,OAAO,GAAGX,YAAY;AAAA,EAEjCJ,GAAAA,SACF,GACA,GAAIK,OAAO,CAAA,EAEf,CAAA;AAEJ,CAAC;"}