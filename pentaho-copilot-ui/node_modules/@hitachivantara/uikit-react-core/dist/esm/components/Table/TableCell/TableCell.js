import { jsx } from "@emotion/react/jsx-runtime";
import capitalize from "lodash/capitalize";
import { forwardRef, useContext, useState, useEffect } from "react";
import { theme } from "@hitachivantara/uikit-styles";
import { checkValidHexColorValue } from "../../../utils/checkValidHexColorValue.js";
import { getVarValue } from "../../../utils/theme.js";
import { hexToRgbA } from "../../../utils/hexToRgbA.js";
import { useTheme } from "../../../hooks/useTheme.js";
import TableContext from "../TableContext.js";
import TableSectionContext from "../TableSectionContext.js";
import { useClasses, staticClasses } from "./TableCell.styles.js";
const defaultComponent = "td";
const getSortedColor = (color, alpha) => {
  return checkValidHexColorValue(color) && alpha ? hexToRgbA(color, parseFloat(alpha)) : color;
};
const HvTableCell = forwardRef((props, externalRef) => {
  var _a;
  const {
    children,
    component,
    className,
    style,
    classes: classesProp,
    align = "inherit",
    variant = "default",
    type: typeProp,
    stickyColumn = false,
    stickyColumnMostLeft = false,
    stickyColumnLeastRight = false,
    groupColumnMostLeft = false,
    groupColumnMostRight = false,
    sorted = false,
    resizable = false,
    resizing = false,
    ...others
  } = props;
  const {
    classes,
    cx,
    css
  } = useClasses(classesProp);
  const {
    colors,
    rootId
  } = useTheme();
  const tableContext = useContext(TableContext);
  const tableSectionContext = useContext(TableSectionContext);
  const [sortedColorValue, setSortedColorValue] = useState();
  const [sortedColorAlpha, setSortedColorAlpha] = useState();
  const type = typeProp || (tableSectionContext == null ? void 0 : tableSectionContext.type) || "body";
  const Component = component || ((_a = tableContext == null ? void 0 : tableContext.components) == null ? void 0 : _a.Td) || defaultComponent;
  const [sortedColor, setSortedColor] = useState(getSortedColor(sortedColorValue, sortedColorAlpha));
  useEffect(() => {
    setSortedColorValue(getVarValue(theme.table.rowSortedColor, rootId));
    setSortedColorAlpha(getVarValue(theme.table.rowSortedColorAlpha, rootId));
    setSortedColor(getSortedColor(sortedColorValue, sortedColorAlpha));
  }, [colors, sortedColorValue, sortedColorAlpha, rootId]);
  return /* @__PURE__ */ jsx(Component, { ref: externalRef, role: Component === defaultComponent ? null : "cell", style, className: cx(classes.root, classes[type], type === "body" && css({
    [`&.${staticClasses.sorted}`]: {
      backgroundColor: sortedColor
    }
  }), stickyColumn && css({
    [`&.${staticClasses.sorted}`]: {
      backgroundImage: `linear-gradient(to right, ${sortedColor}, ${sortedColor})`
    }
  }), {
    [classes[`align${capitalize(align)}`]]: align !== "inherit",
    [classes.variantList]: tableContext.variant === "listrow",
    [classes.variantListHead]: tableContext.variant === "listrow" && type !== "body",
    [classes[`variant${capitalize(variant)}`]]: variant !== "default",
    [classes.sorted]: sorted,
    [classes.stickyColumn]: stickyColumn,
    [classes.stickyColumnMostLeft]: stickyColumnMostLeft,
    [classes.stickyColumnLeastRight]: stickyColumnLeastRight,
    [classes.groupColumnMostLeft]: groupColumnMostLeft,
    [classes.groupColumnMostRight]: groupColumnMostRight,
    [classes.resizable]: resizable,
    [classes.resizing]: resizing
  }, className), ...others, children });
});
export {
  HvTableCell,
  staticClasses as tableCellClasses
};
//# sourceMappingURL=TableCell.js.map
