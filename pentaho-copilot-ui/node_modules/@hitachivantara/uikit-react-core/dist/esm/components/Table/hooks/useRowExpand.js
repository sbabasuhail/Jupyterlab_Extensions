import { jsxs, Fragment, jsx } from "@emotion/react/jsx-runtime";
import { DropDownXS, DropUpXS } from "@hitachivantara/uikit-react-icons";
import { useLabels } from "../../../hooks/useLabels.js";
import { HvButton } from "../../Button/Button.js";
import { HvTypography } from "../../Typography/Typography.js";
const DEFAULT_LABELS = {
  expandRowButtonAriaLabel: "Expand this row",
  collapseRowButtonAriaLabel: "Collapse this row"
};
const CellWithExpandButton = ({
  row,
  cell,
  labels: labelsProp
}) => {
  const labels = useLabels(DEFAULT_LABELS, labelsProp);
  const {
    onClick
  } = row.getToggleRowExpandedProps();
  return /* @__PURE__ */ jsxs(Fragment, { children: [
    /* @__PURE__ */ jsx(HvButton, { icon: true, "aria-label": row.isExpanded ? labels.collapseRowButtonAriaLabel : labels.expandRowButtonAriaLabel, "aria-expanded": row.isExpanded, onClick, children: row.isExpanded ? /* @__PURE__ */ jsx(DropDownXS, {}) : /* @__PURE__ */ jsx(DropUpXS, {}) }),
    (cell == null ? void 0 : cell.value) && /* @__PURE__ */ jsx(HvTypography, { variant: "label", component: "span", children: cell.value })
  ] });
};
const visibleColumnsHook = (columns, {
  instance
}) => {
  if (instance.disableCreateExpandButton) {
    return columns;
  }
  const firstDataColumnIndex = columns.findIndex((c) => {
    var _a;
    return ((_a = c.id) == null ? void 0 : _a.indexOf("_hv_")) !== 0;
  });
  if (firstDataColumnIndex !== -1) {
    const firstDataColumn = columns[firstDataColumnIndex];
    if (firstDataColumn.Cell == null) {
      firstDataColumn.Cell = CellWithExpandButton;
      firstDataColumn.variant = "expand";
      return columns;
    }
  }
  const expandColumn = {
    id: "_hv_expand",
    variant: "none",
    width: 32,
    // this will only work when using useHvTableSticky
    // but ensures it stays left of any sticky column
    sticky: "left",
    Cell: CellWithExpandButton
  };
  const columnsCopy = [...columns];
  columnsCopy.splice(firstDataColumnIndex !== -1 ? firstDataColumnIndex : 0, 0, expandColumn);
  return columnsCopy;
};
const getRowPropsHook = (props, {
  row
}) => {
  const nextProps = {
    expanded: row.isExpanded
  };
  return [props, nextProps];
};
const useRowExpand = (hooks) => {
  hooks.visibleColumns.push(visibleColumnsHook);
  hooks.getRowProps.push(getRowPropsHook);
};
useRowExpand.pluginName = "useHvRowExpand";
const useRowExpand$1 = useRowExpand;
export {
  CellWithExpandButton,
  useRowExpand$1 as default
};
//# sourceMappingURL=useRowExpand.js.map
