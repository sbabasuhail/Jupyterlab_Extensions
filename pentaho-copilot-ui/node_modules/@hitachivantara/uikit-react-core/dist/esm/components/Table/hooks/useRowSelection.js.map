{"version":3,"file":"useRowSelection.js","sources":["../../../../../src/components/Table/hooks/useRowSelection.tsx"],"sourcesContent":["import { ChangeEvent, useCallback, useMemo } from \"react\";\nimport {\n  Hooks,\n  IdType,\n  PropGetter,\n  Row,\n  actions,\n  ensurePluginOrder,\n  useGetLatest,\n  useMountedLayoutEffect,\n  makePropGetter,\n} from \"react-table\";\n\nimport { useLabels } from \"@core/hooks/useLabels\";\n\nimport { HvCheckBox } from \"@core/components/CheckBox\";\n\n// #region ##### TYPES #####\n\n// getRowProps:\nexport interface UseHvRowSelectionTableRowProps {\n  selected?: boolean;\n}\n\nexport interface UseHvRowSelectionRowCheckboxProps {\n  onChange?: (e: ChangeEvent, checked?: boolean) => void;\n  checked?: boolean;\n  disabled?: boolean;\n  indeterminate?: boolean;\n}\n\nexport interface UseHvRowSelectionBulkCheckboxProps {\n  onChange?: (e: ChangeEvent, checked?: boolean) => void;\n  checked?: boolean;\n  indeterminate?: boolean;\n}\n\nexport type UseHvRowSelectionTableOptions = Partial<{\n  autoResetSelectedRows: boolean;\n  autoResetLockedSelectionRows: boolean;\n  selectSubRows: boolean;\n  manualRowSelectedKey: string;\n  applyToggleAllRowsSelectedToPrefilteredRows: boolean;\n}>;\n\nexport interface UseHvRowSelectionHooks<D extends object> {\n  getToggleRowSelectedProps: Array<\n    PropGetter<D, UseHvRowSelectionRowCheckboxProps>\n  >;\n  getToggleAllRowsSelectedProps: Array<\n    PropGetter<D, UseHvRowSelectionBulkCheckboxProps>\n  >;\n  getToggleAllPageRowsSelectedProps: Array<\n    PropGetter<D, UseHvRowSelectionBulkCheckboxProps>\n  >;\n}\n\nexport interface UseHvRowSelectionState<D extends object> {\n  selectedRowIds: Record<IdType<D>, boolean>;\n  lockedSelectionRowIds: Record<IdType<D>, boolean>;\n}\n\nexport interface UseHvRowSelectionTableInstance<D extends object> {\n  toggleRowSelected: (rowId: IdType<D>, set?: boolean) => void;\n  toggleAllRowsSelected: (value?: boolean) => void;\n  toggleAllPageRowsSelected: (value?: boolean) => void;\n  getToggleAllRowsSelectedProps: (\n    props?: Partial<UseHvRowSelectionBulkCheckboxProps>\n  ) => UseHvRowSelectionBulkCheckboxProps;\n  getToggleAllPageRowsSelectedProps: (\n    props?: Partial<UseHvRowSelectionBulkCheckboxProps>\n  ) => UseHvRowSelectionBulkCheckboxProps;\n\n  isNoRowsSelected: boolean;\n  isNoPageRowsSelected: boolean;\n  isAllRowsSelected: boolean;\n  isAllPageRowsSelected: boolean;\n  isAllSelectableRowsSelected: boolean;\n  isAllSelectablePageRowsSelected: boolean;\n  isAllSelectableRowsUnselected: boolean;\n  isAllSelectablePageRowsUnselected: boolean;\n\n  selectedFlatRows: Array<Row<D>>;\n}\n\nexport interface UseHvRowSelectionRowInstance {\n  isSelected: boolean;\n  isSomeSelected: boolean;\n  isSelectionLocked: boolean;\n  toggleRowLockedSelection: (set?: boolean) => void;\n  toggleRowSelected: (set?: boolean) => void;\n  getToggleRowSelectedProps: (\n    props?: Partial<UseHvRowSelectionRowCheckboxProps>\n  ) => UseHvRowSelectionRowCheckboxProps;\n}\n\nexport type UseRowSelectionProps = (<\n  D extends object = Record<string, unknown>\n>(\n  hooks: Hooks<D>\n) => void) & { pluginName: string };\n\n// #endregion ##### TYPES #####\n\n// Actions\nactions.resetSelectedRows = \"resetSelectedRows\";\nactions.toggleAllRowsSelected = \"toggleAllRowsSelected\";\nactions.toggleRowSelected = \"toggleRowSelected\";\nactions.toggleAllPageRowsSelected = \"toggleAllPageRowsSelected\";\n\nactions.resetLockedSelectionRows = \"resetLockedSelectionRows\";\nactions.toggleRowLockedSelection = \"toggleRowLockedSelection\";\n\nconst DEFAULT_LABELS = {\n  selectRowCheckBoxAriaLabel: \"Select this row\",\n};\n\nexport const CellWithCheckBox = ({ row, labels: labelsProp }) => {\n  const labels = useLabels(DEFAULT_LABELS, labelsProp);\n\n  const { onChange, checked, disabled, indeterminate } =\n    row.getToggleRowSelectedProps();\n\n  return (\n    <HvCheckBox\n      onChange={onChange}\n      checked={checked}\n      disabled={disabled}\n      indeterminate={indeterminate}\n      aria-label={labels.selectRowCheckBoxAriaLabel}\n    />\n  );\n};\n\nconst visibleColumnsHook = (columns) => {\n  const selectionColumn = {\n    id: \"_hv_selection\",\n    variant: \"checkbox\",\n\n    width: 32,\n\n    // this will only work when using useHvTableSticky\n    // but ensures it stays left of any sticky column\n    sticky: \"left\",\n\n    Cell: CellWithCheckBox,\n  };\n\n  return [selectionColumn, ...columns];\n};\n\nconst getRowPropsHook = (props, { row }) => {\n  const nextProps: UseHvRowSelectionTableRowProps = {\n    selected: row.isSelected,\n  };\n\n  return [props, nextProps];\n};\n\nexport const defaultGetToggleRowSelectedProps = (props, meta) => {\n  const { instance, row } = meta;\n  const { manualRowSelectedKey = \"isSelected\" } = instance;\n  let checked = false;\n\n  if (row.original && row.original[manualRowSelectedKey]) {\n    checked = true;\n  } else {\n    checked = row.isSelected;\n  }\n\n  return [\n    props,\n    {\n      onChange: (e, check) => {\n        row.toggleRowSelected(check ?? e?.target?.checked);\n      },\n      disabled: row.isSelectionLocked,\n      checked,\n      indeterminate: row.isSomeSelected,\n    },\n  ];\n};\n\nexport const defaultGetToggleAllRowsSelectedProps = (props, { instance }) => [\n  props,\n  {\n    onChange: (e) => {\n      instance.toggleAllRowsSelected(e.target.checked);\n    },\n    checked: instance.isAllRowsSelected,\n    indeterminate: Boolean(\n      !instance.isAllRowsSelected &&\n        Object.keys(instance.state.selectedRowIds).length\n    ),\n  },\n];\n\nexport const defaultGetToggleAllPageRowsSelectedProps = (\n  props,\n  { instance }\n) => [\n  props,\n  {\n    onChange(e) {\n      instance.toggleAllPageRowsSelected(e.target.checked);\n    },\n    checked: instance.isAllPageRowsSelected,\n    indeterminate: Boolean(\n      !instance.isAllPageRowsSelected &&\n        instance.page.some(({ id }) => instance.state.selectedRowIds[id])\n    ),\n  },\n];\n\nexport function reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      selectedRowIds: {},\n      lockedSelectionRowIds: {},\n      ...state,\n    };\n  }\n\n  if (action.type === actions.resetSelectedRows) {\n    return {\n      ...state,\n      selectedRowIds: instance.initialState.selectedRowIds || {},\n    };\n  }\n\n  if (action.type === actions.toggleAllRowsSelected) {\n    const { value: setSelected } = action;\n    const {\n      isAllRowsSelected,\n      rowsById,\n      initialRowsById,\n      nonGroupedRowsById = rowsById,\n      applyToggleAllRowsSelectedToPrefilteredRows,\n    } = instance;\n\n    const rowsToSelect = applyToggleAllRowsSelectedToPrefilteredRows\n      ? initialRowsById\n      : nonGroupedRowsById;\n\n    const selectAll =\n      typeof setSelected !== \"undefined\" ? setSelected : !isAllRowsSelected;\n\n    // Only remove/add the rows that are visible on the screen\n    //  Leave all the other rows that are selected alone.\n    const selectedRowIds = { ...state.selectedRowIds };\n\n    if (selectAll) {\n      Object.keys(rowsToSelect).forEach((rowId) => {\n        const isSelectionLocked = state.lockedSelectionRowIds[rowId];\n        if (!isSelectionLocked) {\n          selectedRowIds[rowId] = true;\n        }\n      });\n    } else {\n      Object.keys(rowsToSelect).forEach((rowId) => {\n        const isSelectionLocked = state.lockedSelectionRowIds[rowId];\n        if (!isSelectionLocked) {\n          delete selectedRowIds[rowId];\n        }\n      });\n    }\n\n    return {\n      ...state,\n      selectedRowIds,\n    };\n  }\n\n  if (action.type === actions.toggleRowSelected) {\n    const { id, value: setSelected } = action;\n    const isSelectionLocked = state.lockedSelectionRowIds[id];\n    if (isSelectionLocked) {\n      return state;\n    }\n\n    const { rowsById, selectSubRows = true, getSubRows } = instance;\n    const isSelected = state.selectedRowIds[id];\n    const shouldExist =\n      typeof setSelected !== \"undefined\" ? setSelected : !isSelected;\n\n    if (isSelected === shouldExist) {\n      return state;\n    }\n\n    const newSelectedRowIds = { ...state.selectedRowIds };\n\n    const handleRowById = (rowId) => {\n      const row = rowsById[rowId];\n\n      if (!row.isGrouped) {\n        if (shouldExist) {\n          newSelectedRowIds[rowId] = true;\n        } else {\n          delete newSelectedRowIds[rowId];\n        }\n      }\n\n      if (selectSubRows && getSubRows(row)) {\n        getSubRows(row).forEach((subrow) => {\n          handleRowById(subrow.id);\n        });\n      }\n    };\n\n    handleRowById(id);\n\n    return {\n      ...state,\n      selectedRowIds: newSelectedRowIds,\n    };\n  }\n\n  if (action.type === actions.toggleAllPageRowsSelected) {\n    const { value: setSelected } = action;\n    const {\n      page,\n      rowsById,\n      selectSubRows = true,\n      isAllPageRowsSelected,\n      getSubRows,\n    } = instance;\n\n    const selectAll =\n      typeof setSelected !== \"undefined\" ? setSelected : !isAllPageRowsSelected;\n    const newSelectedRowIds = { ...state.selectedRowIds };\n\n    const handleRowById = (rowId) => {\n      const row = rowsById[rowId];\n      const isSelectionLocked = state.lockedSelectionRowIds[rowId];\n\n      if (!isSelectionLocked && !row.isGrouped) {\n        if (selectAll) {\n          newSelectedRowIds[rowId] = true;\n        } else {\n          delete newSelectedRowIds[rowId];\n        }\n      }\n\n      if (selectSubRows && getSubRows(row)) {\n        getSubRows(row).forEach((subrow) => {\n          handleRowById(subrow.id);\n        });\n      }\n    };\n\n    page.forEach((row) => handleRowById(row.id));\n\n    return {\n      ...state,\n      selectedRowIds: newSelectedRowIds,\n    };\n  }\n\n  if (action.type === actions.resetLockedSelectionRows) {\n    return {\n      ...state,\n      lockedSelectionRowIds: instance.initialState.lockedSelectionRowIds || {},\n    };\n  }\n\n  if (action.type === actions.toggleRowLockedSelection) {\n    const { id, value: setLockedSelection } = action;\n    const { rowsById, selectSubRows = true, getSubRows } = instance;\n    const isLockedSelection = state.lockedSelectionRowIds[id];\n    const shouldExist =\n      typeof setLockedSelection !== \"undefined\"\n        ? setLockedSelection\n        : !isLockedSelection;\n\n    if (isLockedSelection === shouldExist) {\n      return state;\n    }\n\n    const newLockedSelectionRowIds = { ...state.lockedSelectionRowIds };\n\n    const handleRowById = (rowId) => {\n      const row = rowsById[rowId];\n\n      if (!row.isGrouped) {\n        if (shouldExist) {\n          newLockedSelectionRowIds[rowId] = true;\n        } else {\n          delete newLockedSelectionRowIds[rowId];\n        }\n      }\n\n      if (selectSubRows && getSubRows(row)) {\n        getSubRows(row).forEach((subrow) => {\n          handleRowById(subrow.id);\n        });\n      }\n    };\n\n    handleRowById(id);\n\n    return {\n      ...state,\n      lockedSelectionRowIds: newLockedSelectionRowIds,\n    };\n  }\n\n  return state;\n}\n\nfunction getRowIsSelected(row, selectedRowIds, getSubRows) {\n  if (selectedRowIds[row.id]) {\n    return true;\n  }\n\n  const subRows = getSubRows(row);\n\n  if (subRows && subRows.length) {\n    let allChildrenSelected = true;\n    let someSelected = false;\n\n    subRows.forEach((subRow) => {\n      // Bail out early if we know both of these\n      if (someSelected && !allChildrenSelected) {\n        return;\n      }\n\n      if (getRowIsSelected(subRow, selectedRowIds, getSubRows)) {\n        someSelected = true;\n      } else {\n        allChildrenSelected = false;\n      }\n    });\n\n    if (allChildrenSelected) {\n      return true;\n    }\n\n    if (someSelected) {\n      return null;\n    }\n  }\n\n  return false;\n}\n\nexport function useInstance(instance) {\n  const {\n    data,\n    rows,\n    getHooks,\n    plugins,\n    rowsById,\n    initialRowsById,\n    nonGroupedRowsById = rowsById,\n    autoResetSelectedRows = true,\n    autoResetLockedSelectionRows = true,\n    state: { selectedRowIds, lockedSelectionRowIds },\n    selectSubRows = true,\n    dispatch,\n    page,\n    getSubRows,\n    applyToggleAllRowsSelectedToPrefilteredRows,\n  } = instance;\n\n  ensurePluginOrder(\n    plugins,\n    [\"useFilters\", \"useGroupBy\", \"useSortBy\", \"useExpanded\", \"usePagination\"],\n    \"useHvRowSelection\"\n  );\n\n  const rowsToSelect = applyToggleAllRowsSelectedToPrefilteredRows\n    ? initialRowsById\n    : nonGroupedRowsById;\n\n  const selectedFlatRows = useMemo(() => {\n    const selectedRows: any[] = [];\n\n    rows.forEach((row) => {\n      const isSelected = selectSubRows\n        ? getRowIsSelected(row, selectedRowIds, getSubRows)\n        : !!selectedRowIds[row.id];\n      row.isSelected = !!isSelected;\n      row.isSomeSelected = isSelected === null;\n\n      if (isSelected) {\n        selectedRows.push(row);\n      }\n    });\n\n    return selectedRows;\n  }, [rows, selectSubRows, selectedRowIds, getSubRows]);\n\n  const existsLockedRows = !!Object.keys(lockedSelectionRowIds).length;\n\n  const isNoRowsSelected = !(\n    Object.keys(rowsToSelect).length && selectedFlatRows.length\n  );\n\n  let isNoPageRowsSelected;\n  let isAllRowsSelected;\n  let isAllPageRowsSelected;\n\n  let isAllSelectableRowsUnselected;\n  let isAllSelectablePageRowsUnselected;\n  let isAllSelectableRowsSelected;\n  let isAllSelectablePageRowsSelected;\n\n  if (isNoRowsSelected) {\n    isAllRowsSelected = false;\n    isAllPageRowsSelected = false;\n\n    isAllSelectableRowsSelected =\n      existsLockedRows &&\n      !Object.keys(rowsToSelect).some((id) => !lockedSelectionRowIds[id]);\n    isAllSelectablePageRowsSelected = isAllSelectableRowsSelected;\n\n    isAllSelectableRowsUnselected = isAllSelectableRowsSelected;\n    isAllSelectablePageRowsUnselected = isAllSelectableRowsSelected;\n\n    isNoPageRowsSelected = true;\n  } else {\n    isAllRowsSelected = !Object.keys(rowsToSelect).some(\n      (id) => !selectedRowIds[id]\n    );\n\n    if (isAllRowsSelected) {\n      isAllSelectableRowsSelected = true;\n      isAllSelectablePageRowsSelected = true;\n\n      isAllSelectableRowsUnselected =\n        existsLockedRows &&\n        Object.keys(rowsToSelect).filter((id) => !lockedSelectionRowIds[id])\n          .length === 0;\n      isAllSelectablePageRowsUnselected = isAllSelectableRowsUnselected;\n\n      isNoPageRowsSelected = false;\n      isAllPageRowsSelected = true;\n    } else {\n      isAllSelectableRowsSelected =\n        existsLockedRows &&\n        !Object.keys(rowsToSelect)\n          .filter((id) => !lockedSelectionRowIds[id])\n          .some((id) => !selectedRowIds[id]);\n\n      isAllSelectableRowsUnselected =\n        !existsLockedRows ||\n        !Object.keys(rowsToSelect)\n          .filter((id) => !lockedSelectionRowIds[id])\n          .some((id) => selectedRowIds[id]);\n\n      isAllPageRowsSelected = !(\n        page &&\n        page.length &&\n        page.some(({ id }) => !selectedRowIds[id])\n      );\n\n      if (isAllPageRowsSelected) {\n        isAllSelectablePageRowsSelected = true;\n\n        isAllSelectablePageRowsUnselected =\n          existsLockedRows &&\n          page &&\n          page.length &&\n          page.filter(({ id }) => !lockedSelectionRowIds[id]).length === 0;\n\n        isNoPageRowsSelected = false;\n      } else {\n        isAllSelectablePageRowsSelected =\n          existsLockedRows &&\n          !(\n            page &&\n            page.length &&\n            page\n              .filter(({ id }) => !lockedSelectionRowIds[id])\n              .some(({ id }) => !selectedRowIds[id])\n          );\n\n        isAllSelectablePageRowsUnselected =\n          !existsLockedRows ||\n          !(\n            page &&\n            page.length &&\n            page\n              .filter(({ id }) => !lockedSelectionRowIds[id])\n              .some(({ id }) => selectedRowIds[id])\n          );\n\n        isNoPageRowsSelected = !(\n          page &&\n          page.length &&\n          page.some(({ id }) => selectedRowIds[id])\n        );\n      }\n    }\n  }\n\n  const getAutoResetSelectedRows = useGetLatest(autoResetSelectedRows);\n\n  const getAutoResetLockedSelectionRows = useGetLatest(\n    autoResetLockedSelectionRows\n  );\n\n  useMountedLayoutEffect(() => {\n    if (getAutoResetSelectedRows()) {\n      dispatch({ type: actions.resetSelectedRows });\n    }\n    if (getAutoResetLockedSelectionRows()) {\n      dispatch({ type: actions.resetLockedSelectionRows });\n    }\n  }, [dispatch, data]);\n\n  const toggleAllRowsSelected = useCallback(\n    (value) => dispatch({ type: actions.toggleAllRowsSelected, value }),\n    [dispatch]\n  );\n\n  const toggleAllPageRowsSelected = useCallback(\n    (value) => dispatch({ type: actions.toggleAllPageRowsSelected, value }),\n    [dispatch]\n  );\n\n  const toggleRowSelected = useCallback(\n    (id, value) => dispatch({ type: actions.toggleRowSelected, id, value }),\n    [dispatch]\n  );\n\n  const getInstance = useGetLatest(instance);\n\n  const getToggleAllRowsSelectedProps = makePropGetter(\n    getHooks().getToggleAllRowsSelectedProps,\n    {\n      instance: getInstance(),\n    }\n  );\n\n  const getToggleAllPageRowsSelectedProps = makePropGetter(\n    getHooks().getToggleAllPageRowsSelectedProps,\n    { instance: getInstance() }\n  );\n\n  const toggleRowLockedSelection = useCallback(\n    (id, value) =>\n      dispatch({ type: actions.toggleRowLockedSelection, id, value }),\n    [dispatch]\n  );\n\n  Object.assign(instance, {\n    selectedFlatRows,\n    isNoRowsSelected,\n    isNoPageRowsSelected,\n    isAllRowsSelected,\n    isAllPageRowsSelected,\n    isAllSelectableRowsSelected,\n    isAllSelectablePageRowsSelected,\n    isAllSelectableRowsUnselected,\n    isAllSelectablePageRowsUnselected,\n    toggleRowSelected,\n    toggleAllRowsSelected,\n    getToggleAllRowsSelectedProps,\n    getToggleAllPageRowsSelectedProps,\n    toggleAllPageRowsSelected,\n    toggleRowLockedSelection,\n  });\n}\n\nexport function prepareRow(row, { instance }) {\n  row.toggleRowSelected = (set) => instance.toggleRowSelected(row.id, set);\n  row.getToggleRowSelectedProps = makePropGetter(\n    instance.getHooks().getToggleRowSelectedProps,\n    {\n      instance,\n      row,\n    }\n  );\n\n  row.toggleRowLockedSelection = (set) =>\n    instance.toggleRowLockedSelection(row.id, set);\n  row.isSelectionLocked =\n    instance.state?.lockedSelectionRowIds?.[row.id] || false;\n}\n\nconst useRowSelection: UseRowSelectionProps = (hooks) => {\n  hooks.visibleColumns.push(visibleColumnsHook);\n\n  hooks.getRowProps.push(getRowPropsHook);\n\n  hooks.getToggleRowSelectedProps = [defaultGetToggleRowSelectedProps];\n  hooks.getToggleAllRowsSelectedProps = [defaultGetToggleAllRowsSelectedProps];\n  hooks.getToggleAllPageRowsSelectedProps = [\n    defaultGetToggleAllPageRowsSelectedProps,\n  ];\n\n  hooks.stateReducers.push(reducer);\n  hooks.useInstance.push(useInstance);\n  hooks.prepareRow.push(prepareRow);\n};\n\nuseRowSelection.pluginName = \"useHvRowSelection\";\n\nexport default useRowSelection;\n"],"names":["actions","resetSelectedRows","toggleAllRowsSelected","toggleRowSelected","toggleAllPageRowsSelected","resetLockedSelectionRows","toggleRowLockedSelection","DEFAULT_LABELS","selectRowCheckBoxAriaLabel","CellWithCheckBox","row","labels","labelsProp","useLabels","onChange","checked","disabled","indeterminate","getToggleRowSelectedProps","visibleColumnsHook","columns","selectionColumn","id","variant","width","sticky","Cell","getRowPropsHook","props","nextProps","selected","isSelected","defaultGetToggleRowSelectedProps","meta","instance","manualRowSelectedKey","original","e","check","target","isSelectionLocked","isSomeSelected","defaultGetToggleAllRowsSelectedProps","isAllRowsSelected","Boolean","Object","keys","state","selectedRowIds","length","defaultGetToggleAllPageRowsSelectedProps","isAllPageRowsSelected","page","some","reducer","action","previousState","type","init","lockedSelectionRowIds","initialState","value","setSelected","rowsById","initialRowsById","nonGroupedRowsById","applyToggleAllRowsSelectedToPrefilteredRows","rowsToSelect","selectAll","forEach","rowId","selectSubRows","getSubRows","shouldExist","newSelectedRowIds","handleRowById","isGrouped","subrow","setLockedSelection","isLockedSelection","newLockedSelectionRowIds","getRowIsSelected","subRows","allChildrenSelected","someSelected","subRow","useInstance","data","rows","getHooks","plugins","autoResetSelectedRows","autoResetLockedSelectionRows","dispatch","selectedFlatRows","useMemo","selectedRows","push","existsLockedRows","isNoRowsSelected","isNoPageRowsSelected","isAllSelectableRowsUnselected","isAllSelectablePageRowsUnselected","isAllSelectableRowsSelected","isAllSelectablePageRowsSelected","filter","getAutoResetSelectedRows","useGetLatest","getAutoResetLockedSelectionRows","useMountedLayoutEffect","useCallback","getInstance","getToggleAllRowsSelectedProps","makePropGetter","getToggleAllPageRowsSelectedProps","assign","prepareRow","set","useRowSelection","hooks","visibleColumns","getRowProps","stateReducers","pluginName"],"mappings":";;;;;AAyGAA,QAAQC,oBAAoB;AAC5BD,QAAQE,wBAAwB;AAChCF,QAAQG,oBAAoB;AAC5BH,QAAQI,4BAA4B;AAEpCJ,QAAQK,2BAA2B;AACnCL,QAAQM,2BAA2B;AAEnC,MAAMC,iBAAiB;AAAA,EACrBC,4BAA4B;AAC9B;AAEO,MAAMC,mBAAmBA,CAAC;AAAA,EAAEC;AAAAA,EAAKC,QAAQC;AAAW,MAAM;AACzDD,QAAAA,SAASE,UAAUN,gBAAgBK,UAAU;AAE7C,QAAA;AAAA,IAAEE;AAAAA,IAAUC;AAAAA,IAASC;AAAAA,IAAUC;AAAAA,EAAAA,IACnCP,IAAIQ;AAGJ,SAAA,oBAAC,cACC,UACA,SACA,UACA,eACA,cAAYP,OAAOH,2BACnB,CAAA;AAEN;AAEA,MAAMW,qBAAsBC,CAAY,YAAA;AACtC,QAAMC,kBAAkB;AAAA,IACtBC,IAAI;AAAA,IACJC,SAAS;AAAA,IAETC,OAAO;AAAA;AAAA;AAAA,IAIPC,QAAQ;AAAA,IAERC,MAAMjB;AAAAA,EAAAA;AAGD,SAAA,CAACY,iBAAiB,GAAGD,OAAO;AACrC;AAEA,MAAMO,kBAAkBA,CAACC,OAAO;AAAA,EAAElB;AAAI,MAAM;AAC1C,QAAMmB,YAA4C;AAAA,IAChDC,UAAUpB,IAAIqB;AAAAA,EAAAA;AAGT,SAAA,CAACH,OAAOC,SAAS;AAC1B;AAEaG,MAAAA,mCAAmCA,CAACJ,OAAOK,SAAS;AACzD,QAAA;AAAA,IAAEC;AAAAA,IAAUxB;AAAAA,EAAQuB,IAAAA;AACpB,QAAA;AAAA,IAAEE,uBAAuB;AAAA,EAAiBD,IAAAA;AAChD,MAAInB,UAAU;AAEd,MAAIL,IAAI0B,YAAY1B,IAAI0B,SAASD,oBAAoB,GAAG;AAC5C,cAAA;AAAA,EAAA,OACL;AACLpB,cAAUL,IAAIqB;AAAAA,EAChB;AAEA,SAAO,CACLH,OACA;AAAA,IACEd,UAAUA,CAACuB,GAAGC,UAAU;;AACtB5B,UAAIP,kBAAkBmC,WAASD,4BAAGE,WAAHF,mBAAWtB,QAAO;AAAA,IACnD;AAAA,IACAC,UAAUN,IAAI8B;AAAAA,IACdzB;AAAAA,IACAE,eAAeP,IAAI+B;AAAAA,EAAAA,CACpB;AAEL;AAEaC,MAAAA,uCAAuCA,CAACd,OAAO;AAAA,EAAEM;AAAS,MAAM,CAC3EN,OACA;AAAA,EACEd,UAAWuB,CAAM,MAAA;AACNnC,aAAAA,sBAAsBmC,EAAEE,OAAOxB,OAAO;AAAA,EACjD;AAAA,EACAA,SAASmB,SAASS;AAAAA,EAClB1B,eAAe2B,QACb,CAACV,SAASS,qBACRE,OAAOC,KAAKZ,SAASa,MAAMC,cAAc,EAAEC,MAC/C;AACF,CAAC;AAGUC,MAAAA,2CAA2CA,CACtDtB,OACA;AAAA,EAAEM;AAAS,MACR,CACHN,OACA;AAAA,EACEd,SAASuB,GAAG;AACDjC,aAAAA,0BAA0BiC,EAAEE,OAAOxB,OAAO;AAAA,EACrD;AAAA,EACAA,SAASmB,SAASiB;AAAAA,EAClBlC,eAAe2B,QACb,CAACV,SAASiB,yBACRjB,SAASkB,KAAKC,KAAK,CAAC;AAAA,IAAE/B;AAAAA,QAASY,SAASa,MAAMC,eAAe1B,EAAE,CAAC,CACpE;AACF,CAAC;AAGI,SAASgC,QAAQP,OAAOQ,QAAQC,eAAetB,UAAU;AAC1DqB,MAAAA,OAAOE,SAASzD,QAAQ0D,MAAM;AACzB,WAAA;AAAA,MACLV,gBAAgB,CAAC;AAAA,MACjBW,uBAAuB,CAAC;AAAA,MACxB,GAAGZ;AAAAA,IAAAA;AAAAA,EAEP;AAEIQ,MAAAA,OAAOE,SAASzD,QAAQC,mBAAmB;AACtC,WAAA;AAAA,MACL,GAAG8C;AAAAA,MACHC,gBAAgBd,SAAS0B,aAAaZ,kBAAkB,CAAC;AAAA,IAAA;AAAA,EAE7D;AAEIO,MAAAA,OAAOE,SAASzD,QAAQE,uBAAuB;AAC3C,UAAA;AAAA,MAAE2D,OAAOC;AAAAA,IAAgBP,IAAAA;AACzB,UAAA;AAAA,MACJZ;AAAAA,MACAoB;AAAAA,MACAC;AAAAA,MACAC,qBAAqBF;AAAAA,MACrBG;AAAAA,IACEhC,IAAAA;AAEEiC,UAAAA,eAAeD,8CACjBF,kBACAC;AAEJ,UAAMG,YACJ,OAAON,gBAAgB,cAAcA,cAAc,CAACnB;AAItD,UAAMK,iBAAiB;AAAA,MAAE,GAAGD,MAAMC;AAAAA,IAAAA;AAElC,QAAIoB,WAAW;AACbvB,aAAOC,KAAKqB,YAAY,EAAEE,QAASC,CAAU,UAAA;AACrC9B,cAAAA,oBAAoBO,MAAMY,sBAAsBW,KAAK;AAC3D,YAAI,CAAC9B,mBAAmB;AACtBQ,yBAAesB,KAAK,IAAI;AAAA,QAC1B;AAAA,MAAA,CACD;AAAA,IAAA,OACI;AACLzB,aAAOC,KAAKqB,YAAY,EAAEE,QAASC,CAAU,UAAA;AACrC9B,cAAAA,oBAAoBO,MAAMY,sBAAsBW,KAAK;AAC3D,YAAI,CAAC9B,mBAAmB;AACtB,iBAAOQ,eAAesB,KAAK;AAAA,QAC7B;AAAA,MAAA,CACD;AAAA,IACH;AAEO,WAAA;AAAA,MACL,GAAGvB;AAAAA,MACHC;AAAAA,IAAAA;AAAAA,EAEJ;AAEIO,MAAAA,OAAOE,SAASzD,QAAQG,mBAAmB;AACvC,UAAA;AAAA,MAAEmB;AAAAA,MAAIuC,OAAOC;AAAAA,IAAgBP,IAAAA;AAC7Bf,UAAAA,oBAAoBO,MAAMY,sBAAsBrC,EAAE;AACxD,QAAIkB,mBAAmB;AACdO,aAAAA;AAAAA,IACT;AAEM,UAAA;AAAA,MAAEgB;AAAAA,MAAUQ,gBAAgB;AAAA,MAAMC;AAAAA,IAAetC,IAAAA;AACjDH,UAAAA,aAAagB,MAAMC,eAAe1B,EAAE;AAC1C,UAAMmD,cACJ,OAAOX,gBAAgB,cAAcA,cAAc,CAAC/B;AAEtD,QAAIA,eAAe0C,aAAa;AACvB1B,aAAAA;AAAAA,IACT;AAEA,UAAM2B,oBAAoB;AAAA,MAAE,GAAG3B,MAAMC;AAAAA,IAAAA;AAErC,UAAM2B,gBAAiBL,CAAU,UAAA;AACzB5D,YAAAA,MAAMqD,SAASO,KAAK;AAEtB,UAAA,CAAC5D,IAAIkE,WAAW;AAClB,YAAIH,aAAa;AACfC,4BAAkBJ,KAAK,IAAI;AAAA,QAAA,OACtB;AACL,iBAAOI,kBAAkBJ,KAAK;AAAA,QAChC;AAAA,MACF;AAEIC,UAAAA,iBAAiBC,WAAW9D,GAAG,GAAG;AACzBA,mBAAAA,GAAG,EAAE2D,QAASQ,CAAW,WAAA;AAClCF,wBAAcE,OAAOvD,EAAE;AAAA,QAAA,CACxB;AAAA,MACH;AAAA,IAAA;AAGFqD,kBAAcrD,EAAE;AAET,WAAA;AAAA,MACL,GAAGyB;AAAAA,MACHC,gBAAgB0B;AAAAA,IAAAA;AAAAA,EAEpB;AAEInB,MAAAA,OAAOE,SAASzD,QAAQI,2BAA2B;AAC/C,UAAA;AAAA,MAAEyD,OAAOC;AAAAA,IAAgBP,IAAAA;AACzB,UAAA;AAAA,MACJH;AAAAA,MACAW;AAAAA,MACAQ,gBAAgB;AAAA,MAChBpB;AAAAA,MACAqB;AAAAA,IACEtC,IAAAA;AAEJ,UAAMkC,YACJ,OAAON,gBAAgB,cAAcA,cAAc,CAACX;AACtD,UAAMuB,oBAAoB;AAAA,MAAE,GAAG3B,MAAMC;AAAAA,IAAAA;AAErC,UAAM2B,gBAAiBL,CAAU,UAAA;AACzB5D,YAAAA,MAAMqD,SAASO,KAAK;AACpB9B,YAAAA,oBAAoBO,MAAMY,sBAAsBW,KAAK;AAE3D,UAAI,CAAC9B,qBAAqB,CAAC9B,IAAIkE,WAAW;AACxC,YAAIR,WAAW;AACbM,4BAAkBJ,KAAK,IAAI;AAAA,QAAA,OACtB;AACL,iBAAOI,kBAAkBJ,KAAK;AAAA,QAChC;AAAA,MACF;AAEIC,UAAAA,iBAAiBC,WAAW9D,GAAG,GAAG;AACzBA,mBAAAA,GAAG,EAAE2D,QAASQ,CAAW,WAAA;AAClCF,wBAAcE,OAAOvD,EAAE;AAAA,QAAA,CACxB;AAAA,MACH;AAAA,IAAA;AAGF8B,SAAKiB,QAAS3D,CAAAA,QAAQiE,cAAcjE,IAAIY,EAAE,CAAC;AAEpC,WAAA;AAAA,MACL,GAAGyB;AAAAA,MACHC,gBAAgB0B;AAAAA,IAAAA;AAAAA,EAEpB;AAEInB,MAAAA,OAAOE,SAASzD,QAAQK,0BAA0B;AAC7C,WAAA;AAAA,MACL,GAAG0C;AAAAA,MACHY,uBAAuBzB,SAAS0B,aAAaD,yBAAyB,CAAC;AAAA,IAAA;AAAA,EAE3E;AAEIJ,MAAAA,OAAOE,SAASzD,QAAQM,0BAA0B;AAC9C,UAAA;AAAA,MAAEgB;AAAAA,MAAIuC,OAAOiB;AAAAA,IAAuBvB,IAAAA;AACpC,UAAA;AAAA,MAAEQ;AAAAA,MAAUQ,gBAAgB;AAAA,MAAMC;AAAAA,IAAetC,IAAAA;AACjD6C,UAAAA,oBAAoBhC,MAAMY,sBAAsBrC,EAAE;AACxD,UAAMmD,cACJ,OAAOK,uBAAuB,cAC1BA,qBACA,CAACC;AAEP,QAAIA,sBAAsBN,aAAa;AAC9B1B,aAAAA;AAAAA,IACT;AAEA,UAAMiC,2BAA2B;AAAA,MAAE,GAAGjC,MAAMY;AAAAA,IAAAA;AAE5C,UAAMgB,gBAAiBL,CAAU,UAAA;AACzB5D,YAAAA,MAAMqD,SAASO,KAAK;AAEtB,UAAA,CAAC5D,IAAIkE,WAAW;AAClB,YAAIH,aAAa;AACfO,mCAAyBV,KAAK,IAAI;AAAA,QAAA,OAC7B;AACL,iBAAOU,yBAAyBV,KAAK;AAAA,QACvC;AAAA,MACF;AAEIC,UAAAA,iBAAiBC,WAAW9D,GAAG,GAAG;AACzBA,mBAAAA,GAAG,EAAE2D,QAASQ,CAAW,WAAA;AAClCF,wBAAcE,OAAOvD,EAAE;AAAA,QAAA,CACxB;AAAA,MACH;AAAA,IAAA;AAGFqD,kBAAcrD,EAAE;AAET,WAAA;AAAA,MACL,GAAGyB;AAAAA,MACHY,uBAAuBqB;AAAAA,IAAAA;AAAAA,EAE3B;AAEOjC,SAAAA;AACT;AAEA,SAASkC,iBAAiBvE,KAAKsC,gBAAgBwB,YAAY;AACrDxB,MAAAA,eAAetC,IAAIY,EAAE,GAAG;AACnB,WAAA;AAAA,EACT;AAEM4D,QAAAA,UAAUV,WAAW9D,GAAG;AAE1BwE,MAAAA,WAAWA,QAAQjC,QAAQ;AAC7B,QAAIkC,sBAAsB;AAC1B,QAAIC,eAAe;AAEnBF,YAAQb,QAASgB,CAAW,WAAA;AAEtBD,UAAAA,gBAAgB,CAACD,qBAAqB;AACxC;AAAA,MACF;AAEA,UAAIF,iBAAiBI,QAAQrC,gBAAgBwB,UAAU,GAAG;AACzC,uBAAA;AAAA,MAAA,OACV;AACiB,8BAAA;AAAA,MACxB;AAAA,IAAA,CACD;AAED,QAAIW,qBAAqB;AAChB,aAAA;AAAA,IACT;AAEA,QAAIC,cAAc;AACT,aAAA;AAAA,IACT;AAAA,EACF;AAEO,SAAA;AACT;AAEO,SAASE,YAAYpD,UAAU;AAC9B,QAAA;AAAA,IACJqD;AAAAA,IACAC;AAAAA,IACAC;AAAAA,IACAC;AAAAA,IACA3B;AAAAA,IACAC;AAAAA,IACAC,qBAAqBF;AAAAA,IACrB4B,wBAAwB;AAAA,IACxBC,+BAA+B;AAAA,IAC/B7C,OAAO;AAAA,MAAEC;AAAAA,MAAgBW;AAAAA,IAAsB;AAAA,IAC/CY,gBAAgB;AAAA,IAChBsB;AAAAA,IACAzC;AAAAA,IACAoB;AAAAA,IACAN;AAAAA,EACEhC,IAAAA;AAGFwD,oBAAAA,SACA,CAAC,cAAc,cAAc,aAAa,eAAe,eAAe,GACxE,mBACF;AAEMvB,QAAAA,eAAeD,8CACjBF,kBACAC;AAEE6B,QAAAA,mBAAmBC,QAAQ,MAAM;AACrC,UAAMC,eAAsB,CAAA;AAE5BR,SAAKnB,QAAS3D,CAAQ,QAAA;AACdqB,YAAAA,aAAawC,gBACfU,iBAAiBvE,KAAKsC,gBAAgBwB,UAAU,IAChD,CAAC,CAACxB,eAAetC,IAAIY,EAAE;AACvBS,UAAAA,aAAa,CAAC,CAACA;AACnBrB,UAAI+B,iBAAiBV,eAAe;AAEpC,UAAIA,YAAY;AACdiE,qBAAaC,KAAKvF,GAAG;AAAA,MACvB;AAAA,IAAA,CACD;AAEMsF,WAAAA;AAAAA,KACN,CAACR,MAAMjB,eAAevB,gBAAgBwB,UAAU,CAAC;AAEpD,QAAM0B,mBAAmB,CAAC,CAACrD,OAAOC,KAAKa,qBAAqB,EAAEV;AAE9D,QAAMkD,mBAAmB,EACvBtD,OAAOC,KAAKqB,YAAY,EAAElB,UAAU6C,iBAAiB7C;AAGnDmD,MAAAA;AACAzD,MAAAA;AACAQ,MAAAA;AAEAkD,MAAAA;AACAC,MAAAA;AACAC,MAAAA;AACAC,MAAAA;AAEJ,MAAIL,kBAAkB;AACA,wBAAA;AACI,4BAAA;AAGtBD,kCAAAA,oBACA,CAACrD,OAAOC,KAAKqB,YAAY,EAAEd,KAAM/B,CAAO,OAAA,CAACqC,sBAAsBrC,EAAE,CAAC;AAClCiF,sCAAAA;AAEFA,oCAAAA;AACIA,wCAAAA;AAEb,2BAAA;AAAA,EAAA,OAClB;AACe,wBAAA,CAAC1D,OAAOC,KAAKqB,YAAY,EAAEd,KAC5C/B,CAAO,OAAA,CAAC0B,eAAe1B,EAAE,CAC5B;AAEA,QAAIqB,mBAAmB;AACS,oCAAA;AACI,wCAAA;AAElC0D,sCACEH,oBACArD,OAAOC,KAAKqB,YAAY,EAAEsC,OAAQnF,CAAO,OAAA,CAACqC,sBAAsBrC,EAAE,CAAC,EAChE2B,WAAW;AACoBoD,0CAAAA;AAEb,6BAAA;AACC,8BAAA;AAAA,IAAA,OACnB;AACLE,oCACEL,oBACA,CAACrD,OAAOC,KAAKqB,YAAY,EACtBsC,OAAQnF,CAAO,OAAA,CAACqC,sBAAsBrC,EAAE,CAAC,EACzC+B,KAAM/B,QAAO,CAAC0B,eAAe1B,EAAE,CAAC;AAErC+E,sCACE,CAACH,oBACD,CAACrD,OAAOC,KAAKqB,YAAY,EACtBsC,OAAQnF,CAAAA,OAAO,CAACqC,sBAAsBrC,EAAE,CAAC,EACzC+B,KAAM/B,CAAO0B,OAAAA,eAAe1B,EAAE,CAAC;AAEpC6B,8BAAwB,EACtBC,QACAA,KAAKH,UACLG,KAAKC,KAAK,CAAC;AAAA,QAAE/B;AAAAA,MAAS,MAAA,CAAC0B,eAAe1B,EAAE,CAAC;AAG3C,UAAI6B,uBAAuB;AACS,0CAAA;AAElCmD,4CACEJ,oBACA9C,QACAA,KAAKH,UACLG,KAAKqD,OAAO,CAAC;AAAA,UAAEnF;AAAAA,cAAS,CAACqC,sBAAsBrC,EAAE,CAAC,EAAE2B,WAAW;AAE1C,+BAAA;AAAA,MAAA,OAClB;AACLuD,0CACEN,oBACA,EACE9C,QACAA,KAAKH,UACLG,KACGqD,OAAO,CAAC;AAAA,UAAEnF;AAAAA,cAAS,CAACqC,sBAAsBrC,EAAE,CAAC,EAC7C+B,KAAK,CAAC;AAAA,UAAE/B;AAAAA,QAAS,MAAA,CAAC0B,eAAe1B,EAAE,CAAC;AAIzC,4CAAA,CAAC4E,oBACD,EACE9C,QACAA,KAAKH,UACLG,KACGqD,OAAO,CAAC;AAAA,UAAEnF;AAAAA,cAAS,CAACqC,sBAAsBrC,EAAE,CAAC,EAC7C+B,KAAK,CAAC;AAAA,UAAE/B;AAAAA,QAAAA,MAAS0B,eAAe1B,EAAE,CAAC;AAG1C8E,+BAAuB,EACrBhD,QACAA,KAAKH,UACLG,KAAKC,KAAK,CAAC;AAAA,UAAE/B;AAAAA,QAAAA,MAAS0B,eAAe1B,EAAE,CAAC;AAAA,MAE5C;AAAA,IACF;AAAA,EACF;AAEMoF,QAAAA,2BAA2BC,aAAahB,qBAAqB;AAE7DiB,QAAAA,kCAAkCD,aACtCf,4BACF;AAEAiB,yBAAuB,MAAM;AAC3B,QAAIH,4BAA4B;AACrB,eAAA;AAAA,QAAEjD,MAAMzD,QAAQC;AAAAA,MAAAA,CAAmB;AAAA,IAC9C;AACA,QAAI2G,mCAAmC;AAC5B,eAAA;AAAA,QAAEnD,MAAMzD,QAAQK;AAAAA,MAAAA,CAA0B;AAAA,IACrD;AAAA,EAAA,GACC,CAACwF,UAAUN,IAAI,CAAC;AAEbrF,QAAAA,wBAAwB4G,YAC3BjD,CAAAA,UAAUgC,SAAS;AAAA,IAAEpC,MAAMzD,QAAQE;AAAAA,IAAuB2D;AAAAA,EAAAA,CAAO,GAClE,CAACgC,QAAQ,CACX;AAEMzF,QAAAA,4BAA4B0G,YAC/BjD,CAAAA,UAAUgC,SAAS;AAAA,IAAEpC,MAAMzD,QAAQI;AAAAA,IAA2ByD;AAAAA,EAAAA,CAAO,GACtE,CAACgC,QAAQ,CACX;AAEA,QAAM1F,oBAAoB2G,YACxB,CAACxF,IAAIuC,UAAUgC,SAAS;AAAA,IAAEpC,MAAMzD,QAAQG;AAAAA,IAAmBmB;AAAAA,IAAIuC;AAAAA,EAAAA,CAAO,GACtE,CAACgC,QAAQ,CACX;AAEMkB,QAAAA,cAAcJ,aAAazE,QAAQ;AAEzC,QAAM8E,gCAAgCC,eACpCxB,SAAS,EAAEuB,+BACX;AAAA,IACE9E,UAAU6E,YAAY;AAAA,EAAA,CAE1B;AAEA,QAAMG,oCAAoCD,eACxCxB,SAAS,EAAEyB,mCACX;AAAA,IAAEhF,UAAU6E,YAAY;AAAA,EAAA,CAC1B;AAEA,QAAMzG,2BAA2BwG,YAC/B,CAACxF,IAAIuC,UACHgC,SAAS;AAAA,IAAEpC,MAAMzD,QAAQM;AAAAA,IAA0BgB;AAAAA,IAAIuC;AAAAA,EAAAA,CAAO,GAChE,CAACgC,QAAQ,CACX;AAEAhD,SAAOsE,OAAOjF,UAAU;AAAA,IACtB4D;AAAAA,IACAK;AAAAA,IACAC;AAAAA,IACAzD;AAAAA,IACAQ;AAAAA,IACAoD;AAAAA,IACAC;AAAAA,IACAH;AAAAA,IACAC;AAAAA,IACAnG;AAAAA,IACAD;AAAAA,IACA8G;AAAAA,IACAE;AAAAA,IACA9G;AAAAA,IACAE;AAAAA,EAAAA,CACD;AACH;AAEO,SAAS8G,WAAW1G,KAAK;AAAA,EAAEwB;AAAS,GAAG;;AAC5CxB,MAAIP,oBAAqBkH,CAAQnF,QAAAA,SAAS/B,kBAAkBO,IAAIY,IAAI+F,GAAG;AACvE3G,MAAIQ,4BAA4B+F,eAC9B/E,SAASuD,SAAAA,EAAWvE,2BACpB;AAAA,IACEgB;AAAAA,IACAxB;AAAAA,EAAAA,CAEJ;AAEAA,MAAIJ,2BAA4B+G,CAC9BnF,QAAAA,SAAS5B,yBAAyBI,IAAIY,IAAI+F,GAAG;AAC/C3G,MAAI8B,sBACFN,oBAASa,UAATb,mBAAgByB,0BAAhBzB,mBAAwCxB,IAAIY,QAAO;AACvD;AAEA,MAAMgG,kBAAyCC,CAAU,UAAA;AACjDC,QAAAA,eAAevB,KAAK9E,kBAAkB;AAEtCsG,QAAAA,YAAYxB,KAAKtE,eAAe;AAEhCT,QAAAA,4BAA4B,CAACc,gCAAgC;AAC7DgF,QAAAA,gCAAgC,CAACtE,oCAAoC;AACrEwE,QAAAA,oCAAoC,CACxChE,wCAAwC;AAGpCwE,QAAAA,cAAczB,KAAK3C,OAAO;AAC1BgC,QAAAA,YAAYW,KAAKX,WAAW;AAC5B8B,QAAAA,WAAWnB,KAAKmB,UAAU;AAClC;AAEAE,gBAAgBK,aAAa;AAE7B,MAAA,oBAAeL;"}