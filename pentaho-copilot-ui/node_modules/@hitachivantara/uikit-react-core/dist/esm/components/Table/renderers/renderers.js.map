{"version":3,"file":"renderers.js","sources":["../../../../../src/components/Table/renderers/renderers.tsx"],"sourcesContent":["import { ClassNames } from \"@emotion/react\";\n\nimport { DropDownXS, DropUpXS } from \"@hitachivantara/uikit-react-icons\";\n\nimport { setId } from \"@core/utils/setId\";\nimport { HvTag, HvTagProps } from \"@core/components/Tag\";\nimport { HvButton } from \"@core/components/Button\";\nimport { HvTypography } from \"@core/components/Typography\";\nimport {\n  HvOverflowTooltip,\n  HvOverflowTooltipProps,\n} from \"@core/components/OverflowTooltip\";\nimport { HvBaseSwitchProps } from \"@core/components/BaseSwitch\";\nimport { HvListValue } from \"@core/components/List\";\n\nimport {\n  HvTableHeaderRenderer,\n  HvCellProps,\n  HvTableColumnConfig,\n  HvRowInstance,\n} from \"../hooks/useTable\";\nimport { HvDateColumnCell } from \"./DateColumnCell\";\nimport { HvSwitchColumnCell } from \"./SwitchColumnCell\";\nimport { HvProgressColumnCell } from \"./ProgressColumnCell\";\nimport { HvDropdownColumnCell } from \"./DropdownColumnCell\";\nimport { hvStringFallback, hvNumberFallback } from \"../utils\";\n\nexport function hvTextColumn<\n  D extends object = Record<string, unknown>,\n  H extends HvTableHeaderRenderer | undefined = HvTableHeaderRenderer\n>(\n  col: HvTableColumnConfig<D, H>,\n  overflowTooltipProps: Omit<HvOverflowTooltipProps, \"data\"> = {}\n): HvTableColumnConfig<D, H> {\n  return {\n    Cell: ({ value }: HvCellProps<D, H>) => (\n      <HvOverflowTooltip\n        data={hvStringFallback(value)}\n        {...overflowTooltipProps}\n      />\n    ),\n    sortType: \"alphanumeric\",\n    ...col,\n  };\n}\n\nexport function hvNumberColumn<\n  D extends object = Record<string, unknown>,\n  H extends HvTableHeaderRenderer | undefined = HvTableHeaderRenderer\n>(col: HvTableColumnConfig<D, H>): HvTableColumnConfig<D, H> {\n  return {\n    Cell: ({ value }: HvCellProps<D, H>) => <>{hvNumberFallback(value)}</>,\n    align: \"right\",\n    sortType: \"number\",\n    ...col,\n  };\n}\n\nexport function hvDateColumn<\n  D extends object = Record<string, unknown>,\n  H extends HvTableHeaderRenderer | undefined = HvTableHeaderRenderer\n>(\n  col: HvTableColumnConfig<D, H>,\n  dateFormat?: string\n): HvTableColumnConfig<D, H> {\n  return {\n    Cell: ({ value }: HvCellProps<D, H>) => (\n      <HvDateColumnCell date={value} dateFormat={dateFormat} />\n    ),\n    sortType: \"alphanumeric\",\n    sortDescFirst: true,\n    ...col,\n  };\n}\n\nexport function hvExpandColumn<\n  D extends object = Record<string, unknown>,\n  H extends HvTableHeaderRenderer | undefined = HvTableHeaderRenderer\n>(\n  col: HvTableColumnConfig<D, H>,\n  expandRowButtonAriaLabel: string,\n  collapseRowButtonAriaLabel: string,\n  getCanRowExpand?: (row: HvRowInstance<D, H>) => boolean,\n  ExpandedIcon: React.ReactNode = <DropUpXS />,\n  CollapsedIcon: React.ReactNode = <DropDownXS />\n): HvTableColumnConfig<D, H> {\n  return {\n    Cell: (cellProps: HvCellProps<D, H>) => {\n      const { value, row } = cellProps;\n      const expandedProps = row.getToggleRowExpandedProps?.();\n\n      const hasContent = getCanRowExpand?.(row) ?? true;\n\n      return (\n        <ClassNames>\n          {({ css }) => (\n            <>\n              {hasContent && (\n                <HvButton\n                  icon\n                  aria-label={\n                    row.isExpanded\n                      ? collapseRowButtonAriaLabel\n                      : expandRowButtonAriaLabel\n                  }\n                  aria-expanded={row.isExpanded}\n                  onClick={expandedProps?.onClick}\n                  classes={{\n                    root: css({\n                      position: \"absolute\",\n                      left: 0,\n                      top: \"50%\",\n                      transform: \"translateY(-50%)\",\n                    }),\n                  }}\n                >\n                  {row.isExpanded ? ExpandedIcon : CollapsedIcon}\n                </HvButton>\n              )}\n\n              <HvOverflowTooltip data={hvStringFallback(value)} />\n            </>\n          )}\n        </ClassNames>\n      );\n    },\n    sortType: \"alphanumeric\",\n    cellStyle: {\n      position: \"relative\",\n    },\n    ...col,\n  };\n}\n\nexport function hvTagColumn<\n  D extends object = Record<string, unknown>,\n  H extends HvTableHeaderRenderer | undefined = HvTableHeaderRenderer,\n  A extends object = Record<string, unknown>\n>(\n  col: HvTableColumnConfig<D, H>,\n  valueDataKey: keyof A,\n  colorDataKey: keyof A,\n  textColorDataKey: keyof A,\n  fromRowData: boolean = false,\n  tagProps?: HvTagProps\n): HvTableColumnConfig<D, H> {\n  return {\n    Cell: (cellProps: HvCellProps<D, H>) => {\n      const { value, row } = cellProps;\n      if (!value) {\n        return <>—</>;\n      }\n\n      const {\n        [valueDataKey]: name,\n        [colorDataKey]: color,\n        [textColorDataKey]: textColor,\n      } = fromRowData ? row.original : value;\n\n      return (\n        <HvTag\n          label={<HvTypography variant=\"body\">{name}</HvTypography>}\n          type=\"semantic\"\n          color={color}\n          style={textColor != null ? { color: textColor } : {}}\n          tabIndex={-1}\n          {...tagProps}\n        />\n      );\n    },\n    cellStyle: {\n      paddingTop: 0,\n      paddingBottom: 0,\n    },\n    ...col,\n  };\n}\n\n// TODO - Review accessibility on the next renderers because they all differ\n\nexport function hvSwitchColumn<\n  D extends object = Record<string, unknown>,\n  H extends HvTableHeaderRenderer | undefined = HvTableHeaderRenderer\n>(\n  col: HvTableColumnConfig<D, H>,\n  switchLabel: string,\n  falseLabel?: string,\n  trueLabel?: string,\n  switchProps?: HvBaseSwitchProps\n): HvTableColumnConfig<D, H> {\n  return {\n    Cell: (cellProps: HvCellProps<D, H>) => {\n      const { value, row } = cellProps;\n      return (\n        <HvSwitchColumnCell\n          checked={value}\n          value={row.id}\n          switchLabel={switchLabel}\n          falseLabel={falseLabel}\n          trueLabel={trueLabel}\n          switchProps={switchProps}\n        />\n      );\n    },\n    cellStyle: {\n      paddingTop: 0,\n      paddingBottom: 0,\n    },\n    ...col,\n  };\n}\n\nexport function hvDropdownColumn<\n  D extends object = Record<string, unknown>,\n  H extends HvTableHeaderRenderer | undefined = HvTableHeaderRenderer\n>(\n  col: HvTableColumnConfig<D, H>,\n  id: string | undefined,\n  placeholder: string,\n  disabledPlaceholder: string,\n  onChange?: (identifier: string, value: HvListValue) => void\n): HvTableColumnConfig<D, H> {\n  return {\n    Cell: (cellProps: HvCellProps<D, H>) => {\n      const { value, row, column } = cellProps;\n      const dsbld = value.length < 1;\n      return (\n        <HvDropdownColumnCell\n          values={value}\n          placeholder={dsbld ? disabledPlaceholder : placeholder}\n          onChange={(val) => onChange?.(row.id, val)}\n          disabled={dsbld}\n          dropdownProps={{\n            \"aria-labelledby\": setId(id, column.id) || column.id || id, // TODO - to be reviewed because it doesn't make much sense\n          }}\n        />\n      );\n    },\n    cellStyle: {\n      paddingTop: 0,\n      paddingBottom: 0,\n    },\n    ...col,\n  };\n}\n\nexport function hvProgressColumn<\n  D extends object = Record<string, unknown>,\n  H extends HvTableHeaderRenderer | undefined = HvTableHeaderRenderer\n>(\n  col: HvTableColumnConfig<D, H>,\n  getPartial?: (row: HvRowInstance<D, H>) => number,\n  getTotal?: (row: HvRowInstance<D, H>) => number,\n  color?: \"primary\" | \"secondary\"\n): HvTableColumnConfig<D, H> {\n  return {\n    Cell: (cellProps: HvCellProps<D, H>) => {\n      const { row, column } = cellProps;\n      const partial = getPartial?.(row) || 0;\n      const total = getTotal?.(row);\n\n      if (total) {\n        return (\n          <HvProgressColumnCell\n            partial={partial}\n            total={total}\n            color={color}\n            aria-labelledby={column.id}\n          />\n        );\n      }\n\n      return <>—</>;\n    },\n\n    cellStyle: {\n      paddingTop: 0,\n      paddingBottom: 0,\n    },\n    ...col,\n  };\n}\n"],"names":["hvTextColumn","col","overflowTooltipProps","Cell","value","hvStringFallback","sortType","hvNumberColumn","hvNumberFallback","align","hvDateColumn","dateFormat","sortDescFirst","hvExpandColumn","expandRowButtonAriaLabel","collapseRowButtonAriaLabel","getCanRowExpand","ExpandedIcon","CollapsedIcon","cellProps","row","expandedProps","getToggleRowExpandedProps","hasContent","css","isExpanded","onClick","root","position","left","top","transform","cellStyle","hvTagColumn","valueDataKey","colorDataKey","textColorDataKey","fromRowData","tagProps","name","color","textColor","original","paddingTop","paddingBottom","hvSwitchColumn","switchLabel","falseLabel","trueLabel","switchProps","id","hvDropdownColumn","placeholder","disabledPlaceholder","onChange","column","dsbld","length","val","setId","hvProgressColumn","getPartial","getTotal","partial","total"],"mappings":"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"}