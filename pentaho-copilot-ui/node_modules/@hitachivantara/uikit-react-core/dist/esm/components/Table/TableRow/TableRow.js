import { jsx } from "@emotion/react/jsx-runtime";
import { forwardRef, useContext, useState, useEffect } from "react";
import { theme } from "@hitachivantara/uikit-styles";
import { checkValidHexColorValue } from "../../../utils/checkValidHexColorValue.js";
import { hexToRgbA } from "../../../utils/hexToRgbA.js";
import { getVarValue } from "../../../utils/theme.js";
import { useTheme } from "../../../hooks/useTheme.js";
import TableContext from "../TableContext.js";
import TableSectionContext from "../TableSectionContext.js";
import { useClasses } from "./TableRow.styles.js";
import { staticClasses } from "./TableRow.styles.js";
const defaultComponent = "tr";
const getStripedColor = (color, opacity = 0.6) => {
  return checkValidHexColorValue(color) ? hexToRgbA(color, opacity) : color;
};
const HvTableRow = forwardRef((props, externalRef) => {
  var _a;
  const {
    classes: classesProp,
    className,
    component,
    hover = false,
    selected = false,
    expanded = false,
    striped = false,
    ...others
  } = props;
  const {
    classes,
    cx,
    css
  } = useClasses(classesProp);
  const {
    colors,
    rootId
  } = useTheme();
  const tableContext = useContext(TableContext);
  const tableSectionContext = useContext(TableSectionContext);
  const [even, setEven] = useState();
  const [odd, setOdd] = useState();
  const type = (tableSectionContext == null ? void 0 : tableSectionContext.type) || "body";
  const isList = tableContext.variant === "listrow";
  const Component = component || ((_a = tableContext == null ? void 0 : tableContext.components) == null ? void 0 : _a.Tr) || defaultComponent;
  const [stripedColorEven, setStripedColorEven] = useState(getStripedColor(even));
  const [stripedColorOdd, setStripedColorOdd] = useState(getStripedColor(odd));
  useEffect(() => {
    setEven(getVarValue(theme.table.rowStripedBackgroundColorEven, rootId));
    setOdd(getVarValue(theme.table.rowStripedBackgroundColorOdd, rootId));
    setStripedColorEven(getStripedColor(even));
    setStripedColorOdd(getStripedColor(odd));
  }, [colors, even, odd, rootId]);
  return /* @__PURE__ */ jsx(Component, { ref: externalRef, className: cx(tableSectionContext.filterClassName, classes.root, classes[type], striped && css({
    "&:nth-of-type(even)": {
      backgroundColor: stripedColorEven,
      "&:hover": {
        backgroundColor: theme.table.rowHoverColor
      }
    },
    "&:nth-of-type(odd)": {
      backgroundColor: stripedColorOdd,
      "&:hover": {
        backgroundColor: theme.table.rowHoverColor
      }
    }
  }), {
    [classes.hover]: hover,
    [classes.selected]: selected,
    [classes.expanded]: expanded,
    [classes.striped]: striped,
    [classes.variantList]: isList && type === "body",
    [classes.variantListHead]: isList && type === "head"
  }, className), role: Component === defaultComponent ? null : "row", ...others });
});
export {
  HvTableRow,
  staticClasses as tableRowClasses
};
//# sourceMappingURL=TableRow.js.map
