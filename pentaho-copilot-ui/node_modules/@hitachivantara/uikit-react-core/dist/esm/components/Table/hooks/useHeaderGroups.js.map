{"version":3,"file":"useHeaderGroups.js","sources":["../../../../../src/components/Table/hooks/useHeaderGroups.ts"],"sourcesContent":["import { Hooks } from \"react-table\";\nimport { CSSProperties } from \"react\";\n\n// #region ##### TYPES #####\n\nexport interface UseHvHeaderGroupsInstance {\n  hasGroupedColumns?: boolean;\n}\n\n// props target: <table><thead><tr><th>\nexport interface UseHvHeaderGroupsColumnProps {\n  style?: CSSProperties;\n  groupColumnMostLeft?: boolean;\n  groupColumnMostRight?: boolean;\n}\n\n// props target: <table><tbody><tr><td>\nexport interface UseHvHeaderGroupsCellProps {\n  groupColumnMostLeft?: boolean;\n  groupColumnMostRight?: boolean;\n}\n\nexport type UseHvHeaderGroupsProps = (<\n  D extends object = Record<string, unknown>\n>(\n  hooks: Hooks<D>\n) => void) & { pluginName: string };\n\n// #endregion ##### TYPES #####\n\n/**\n * Moving non grouped headers to the top level,\n * by placing them in the position of their top level placeholder.\n *\n * By default the header groups are built bottom top,\n * that results in non grouped headers to be placed\n * at the bottom row in the table head.\n *\n * @param {Array.<Object>} headerGroups - table header groups\n */\nconst replaceHeaderPlaceholders = (headerGroups) => {\n  const [headerGroup] = headerGroups;\n\n  const hasPlaceholderHeaders = headerGroup.headers.some(\n    (h) => h.placeholderOf != null\n  );\n  if (!hasPlaceholderHeaders) {\n    return; // no placeholder header found to replace\n  }\n\n  const maxDepth = headerGroups.length - 1;\n  const leafGroup = headerGroups[maxDepth];\n\n  headerGroup.headers.forEach((header, position) => {\n    const { placeholderOf } = header;\n\n    const isPlaceholderHeader = placeholderOf != null;\n    if (isPlaceholderHeader) {\n      // is placeholder header\n      const leafIndex =\n        leafGroup.headers\n          .slice(position)\n          .findIndex(({ id }) => id === placeholderOf.id) + position;\n\n      // store leaf placeholder header\n      header.variant = placeholderOf.variant;\n      header.depth = maxDepth;\n      leafGroup.headers[leafIndex] = header;\n\n      // replace placeholder with leaf header\n      placeholderOf.rowSpan = maxDepth + 1;\n      headerGroup.headers[position] = placeholderOf;\n    }\n  });\n};\n\nconst getCellProps = (column, isHeaderCell = false) => ({\n  groupColumnMostLeft: column.isGroupLeftColumn,\n  groupColumnMostRight: column.isGroupRightColumn,\n  rowSpan: isHeaderCell && column.rowSpan != null ? column.rowSpan : 1,\n});\n\n// props target: <table><thead><tr><th>\nconst getHeaderPropsHook = (props, { instance, column }) => {\n  const nextProps: UseHvHeaderGroupsColumnProps = instance.hasGroupedColumns\n    ? getCellProps(column, true)\n    : {};\n\n  if (instance.hasGroupedColumns) {\n    const isPlaceholder = column.placeholderOf != null;\n\n    nextProps.style = {\n      display: isPlaceholder ? \"none\" : props.style?.display,\n    };\n\n    if (instance.hasStickyColumns) {\n      if (isPlaceholder) {\n        nextProps.style.visibility = \"hidden\";\n      }\n\n      if (column.rowSpan > 1) {\n        // rowSpan doesn't work with flex, so we need to simulate it by adjusting the height value manually\n        nextProps.style.height = `calc(var(--first-row-cell-height) + var(--cell-height) * ${\n          column.rowSpan - 1\n        })`;\n      }\n    }\n  }\n\n  return [props, nextProps];\n};\n\n// props target: <table><tbody><tr><td>\nconst getCellPropsHook = (props, { instance, cell }) => {\n  const nextProps: UseHvHeaderGroupsCellProps = instance.hasGroupedColumns\n    ? getCellProps(cell.column)\n    : {};\n\n  return [props, nextProps];\n};\n\nconst visibleColumnsHook = (visibleColumns, { instance }) => {\n  const parentList = new Set();\n\n  visibleColumns.forEach(({ parent }) => {\n    if (parent != null && !parentList.has(parent)) {\n      parentList.add(parent);\n    }\n  });\n\n  const hasGroupedColumns = parentList.size > 0;\n  if (hasGroupedColumns) {\n    parentList.forEach((parent: any) => {\n      parent.align = \"center\";\n      parent.isGroupLeftColumn = true;\n      parent.isGroupRightColumn = true;\n\n      const { columns } = parent;\n      columns[0].isGroupLeftColumn = true;\n      columns[columns.length - 1].isGroupRightColumn = true;\n    });\n  }\n\n  Object.assign(instance, { hasGroupedColumns });\n\n  return visibleColumns;\n};\n\nconst useInstanceHook = (instance) => {\n  if (instance.hasGroupedColumns) {\n    replaceHeaderPlaceholders(instance.headerGroups);\n  }\n};\n\nconst useHeaderGroups: UseHvHeaderGroupsProps = (hooks) => {\n  hooks.visibleColumns.push(visibleColumnsHook);\n  hooks.useInstance.push(useInstanceHook);\n\n  // props target: <table><thead><tr><th>\n  hooks.getHeaderProps.push(getHeaderPropsHook);\n  // props target: <table><tbody><tr><td>\n  hooks.getCellProps.push(getCellPropsHook);\n};\n\nuseHeaderGroups.pluginName = \"useHvHeaderGroups\";\n\nexport default useHeaderGroups;\n"],"names":["replaceHeaderPlaceholders","headerGroups","headerGroup","hasPlaceholderHeaders","headers","some","h","placeholderOf","maxDepth","length","leafGroup","forEach","header","position","isPlaceholderHeader","leafIndex","slice","findIndex","id","variant","depth","rowSpan","getCellProps","column","isHeaderCell","groupColumnMostLeft","isGroupLeftColumn","groupColumnMostRight","isGroupRightColumn","getHeaderPropsHook","props","instance","nextProps","hasGroupedColumns","isPlaceholder","style","display","hasStickyColumns","visibility","height","getCellPropsHook","cell","visibleColumnsHook","visibleColumns","parentList","Set","parent","has","add","size","align","columns","Object","assign","useInstanceHook","useHeaderGroups","hooks","push","useInstance","getHeaderProps","pluginName"],"mappings":"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"}