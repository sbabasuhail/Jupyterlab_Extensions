import { jsx, Fragment, jsxs } from "@emotion/react/jsx-runtime";
import { ClassNames } from "@emotion/react";
import { DropUpXS, DropDownXS } from "@hitachivantara/uikit-react-icons";
import { setId } from "../../../utils/setId.js";
import { hvStringFallback, hvNumberFallback } from "../utils/fallbacks.js";
import { HvDateColumnCell } from "./DateColumnCell/DateColumnCell.js";
import { HvButton } from "../../Button/Button.js";
import { HvSwitchColumnCell } from "./SwitchColumnCell/SwitchColumnCell.js";
import { HvDropdownColumnCell } from "./DropdownColumnCell/DropdownColumnCell.js";
import { HvProgressColumnCell } from "./ProgressColumnCell/ProgressColumnCell.js";
import { HvOverflowTooltip } from "../../OverflowTooltip/OverflowTooltip.js";
import { HvTag } from "../../Tag/Tag.js";
import { HvTypography } from "../../Typography/Typography.js";
function hvTextColumn(col, overflowTooltipProps = {}) {
  return {
    Cell: ({
      value
    }) => /* @__PURE__ */ jsx(HvOverflowTooltip, { data: hvStringFallback(value), ...overflowTooltipProps }),
    sortType: "alphanumeric",
    ...col
  };
}
function hvNumberColumn(col) {
  return {
    Cell: ({
      value
    }) => /* @__PURE__ */ jsx(Fragment, { children: hvNumberFallback(value) }),
    align: "right",
    sortType: "number",
    ...col
  };
}
function hvDateColumn(col, dateFormat) {
  return {
    Cell: ({
      value
    }) => /* @__PURE__ */ jsx(HvDateColumnCell, { date: value, dateFormat }),
    sortType: "alphanumeric",
    sortDescFirst: true,
    ...col
  };
}
function hvExpandColumn(col, expandRowButtonAriaLabel, collapseRowButtonAriaLabel, getCanRowExpand, ExpandedIcon = /* @__PURE__ */ jsx(DropUpXS, {}), CollapsedIcon = /* @__PURE__ */ jsx(DropDownXS, {})) {
  return {
    Cell: (cellProps) => {
      var _a;
      const {
        value,
        row
      } = cellProps;
      const expandedProps = (_a = row.getToggleRowExpandedProps) == null ? void 0 : _a.call(row);
      const hasContent = (getCanRowExpand == null ? void 0 : getCanRowExpand(row)) ?? true;
      return /* @__PURE__ */ jsx(ClassNames, { children: ({
        css
      }) => /* @__PURE__ */ jsxs(Fragment, { children: [
        hasContent && /* @__PURE__ */ jsx(HvButton, { icon: true, "aria-label": row.isExpanded ? collapseRowButtonAriaLabel : expandRowButtonAriaLabel, "aria-expanded": row.isExpanded, onClick: expandedProps == null ? void 0 : expandedProps.onClick, classes: {
          root: css({
            position: "absolute",
            left: 0,
            top: "50%",
            transform: "translateY(-50%)"
          })
        }, children: row.isExpanded ? ExpandedIcon : CollapsedIcon }),
        /* @__PURE__ */ jsx(HvOverflowTooltip, { data: hvStringFallback(value) })
      ] }) });
    },
    sortType: "alphanumeric",
    cellStyle: {
      position: "relative"
    },
    ...col
  };
}
function hvTagColumn(col, valueDataKey, colorDataKey, textColorDataKey, fromRowData = false, tagProps) {
  return {
    Cell: (cellProps) => {
      const {
        value,
        row
      } = cellProps;
      if (!value) {
        return /* @__PURE__ */ jsx(Fragment, { children: "—" });
      }
      const {
        [valueDataKey]: name,
        [colorDataKey]: color,
        [textColorDataKey]: textColor
      } = fromRowData ? row.original : value;
      return /* @__PURE__ */ jsx(HvTag, { label: /* @__PURE__ */ jsx(HvTypography, { variant: "body", children: name }), type: "semantic", color, style: textColor != null ? {
        color: textColor
      } : {}, tabIndex: -1, ...tagProps });
    },
    cellStyle: {
      paddingTop: 0,
      paddingBottom: 0
    },
    ...col
  };
}
function hvSwitchColumn(col, switchLabel, falseLabel, trueLabel, switchProps) {
  return {
    Cell: (cellProps) => {
      const {
        value,
        row
      } = cellProps;
      return /* @__PURE__ */ jsx(HvSwitchColumnCell, { checked: value, value: row.id, switchLabel, falseLabel, trueLabel, switchProps });
    },
    cellStyle: {
      paddingTop: 0,
      paddingBottom: 0
    },
    ...col
  };
}
function hvDropdownColumn(col, id, placeholder, disabledPlaceholder, onChange) {
  return {
    Cell: (cellProps) => {
      const {
        value,
        row,
        column
      } = cellProps;
      const dsbld = value.length < 1;
      return /* @__PURE__ */ jsx(HvDropdownColumnCell, { values: value, placeholder: dsbld ? disabledPlaceholder : placeholder, onChange: (val) => onChange == null ? void 0 : onChange(row.id, val), disabled: dsbld, dropdownProps: {
        "aria-labelledby": setId(id, column.id) || column.id || id
        // TODO - to be reviewed because it doesn't make much sense
      } });
    },
    cellStyle: {
      paddingTop: 0,
      paddingBottom: 0
    },
    ...col
  };
}
function hvProgressColumn(col, getPartial, getTotal, color) {
  return {
    Cell: (cellProps) => {
      const {
        row,
        column
      } = cellProps;
      const partial = (getPartial == null ? void 0 : getPartial(row)) || 0;
      const total = getTotal == null ? void 0 : getTotal(row);
      if (total) {
        return /* @__PURE__ */ jsx(HvProgressColumnCell, { partial, total, color, "aria-labelledby": column.id });
      }
      return /* @__PURE__ */ jsx(Fragment, { children: "—" });
    },
    cellStyle: {
      paddingTop: 0,
      paddingBottom: 0
    },
    ...col
  };
}
export {
  hvDateColumn,
  hvDropdownColumn,
  hvExpandColumn,
  hvNumberColumn,
  hvProgressColumn,
  hvSwitchColumn,
  hvTagColumn,
  hvTextColumn
};
//# sourceMappingURL=renderers.js.map
