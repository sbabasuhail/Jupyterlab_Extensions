import { jsxs, jsx } from "@emotion/react/jsx-runtime";
import { Backwards, Forwards, Menu } from "@hitachivantara/uikit-react-icons";
import { useContext, useMemo } from "react";
import { VerticalNavigationContext } from "../VerticalNavigationContext.js";
import { useClasses } from "./Header.styles.js";
import { staticClasses } from "./Header.styles.js";
import { HvButton } from "../../Button/Button.js";
import { HvTypography } from "../../Typography/Typography.js";
const HvVerticalNavigationHeader = ({
  title,
  openIcon = /* @__PURE__ */ jsx(Forwards, {}),
  closeIcon = /* @__PURE__ */ jsx(Backwards, {}),
  collapseButtonProps,
  backButtonProps,
  className,
  classes: classesProp,
  onCollapseButtonClick,
  ...others
}) => {
  const {
    isOpen,
    useIcons,
    headerTitle,
    slider,
    navigateToParentHandler,
    parentItem
  } = useContext(VerticalNavigationContext);
  const {
    classes,
    cx
  } = useClasses(classesProp);
  openIcon = !useIcons ? /* @__PURE__ */ jsx(Menu, {}) : openIcon;
  const backButtonClickHandler = () => {
    if (navigateToParentHandler)
      navigateToParentHandler();
  };
  const shouldShowTitle = useMemo(() => !slider || slider && !Array.isArray(parentItem), [parentItem, slider]);
  return shouldShowTitle ? /* @__PURE__ */ jsxs("div", { className: cx(classes.root, {
    [classes.minimized]: !isOpen
  }, className), ...others, children: [
    isOpen && headerTitle && slider && /* @__PURE__ */ jsx(HvButton, { icon: true, onClick: backButtonClickHandler, "aria-label": "Back", ...backButtonProps, children: /* @__PURE__ */ jsx(Backwards, { iconSize: "XS" }) }),
    isOpen && /* @__PURE__ */ jsx(HvTypography, { variant: slider ? "label" : "title3", children: headerTitle && slider ? headerTitle : title }),
    onCollapseButtonClick && /* @__PURE__ */ jsx(HvButton, { icon: true, onClick: onCollapseButtonClick, className: classes.collapseButton, classes: {
      root: isOpen ? "" : classes.minimized
    }, ...collapseButtonProps, children: isOpen ? closeIcon : openIcon })
  ] }) : null;
};
export {
  HvVerticalNavigationHeader,
  staticClasses as verticalNavigationHeaderClasses
};
//# sourceMappingURL=Header.js.map
