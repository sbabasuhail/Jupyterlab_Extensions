const searchInCollection = (collection, childrenPropName, propName, propValue) => {
  if (collection[propName] === propValue) {
    return collection;
  }
  const items = collection[childrenPropName] || collection;
  let foundItem = null;
  for (let index = 0; foundItem === null && index < items.length; index += 1) {
    foundItem = searchInCollection(items[index], childrenPropName, propName, propValue);
  }
  return foundItem;
};
const getNavigationItemById = (navigationItems, navigationItemId) => {
  return searchInCollection(navigationItems, "data", "id", navigationItemId);
};
const getParentItemById = (navigationItems, navigationItemId) => {
  var _a;
  const parentId = (_a = getNavigationItemById(navigationItems, navigationItemId)) == null ? void 0 : _a.parent;
  return getNavigationItemById(navigationItems, parentId);
};
const fillDataWithParentId = (navigationItems, parentItemId) => {
  return navigationItems.map((item) => {
    var _a;
    if (((_a = item == null ? void 0 : item.data) == null ? void 0 : _a.length) > 0) {
      return {
        ...item,
        parent: parentItemId,
        data: fillDataWithParentId(item.data, item.id)
      };
    }
    return {
      ...item,
      parent: parentItemId
    };
  });
};
export {
  fillDataWithParentId,
  getNavigationItemById,
  getParentItemById
};
//# sourceMappingURL=NavigationSlider.utils.js.map
