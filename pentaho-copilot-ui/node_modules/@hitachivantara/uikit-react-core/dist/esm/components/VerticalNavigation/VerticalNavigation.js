import { jsx } from "@emotion/react/jsx-runtime";
import { useDefaultProps } from "../../hooks/useDefaultProps.js";
import { useState, useMemo, useEffect, useCallback } from "react";
import { VerticalNavigationContext } from "./VerticalNavigationContext.js";
import { hasChildNavigationItems } from "./utils/VerticalNavigation.utils.js";
import { useClasses } from "./VerticalNavigation.styles.js";
import { staticClasses } from "./VerticalNavigation.styles.js";
import { fillDataWithParentId, getParentItemById, getNavigationItemById } from "./NavigationSlider/utils/NavigationSlider.utils.js";
const HvVerticalNavigation = (props) => {
  const {
    id,
    className,
    classes: classesProp,
    children,
    open = true,
    slider = false,
    useIcons = false,
    ...others
  } = useDefaultProps("HvVerticalNavigation", props);
  const {
    classes,
    cx
  } = useClasses(classesProp);
  const [parentData, setParentData] = useState([]);
  const [parentSelected, setParentSelected] = useState();
  const [headerTitle, setHeaderTitle] = useState();
  const withParentData = useMemo(() => fillDataWithParentId(parentData), [parentData]);
  const initialParentItem = useMemo(() => getParentItemById(withParentData, parentSelected), [withParentData, parentSelected]);
  const [parentItem, setParentItem] = useState(initialParentItem);
  const hasAnyChildWithData = useMemo(() => hasChildNavigationItems(parentData), [parentData]);
  useEffect(() => setHeaderTitle(parentItem == null ? void 0 : parentItem.label), [parentItem, setParentItem]);
  const navigateToParentHandler = useCallback(() => {
    setParentItem(getParentItemById(withParentData, parentItem.id));
  }, [parentItem, setParentItem, withParentData]);
  const navigateToChildHandler = useCallback((event, item) => {
    setParentItem(getNavigationItemById(withParentData, item.id));
    event.stopPropagation();
  }, [setParentItem, withParentData]);
  const value = useMemo(() => ({
    isOpen: open,
    useIcons,
    slider,
    headerTitle,
    setHeaderTitle,
    parentItem,
    setParentItem,
    withParentData,
    navigateToChildHandler,
    navigateToParentHandler,
    parentData,
    setParentData,
    parentSelected,
    setParentSelected,
    hasAnyChildWithData
  }), [open, useIcons, slider, headerTitle, setHeaderTitle, parentItem, setParentItem, withParentData, navigateToChildHandler, navigateToParentHandler, hasAnyChildWithData, parentData, parentSelected]);
  const content = /* @__PURE__ */ jsx(VerticalNavigationContext.Provider, { value, children: /* @__PURE__ */ jsx("div", { id, className: cx(classes.root, {
    [classes.collapsed]: !open,
    [classes.slider]: slider,
    [classes.childData]: hasAnyChildWithData
  }, className), ...others, children }) });
  return content;
};
export {
  HvVerticalNavigation,
  staticClasses as verticalNavigationClasses
};
//# sourceMappingURL=VerticalNavigation.js.map
