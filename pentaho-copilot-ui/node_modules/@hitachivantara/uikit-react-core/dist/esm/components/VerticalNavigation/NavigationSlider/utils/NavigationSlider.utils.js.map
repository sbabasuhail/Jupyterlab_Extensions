{"version":3,"file":"NavigationSlider.utils.js","sources":["../../../../../../src/components/VerticalNavigation/NavigationSlider/utils/NavigationSlider.utils.tsx"],"sourcesContent":["/**\n * Recursively searches in a collection the first element where the property matches the specified value.\n *\n * @param collection - Collection where the search will be performed\n * @param childrenPropName - The children property name where the recursive search will be performed\n * @param propName - The name of the property to be used on the search\n * @param propValue - The value of the property to be used on the search\n * @returns The element that matches the requirement or null if none is found\n */\nconst searchInCollection = (\n  collection,\n  childrenPropName,\n  propName,\n  propValue\n) => {\n  if (collection[propName] === propValue) {\n    return collection;\n  }\n\n  const items = collection[childrenPropName] || collection;\n\n  let foundItem = null;\n  for (let index = 0; foundItem === null && index < items.length; index += 1) {\n    foundItem = searchInCollection(\n      items[index],\n      childrenPropName,\n      propName,\n      propValue\n    );\n  }\n  return foundItem;\n};\n\n/**\n * Returns the navigation item with the specified id.\n *\n * @param navigationItems - The collection of navigation items.\n * @param navigationItemId - The id to be used on the search\n * @returns The navigation item with the specified id.\n */\nconst getNavigationItemById = (navigationItems, navigationItemId) => {\n  return searchInCollection(navigationItems, \"data\", \"id\", navigationItemId);\n};\n\n/**\n * Returns the parent item for the received item id.\n *\n * @param navigationItems - The collection of navigation items.\n * @param navigationItemId - The id to be used on the search\n * @returns The parent navigation item.\n */\nconst getParentItemById = (navigationItems, navigationItemId) => {\n  const parentId = getNavigationItemById(\n    navigationItems,\n    navigationItemId\n  )?.parent;\n  return getNavigationItemById(navigationItems, parentId);\n};\n\n/**\n * Fills the data structure with the parent id on each one of the nodes.\n *\n * @param navigationItems - The collection of navigation items.\n * @param parentItemId - The parent id to be added.\n * @returns The structure now filled with the parent id.\n */\nconst fillDataWithParentId = (navigationItems, parentItemId?) => {\n  return navigationItems.map((item) => {\n    if (item?.data?.length > 0) {\n      return {\n        ...item,\n        parent: parentItemId,\n        data: fillDataWithParentId(item.data, item.id),\n      };\n    }\n    return { ...item, parent: parentItemId };\n  });\n};\n\nexport { getNavigationItemById, getParentItemById, fillDataWithParentId };\n"],"names":["searchInCollection","collection","childrenPropName","propName","propValue","items","foundItem","index","length","getNavigationItemById","navigationItems","navigationItemId","getParentItemById","parentId","parent","fillDataWithParentId","parentItemId","map","item","data","id"],"mappings":"AASA,MAAMA,qBAAqBA,CACzBC,YACAC,kBACAC,UACAC,cACG;AACCH,MAAAA,WAAWE,QAAQ,MAAMC,WAAW;AAC/BH,WAAAA;AAAAA,EACT;AAEMI,QAAAA,QAAQJ,WAAWC,gBAAgB,KAAKD;AAE9C,MAAIK,YAAY;AACPC,WAAAA,QAAQ,GAAGD,cAAc,QAAQC,QAAQF,MAAMG,QAAQD,SAAS,GAAG;AAC1ED,gBAAYN,mBACVK,MAAME,KAAK,GACXL,kBACAC,UACAC,SACF;AAAA,EACF;AACOE,SAAAA;AACT;AASMG,MAAAA,wBAAwBA,CAACC,iBAAiBC,qBAAqB;AACnE,SAAOX,mBAAmBU,iBAAiB,QAAQ,MAAMC,gBAAgB;AAC3E;AASMC,MAAAA,oBAAoBA,CAACF,iBAAiBC,qBAAqB;AA1CjE;AA2CE,QAAME,YAAWJ,2BACfC,iBACAC,gBACF,MAHiBF,mBAGdK;AACIL,SAAAA,sBAAsBC,iBAAiBG,QAAQ;AACxD;AASME,MAAAA,uBAAuBA,CAACL,iBAAiBM,iBAAkB;AACxDN,SAAAA,gBAAgBO,IAAKC,CAAS,SAAA;AA1DvC;AA2DQA,UAAAA,kCAAMC,SAAND,mBAAYV,UAAS,GAAG;AACnB,aAAA;AAAA,QACL,GAAGU;AAAAA,QACHJ,QAAQE;AAAAA,QACRG,MAAMJ,qBAAqBG,KAAKC,MAAMD,KAAKE,EAAE;AAAA,MAAA;AAAA,IAEjD;AACO,WAAA;AAAA,MAAE,GAAGF;AAAAA,MAAMJ,QAAQE;AAAAA,IAAAA;AAAAA,EAAa,CACxC;AACH;"}