import { jsx, jsxs } from "@emotion/react/jsx-runtime";
import { useMemo, useCallback } from "react";
import { useDefaultProps } from "../../../hooks/useDefaultProps.js";
import { useTheme } from "@mui/material/styles";
import { useMediaQuery } from "@mui/material";
import { theme } from "@hitachivantara/uikit-styles";
import { CurrentStep } from "@hitachivantara/uikit-react-icons";
import { useUniqueId } from "../../../hooks/useUniqueId.js";
import { useTheme as useTheme$1 } from "../../../hooks/useTheme.js";
import { isKey } from "../../../utils/keyboardUtils.js";
import { setId } from "../../../utils/setId.js";
import { hexToRgbA } from "../../../utils/hexToRgbA.js";
import { withTooltip } from "../withTooltip.js";
import { useScrollTo } from "../useScrollTo.js";
import { useClasses } from "./ScrollToHorizontal.styles.js";
import { staticClasses } from "./ScrollToHorizontal.styles.js";
import { HvHorizontalScrollListItem } from "./HorizontalScrollListItem/HorizontalScrollListItem.js";
const HvScrollToHorizontal = (props) => {
  const {
    id,
    defaultSelectedIndex = 0,
    scrollElementId,
    href = true,
    onChange,
    onClick,
    onEnter,
    className,
    classes: classesProp,
    options,
    offset = 0,
    position = "relative",
    tooltipPosition = "top",
    ...others
  } = useDefaultProps("HvScrollToHorizontal", props);
  const {
    classes,
    css,
    cx
  } = useClasses(classesProp);
  const muiTheme = useTheme();
  const downSm = useMediaQuery(muiTheme.breakpoints.down("sm"));
  const upMd = useMediaQuery(muiTheme.breakpoints.up("md"));
  const {
    activeTheme,
    colors
  } = useTheme$1();
  const elementId = useUniqueId(id, "hvHorizontalScrollto");
  const [selectedIndex, setScrollTo] = useScrollTo(defaultSelectedIndex, scrollElementId, href, offset, options, onChange);
  const handleSelection = (event, value, index) => {
    event.preventDefault();
    const wrappedOnChange = () => {
      onChange == null ? void 0 : onChange(event, index);
    };
    setScrollTo(event, value, index, wrappedOnChange);
  };
  const tooltipWrappers = useMemo(() => {
    return options.map((option) => {
      return withTooltip(option.label, "div", tooltipPosition);
    });
  }, [options, tooltipPosition]);
  const NotSelected = useCallback(() => {
    return /* @__PURE__ */ jsx("div", { className: classes.notSelectedRoot, children: /* @__PURE__ */ jsx("div", { className: classes.notSelected }) });
  }, [classes.notSelectedRoot, classes.notSelected]);
  const Selected = useCallback(() => {
    return /* @__PURE__ */ jsx(CurrentStep, { height: activeTheme == null ? void 0 : activeTheme.scrollTo.dotSelectedSize, width: activeTheme == null ? void 0 : activeTheme.scrollTo.dotSelectedSize, className: classes.selected });
  }, [classes.selected, activeTheme == null ? void 0 : activeTheme.scrollTo.dotSelectedSize]);
  const tabs = options.map((option, index) => {
    const selected = selectedIndex === index;
    const tooltipWrapper = tooltipWrappers[index];
    return /* @__PURE__ */ jsxs(HvHorizontalScrollListItem, { id: setId(elementId, `item-${index}`), onClick: (event) => {
      handleSelection(event, option.value, index);
      onClick == null ? void 0 : onClick(event, index);
    }, onKeyDown: (event) => {
      if (isKey(event, "Enter") === true) {
        handleSelection(event, option.value, index);
        onEnter == null ? void 0 : onEnter(event, index);
      }
    }, tooltipWrapper, selected, children: [
      /* @__PURE__ */ jsx("p", { children: option.label }),
      selected ? /* @__PURE__ */ jsx(Selected, {}) : /* @__PURE__ */ jsx(NotSelected, {})
    ] }, option.key || option.label);
  });
  return /* @__PURE__ */ jsx("ol", { className: cx(css({
    width: position === "fixed" && (upMd || downSm) ? `calc(100% - 2*${theme.spacing(upMd ? 4 : 2)})` : "100%",
    marginTop: 0,
    marginBottom: 0,
    marginRight: position === "fixed" && (upMd || downSm) ? theme.spacing(upMd ? 4 : 2) : 0,
    marginLeft: position === "fixed" && (upMd || downSm) ? theme.spacing(upMd ? 4 : 2) : 0,
    backgroundColor: hexToRgbA(colors == null ? void 0 : colors.atmo2, activeTheme == null ? void 0 : activeTheme.scrollTo.backgroundColorOpacity)
  }), classes.root, {
    [classes.positionSticky]: position === "sticky",
    [classes.positionFixed]: position === "fixed"
  }, className), id: elementId, ...others, children: tabs });
};
export {
  HvScrollToHorizontal,
  staticClasses as scrollToHorizontalClasses
};
//# sourceMappingURL=ScrollToHorizontal.js.map
