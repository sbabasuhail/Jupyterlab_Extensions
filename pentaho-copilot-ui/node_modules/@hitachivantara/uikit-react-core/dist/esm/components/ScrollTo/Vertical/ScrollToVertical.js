import { jsx } from "@emotion/react/jsx-runtime";
import { useMemo } from "react";
import { useDefaultProps } from "../../../hooks/useDefaultProps.js";
import { useTheme } from "../../../hooks/useTheme.js";
import { useUniqueId } from "../../../hooks/useUniqueId.js";
import { isKey } from "../../../utils/keyboardUtils.js";
import { setId } from "../../../utils/setId.js";
import { hexToRgbA } from "../../../utils/hexToRgbA.js";
import { useClasses, calculateOffset } from "./ScrollToVertical.styles.js";
import { staticClasses } from "./ScrollToVertical.styles.js";
import { useScrollTo } from "../useScrollTo.js";
import { withTooltip } from "../withTooltip.js";
import { HvVerticalScrollListItem } from "./VerticalScrollListItem/VerticalScrollListItem.js";
const HvScrollToVertical = (props) => {
  const {
    id,
    defaultSelectedIndex = 0,
    scrollElementId,
    href = true,
    onChange,
    onClick,
    onEnter,
    className,
    classes: classesProp,
    options,
    offset = 0,
    position = "relative",
    tooltipPosition = "left",
    style,
    ...others
  } = useDefaultProps("HvScrollToVertical", props);
  const {
    classes,
    css,
    cx
  } = useClasses(classesProp);
  const {
    activeTheme,
    colors
  } = useTheme();
  const elementId = useUniqueId(id, "hvVerticalScrollto");
  const [selectedIndex, setScrollTo] = useScrollTo(defaultSelectedIndex, scrollElementId, href, offset, options, onChange);
  const handleSelection = (event, value, index) => {
    event.preventDefault();
    const wrappedOnChange = () => {
      onChange == null ? void 0 : onChange(event, index);
    };
    setScrollTo(event, value, index, wrappedOnChange);
  };
  const tooltipWrappers = useMemo(() => {
    return options.map((option) => {
      return withTooltip(option.label, "div", tooltipPosition, false);
    });
  }, [options, tooltipPosition]);
  const tabs = options.map((option, index) => {
    const selected = selectedIndex === index;
    const tooltipWrapper = tooltipWrappers[index];
    return /* @__PURE__ */ jsx(HvVerticalScrollListItem, { id: setId(elementId, `item-${index}`), onClick: (event) => {
      handleSelection(event, option.value, index);
      onClick == null ? void 0 : onClick(event, index);
    }, onKeyDown: (event) => {
      if (isKey(event, "Enter") === true) {
        handleSelection(event, option.value, index);
        onEnter == null ? void 0 : onEnter(event, index);
      }
    }, tooltipWrapper, selected, "aria-label": option.label }, option.key || option.label);
  });
  const positionOffset = calculateOffset(options.length);
  const backgroundColor = hexToRgbA(colors == null ? void 0 : colors.atmo2, activeTheme == null ? void 0 : activeTheme.scrollTo.backgroundColorOpacity);
  return /* @__PURE__ */ jsx("ol", { className: cx(css({
    backgroundColor
  }), classes.root, {
    [classes.positionFixed]: position === "fixed",
    [classes.positionAbsolute]: position === "absolute"
  }, className), style: {
    top: `calc(50% - ${positionOffset}px)`,
    ...style
  }, id: elementId, ...others, children: tabs });
};
export {
  HvScrollToVertical,
  staticClasses as scrollToVerticalClasses
};
//# sourceMappingURL=ScrollToVertical.js.map
