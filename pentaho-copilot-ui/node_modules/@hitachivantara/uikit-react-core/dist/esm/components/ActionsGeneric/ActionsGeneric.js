import { jsx, jsxs, Fragment } from "@emotion/react/jsx-runtime";
import { isValidElement } from "react";
import { useDefaultProps } from "../../hooks/useDefaultProps.js";
import { MoreOptionsVertical } from "@hitachivantara/uikit-react-icons";
import { theme } from "@hitachivantara/uikit-styles";
import { hexToRgbA } from "../../utils/hexToRgbA.js";
import { setId } from "../../utils/setId.js";
import { useTheme } from "../../hooks/useTheme.js";
import { useClasses } from "./ActionsGeneric.styles.js";
import { staticClasses } from "./ActionsGeneric.styles.js";
import { HvButton } from "../Button/Button.js";
import { HvDropDownMenu } from "../DropDownMenu/DropDownMenu.js";
const HvActionsGeneric = (props) => {
  const {
    id,
    classes: classesProp,
    className,
    category = "secondaryGhost",
    disabled = false,
    actions = [],
    actionsCallback,
    maxVisibleActions = Infinity,
    ...others
  } = useDefaultProps("HvActionsGeneric", props);
  const {
    classes,
    cx,
    css
  } = useClasses(classesProp);
  const {
    colors
  } = useTheme();
  if (!Array.isArray(actions))
    return isValidElement(actions) ? actions : null;
  const renderButton = (action, idx) => {
    const {
      disabled: actDisabled,
      id: actId,
      icon,
      label,
      ...other
    } = action;
    const actionId = setId(id, idx, "action", action.id);
    const renderedIcon = isValidElement(icon) ? icon : icon == null ? void 0 : icon({
      isDisabled: disabled
    });
    return /* @__PURE__ */ jsx(HvButton, { id: actionId, variant: category, className: cx(css({
      "&:hover": {
        backgroundColor: hexToRgbA((colors == null ? void 0 : colors.base_light) || theme.colors.base_light, 0.3)
      }
    }), classes.button), disabled: actDisabled ?? disabled, onClick: (event) => actionsCallback == null ? void 0 : actionsCallback(event, id || "", action), startIcon: renderedIcon, ...other, children: label }, actionId || idx);
  };
  const renderActionsGrid = () => {
    const actsVisible = actions.slice(0, maxVisibleActions);
    const actsDropdown = actions.slice(maxVisibleActions);
    const semantic = category === "semantic";
    const iconColor = disabled && "secondary_60" || semantic && "base_dark" || void 0;
    return /* @__PURE__ */ jsxs(Fragment, { children: [
      actsVisible.map((action, idx) => renderButton(action, idx)),
      /* @__PURE__ */ jsx(HvDropDownMenu, { id: setId(id, "menu"), disabled, category, classes: {
        root: classes.dropDownMenu,
        icon: classes.dropDownMenuButton,
        iconSelected: classes.dropDownMenuButtonSelected
      }, icon: /* @__PURE__ */ jsx(MoreOptionsVertical, { color: iconColor }), placement: "left", onClick: (event, action) => actionsCallback == null ? void 0 : actionsCallback(event, id || "", action), dataList: actsDropdown, keepOpened: false, disablePortal: false })
    ] });
  };
  const actionOverflow = actions.length > maxVisibleActions;
  return /* @__PURE__ */ jsx("div", { className: cx(classes.root, {
    [classes.actionContainer]: actionOverflow
  }, className), ...others, children: actionOverflow ? renderActionsGrid() : actions.map((action, idx) => renderButton(action, idx)) });
};
export {
  HvActionsGeneric,
  staticClasses as actionsGenericClasses
};
//# sourceMappingURL=ActionsGeneric.js.map
