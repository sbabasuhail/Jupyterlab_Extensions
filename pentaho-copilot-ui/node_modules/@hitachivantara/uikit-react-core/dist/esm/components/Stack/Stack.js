import { jsx, jsxs, Fragment } from "@emotion/react/jsx-runtime";
import React__default, { useRef, useMemo, useCallback } from "react";
import { useTheme } from "@mui/material/styles";
import MuiDivider from "@mui/material/Divider";
import isString from "lodash/isString";
import isBoolean from "lodash/isBoolean";
import { useWidth } from "../../hooks/useWidth.js";
import { useDefaultProps } from "../../hooks/useDefaultProps.js";
import { useClasses } from "./Stack.styles.js";
import { staticClasses } from "./Stack.styles.js";
import { HvFocus } from "../Focus/Focus.js";
const getDirection = (direction, width, breakpoints) => {
  if (isString(direction))
    return direction;
  for (let i = breakpoints.indexOf(width); i >= 0; i -= 1) {
    if (direction[breakpoints[i]] !== void 0) {
      return direction[breakpoints[i]];
    }
  }
  return "column";
};
const HvStack = (props) => {
  const {
    classes: classesProp,
    className,
    children,
    direction = "column",
    spacing = "sm",
    divider = false,
    withNavigation = false,
    dividerProps = {},
    ...others
  } = useDefaultProps("HvStack", props);
  const {
    classes,
    cx
  } = useClasses(classesProp);
  const width = useWidth();
  const containerRef = useRef(null);
  const {
    breakpoints
  } = useTheme();
  const processedDirection = useMemo(() => getDirection(direction, width, breakpoints.keys), [direction, width, breakpoints]);
  const getDividerComponent = useCallback(() => {
    if (isBoolean(divider) && divider) {
      return /* @__PURE__ */ jsx(MuiDivider, { orientation: processedDirection === "column" ? "horizontal" : "vertical", flexItem: processedDirection === "row", role: "separator", ...dividerProps });
    }
    return divider;
  }, [divider, dividerProps, processedDirection]);
  return /* @__PURE__ */ jsx("div", { ref: containerRef, className: cx(classes.root, classes[processedDirection], classes[spacing], className), ...others, children: React__default.Children.map(children, (child, i) => {
    return /* @__PURE__ */ jsxs(Fragment, { children: [
      divider && i !== 0 && getDividerComponent(),
      withNavigation ? /* @__PURE__ */ jsx(HvFocus, { rootRef: containerRef, focusDisabled: false, strategy: "grid", navigationJump: processedDirection === "column" ? 1 : React__default.Children.count(children) || 0, filterClass: "child", children: /* @__PURE__ */ jsx("div", { className: "child", children: child }) }) : child
    ] });
  }) });
};
export {
  HvStack,
  staticClasses as stackClasses
};
//# sourceMappingURL=Stack.js.map
