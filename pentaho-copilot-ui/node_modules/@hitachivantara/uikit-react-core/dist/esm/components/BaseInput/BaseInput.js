import { jsxs, Fragment, jsx } from "@emotion/react/jsx-runtime";
import { useContext } from "react";
import { Input } from "@mui/material";
import { css, Global } from "@emotion/react";
import { theme } from "@hitachivantara/uikit-styles";
import { useDefaultProps } from "../../hooks/useDefaultProps.js";
import { useClasses } from "./BaseInput.styles.js";
import { staticClasses } from "./BaseInput.styles.js";
import { buildFormElementPropsFromContext, buildAriaPropsFromContext } from "../Forms/FormElement/utils/FormUtils.js";
import { HvFormElementContext } from "../Forms/FormElement/context/FormElementContext.js";
import { HvFormElementDescriptorsContext } from "../Forms/FormElement/context/FormElementDescriptorsContext.js";
const baseInputStyles = /* @__PURE__ */ css({
  "input:-webkit-autofill": {
    WebkitBoxShadow: `0 0 0px 1000px ${theme.colors.atmo1} inset`,
    WebkitTextFillColor: theme.colors.secondary
  },
  // Clears number input up/down arrows in Chrome and Firefox
  "input::-webkit-outer-spin-button,input::-webkit-inner-spin-button": {
    WebkitAppearance: "none",
    margin: 0
  },
  "input[type=number]": {
    MozAppearance: "textfield"
  },
  // Clears time input clock in Chrome
  "input::-webkit-calendar-picker-indicator": {
    display: "none"
  },
  // Clears search input clear button in Chrome
  "input::-webkit-search-decoration,input::-webkit-search-cancel-button,input::-webkit-search-results-button,input::-webkit-search-results-decoration": {
    display: "none"
  }
}, process.env.NODE_ENV === "production" ? "" : ";label:baseInputStyles;", process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");
const HvBaseInput = (props) => {
  const {
    classes: classesProp,
    className = "",
    id,
    name,
    value,
    defaultValue,
    required,
    readOnly,
    disabled,
    onChange,
    type = "text",
    placeholder,
    multiline = false,
    resizable = false,
    invalid = false,
    inputRef,
    inputProps = {},
    ...others
  } = useDefaultProps("HvBaseInput", props);
  const {
    classes,
    cx
  } = useClasses(classesProp);
  const formElementContext = useContext(HvFormElementContext);
  const formElementProps = buildFormElementPropsFromContext(name, disabled, readOnly, required, formElementContext);
  const localInvalid = invalid || formElementProps.status === "invalid";
  const formElementDescriptorsContext = useContext(HvFormElementDescriptorsContext);
  const ariaProps = buildAriaPropsFromContext(inputProps, formElementDescriptorsContext, localInvalid, id);
  const onChangeHandler = (event) => {
    onChange == null ? void 0 : onChange(event, event.target.value);
  };
  return /* @__PURE__ */ jsxs(Fragment, { children: [
    /* @__PURE__ */ jsx(Global, { styles: baseInputStyles }),
    /* @__PURE__ */ jsxs("div", { className: cx(classes.root, className, {
      [classes.disabled]: formElementProps.disabled,
      [classes.invalid]: localInvalid,
      [classes.resizable]: multiline && resizable,
      [classes.readOnly]: formElementProps.readOnly
    }), children: [
      /* @__PURE__ */ jsx(Input, { id, name: formElementProps.name, value, defaultValue, type, placeholder, readOnly: !!formElementProps.readOnly, disabled: formElementProps.disabled, onChange: onChangeHandler, className: cx({
        [classes.inputRootInvalid]: localInvalid,
        [classes.inputRootReadOnly]: formElementProps.readOnly
      }), classes: {
        root: classes.inputRoot,
        focused: classes.inputRootFocused,
        disabled: classes.inputRootDisabled,
        multiline: classes.inputRootMultiline,
        input: cx(classes.input, {
          [classes.inputResizable]: !formElementProps.disabled && resizable,
          [classes.inputDisabled]: formElementProps.disabled,
          [classes.inputReadOnly]: formElementProps.readOnly
        })
      }, inputProps: {
        // Avoid the required attribute at the root node
        required: formElementProps.required,
        ...inputProps,
        ...ariaProps
      }, inputRef, multiline, rows: 10, ...others }),
      !multiline && /* @__PURE__ */ jsx("div", { role: "presentation", className: classes.inputBorderContainer })
    ] })
  ] });
};
export {
  HvBaseInput,
  staticClasses as baseInputClasses
};
//# sourceMappingURL=BaseInput.js.map
