{"version":3,"file":"Badge.js","sources":["../../../../src/components/Badge/Badge.tsx"],"sourcesContent":["import {\n  HvTypography,\n  HvTypographyVariants,\n} from \"@core/components/Typography\";\nimport { useDefaultProps } from \"@core/hooks/useDefaultProps\";\nimport { HvBaseProps } from \"@core/types/generic\";\nimport { ExtractNames } from \"@core/utils/classes\";\n\nimport { staticClasses, useClasses } from \"./Badge.styles\";\n\nexport { staticClasses as badgeClasses };\n\nexport type HvBadgeClasses = ExtractNames<typeof useClasses>;\n\nexport interface HvBadgeProps extends HvBaseProps {\n  /**\n   * Count is the number of unread notifications.\n   * Note count and label are mutually exclusive.\n   * count is ignored when label is specified at the same time.\n   */\n  count?: number;\n  /**\n   * True if count should be displayed.\n   * Note showCount and label are mutually exclusive.\n   * showCount is ignored when label is specified at the same time.\n   */\n  showCount?: boolean;\n  /** The maximum number of unread notifications to be displayed */\n  maxCount?: number;\n  /**\n   * Custom text to show in place of count.\n   * Note showCount and label are mutually exclusive.\n   * showCount is ignored when label is specified at the same time.\n   */\n  label?: string;\n  /** Icon which the notification will be attached. */\n  icon?: React.ReactNode;\n  /** Text which the notification will be attached. */\n  text?: string;\n  /** Text variant. */\n  textVariant?: HvTypographyVariants;\n  /** A Jss Object used to override or extend the styles applied to the component. */\n  classes?: HvBadgeClasses;\n}\n\n/**\n * The badge is a component used to notify the user that something has occurred, in the app context.\n */\nexport const HvBadge = (props: HvBadgeProps) => {\n  const {\n    classes: classesProp,\n    className,\n    showCount = false,\n    count = 0,\n    maxCount = 99,\n    label = null,\n    icon = null,\n    text = null,\n    textVariant = undefined,\n    ...others\n  } = useDefaultProps(\"HvBadge\", props);\n\n  const { classes, cx } = useClasses(classesProp);\n\n  const renderedCount = count > maxCount ? `${maxCount}+` : count;\n  // If label is specified and non-empty, render it.\n  // If showCount is specified and count > 0, render the count.\n  // Otherwise, render nothing on the badge.\n  // (Note count=0 should not be rendered to avoid ghosty 0.)\n  const renderedCountOrLabel =\n    label || (showCount && count > 0 && renderedCount) || null;\n  const Component =\n    icon || (text && <HvTypography variant={textVariant}>{text}</HvTypography>);\n\n  return (\n    <div className={cx(classes.root, className)} {...others}>\n      {Component}\n      <div className={Component ? classes.badgeContainer : undefined}>\n        <div\n          className={cx(classes.badgePosition, {\n            [classes.badge]: !!(count > 0 || renderedCountOrLabel),\n            [classes.showCount]: !!(!label && renderedCountOrLabel),\n            [classes.showLabel]: !!label,\n            [classes.badgeIcon]: !!icon,\n            [classes.badgeOneDigit]: String(renderedCountOrLabel).length === 1,\n          })}\n        >\n          {renderedCountOrLabel}\n        </div>\n      </div>\n    </div>\n  );\n};\n"],"names":["HvBadge","props","classes","classesProp","className","showCount","count","maxCount","label","icon","text","textVariant","undefined","others","useDefaultProps","cx","useClasses","renderedCount","renderedCountOrLabel","Component","root","badgeContainer","badgePosition","badge","showLabel","badgeIcon","badgeOneDigit","String","length"],"mappings":";;;;;AAgDaA,MAAAA,UAAUA,CAACC,UAAwB;AACxC,QAAA;AAAA,IACJC,SAASC;AAAAA,IACTC;AAAAA,IACAC,YAAY;AAAA,IACZC,QAAQ;AAAA,IACRC,WAAW;AAAA,IACXC,QAAQ;AAAA,IACRC,OAAO;AAAA,IACPC,OAAO;AAAA,IACPC,cAAcC;AAAAA,IACd,GAAGC;AAAAA,EAAAA,IACDC,gBAAgB,WAAWb,KAAK;AAE9B,QAAA;AAAA,IAAEC;AAAAA,IAASa;AAAAA,EAAAA,IAAOC,WAAWb,WAAW;AAE9C,QAAMc,gBAAgBX,QAAQC,WAAY,GAAEA,QAAS,MAAKD;AAK1D,QAAMY,uBACJV,SAAUH,aAAaC,QAAQ,KAAKW,iBAAkB;AACxD,QAAME,YACJV,QAASC,4BAAS,cAAa,EAAA,SAASC,aAAcD,UAAK,KAAA,CAAA;AAG3D,SAAA,qBAAC,SAAI,WAAWK,GAAGb,QAAQkB,MAAMhB,SAAS,GAAG,GAAIS,QAC9CM,UAAAA;AAAAA,IAAAA;AAAAA,IACA,oBAAA,OAAA,EAAI,WAAWA,YAAYjB,QAAQmB,iBAAiBT,QACnD,UAAA,oBAAC,OACC,EAAA,WAAWG,GAAGb,QAAQoB,eAAe;AAAA,MACnC,CAACpB,QAAQqB,KAAK,GAAG,CAAC,EAAEjB,QAAQ,KAAKY;AAAAA,MACjC,CAAChB,QAAQG,SAAS,GAAG,CAAC,EAAE,CAACG,SAASU;AAAAA,MAClC,CAAChB,QAAQsB,SAAS,GAAG,CAAC,CAAChB;AAAAA,MACvB,CAACN,QAAQuB,SAAS,GAAG,CAAC,CAAChB;AAAAA,MACvB,CAACP,QAAQwB,aAAa,GAAGC,OAAOT,oBAAoB,EAAEU,WAAW;AAAA,IAClE,CAAA,GAEAV,UAAAA,qBACH,CAAA,GACF;AAAA,EACF,EAAA,CAAA;AAEJ;"}