{"version":3,"file":"BulkActions.js","sources":["../../../../src/components/BulkActions/BulkActions.tsx"],"sourcesContent":["import { theme } from \"@hitachivantara/uikit-styles\";\n\nimport { useDefaultProps } from \"@core/hooks/useDefaultProps\";\nimport { setId } from \"@core/utils/setId\";\nimport { useTheme } from \"@core/hooks/useTheme\";\nimport { HvBaseProps } from \"@core/types/generic\";\nimport {\n  HvButton,\n  HvButtonProps,\n  HvButtonVariant,\n} from \"@core/components/Button\";\nimport { HvCheckBox, HvCheckBoxProps } from \"@core/components/CheckBox\";\nimport {\n  HvActionGeneric,\n  HvActionsGeneric,\n  HvActionsGenericProps,\n} from \"@core/components/ActionsGeneric\";\nimport { HvTypography } from \"@core/components/Typography\";\nimport { ExtractNames } from \"@core/utils/classes\";\nimport { hexToRgbA } from \"@core/utils/hexToRgbA\";\n\nimport { staticClasses, useClasses } from \"./BulkActions.styles\";\n\nexport { staticClasses as bulkActionsClasses };\n\nexport type HvBulkActionsClasses = ExtractNames<typeof useClasses>;\n\nexport interface HvBulkActionsProps extends HvBaseProps {\n  /**\n   * Custom label for select all checkbox\n   */\n  selectAllLabel?: React.ReactNode;\n  /**\n   * Custom label for select all checkbox conjunction\n   */\n  selectAllConjunctionLabel?: string;\n  /**\n   * Custom label for select all pages button\n   */\n  selectAllPagesLabel?: React.ReactNode;\n  /**\n   * Whether select all pages element should be visible\n   */\n  showSelectAllPages?: boolean;\n  /**\n   * The total number of elements\n   */\n  numTotal?: number;\n  /**\n   * The number of elements currently selected\n   */\n  numSelected?: number;\n  /**\n   * Function called when the \"select all\" Checkbox is toggled.\n   */\n  onSelectAll?: HvCheckBoxProps[\"onChange\"];\n  /**\n   * Function called when the \"select all pages\" button is clicked toggled.\n   */\n  onSelectAllPages?: HvButtonProps[\"onClick\"];\n  /**\n   * Whether the bulk actions should use the semantic styles when there are selected elements.\n   */\n  semantic?: boolean;\n  /**\n   * The renderable content inside the right actions slot,\n   * or an Array of actions `{ id, label, icon, disabled, ... }`\n   */\n  actions?: React.ReactNode | HvActionGeneric[];\n  /**\n   *  Whether actions should be all disabled\n   */\n  actionsDisabled?: boolean;\n  /**\n   *  The callback function ran when an action is triggered, receiving `action` as param\n   */\n  actionsCallback?: HvActionsGenericProps[\"actionsCallback\"];\n  /**\n   *  The number of maximum visible actions before they're collapsed into a `DropDownMenu`.\n   */\n  maxVisibleActions?: number;\n  /**\n   * Properties to be passed onto the checkbox component, the values of the object are equivalent to the\n   * HvCheckbox API.\n   */\n  checkboxProps?: HvCheckBoxProps;\n  /**\n   * A Jss Object used to override or extend the styles applied.\n   */\n  classes?: HvBulkActionsClasses;\n}\n\n/**\n * Bulk Actions allow users to perform an action on a single or multiple items.\n * Also known as \"batch production\" of multiple items at once, one stage at a time.\n */\nexport const HvBulkActions = (props: HvBulkActionsProps) => {\n  const {\n    id,\n    className,\n    classes: classesProp,\n    selectAllPagesLabel,\n    actionsDisabled,\n    maxVisibleActions,\n    checkboxProps,\n    actions,\n    numTotal = 0,\n    numSelected = 0,\n    selectAllLabel = \"All\",\n    selectAllConjunctionLabel = \"/\",\n    showSelectAllPages = false,\n    semantic = true,\n    actionsCallback,\n    onSelectAll,\n    onSelectAllPages,\n    ...others\n  } = useDefaultProps(\"HvBulkActions\", props);\n\n  const { classes, cx, css } = useClasses(classesProp);\n\n  const { activeTheme, colors } = useTheme();\n\n  const baseColor = colors?.base_light || theme.colors.base_light;\n  const anySelected = numSelected > 0;\n  const isSemantic = semantic && anySelected;\n\n  const selectAllLabelComponent = (\n    <HvTypography\n      component=\"span\"\n      disabled={checkboxProps?.disabled}\n      variant=\"body\"\n    >\n      {!anySelected ? (\n        <>\n          <HvTypography variant=\"label\">{selectAllLabel}</HvTypography>\n          {` (${numTotal})`}\n        </>\n      ) : (\n        <>\n          <HvTypography variant=\"label\">{numSelected}</HvTypography>\n          {` ${selectAllConjunctionLabel} ${numTotal}`}\n        </>\n      )}\n    </HvTypography>\n  );\n\n  return (\n    <div\n      id={id}\n      className={cx(\n        classes.root,\n        { [classes.semantic]: isSemantic },\n        isSemantic &&\n          css({\n            [`& .${staticClasses.selectAll} div`]: {\n              color: theme.bulkActions.semanticColor,\n\n              \"&:hover:not(:disabled)\": {\n                backgroundColor: hexToRgbA(baseColor, 0.3),\n              },\n\n              \"& *\": {\n                color: theme.bulkActions.semanticColor,\n                backgroundColor: \"transparent\",\n              },\n            },\n\n            [`& .${staticClasses.selectAll}:focus-within div`]: {\n              backgroundColor: hexToRgbA(baseColor, 0.3),\n            },\n          }),\n        className\n      )}\n      {...others}\n    >\n      <div className={classes.selectAllContainer}>\n        <HvCheckBox\n          id={setId(id, \"select\")}\n          className={classes.selectAll}\n          checked={numSelected > 0}\n          semantic={isSemantic}\n          onChange={onSelectAll}\n          indeterminate={numSelected > 0 && numSelected < numTotal}\n          label={selectAllLabelComponent}\n          {...checkboxProps}\n        />\n        {showSelectAllPages && anySelected && numSelected < numTotal && (\n          <>\n            <div className={classes.divider} />\n            <HvButton\n              id={setId(id, \"pages\")}\n              className={classes.selectAllPages}\n              variant={\n                isSemantic\n                  ? (activeTheme?.bulkActions\n                      .actionButtonVariant as HvButtonVariant)\n                  : \"secondaryGhost\"\n              }\n              onClick={onSelectAllPages}\n            >\n              {selectAllPagesLabel ?? `Select all ${numTotal} items`}\n            </HvButton>\n          </>\n        )}\n      </div>\n      <HvActionsGeneric\n        id={setId(id, \"actions\")}\n        classes={{ root: classes.actions }}\n        category={\n          isSemantic\n            ? (activeTheme?.bulkActions.actionButtonVariant as HvButtonVariant)\n            : \"secondaryGhost\"\n        }\n        actions={actions}\n        disabled={actionsDisabled ?? numSelected === 0}\n        actionsCallback={actionsCallback}\n        maxVisibleActions={maxVisibleActions}\n      />\n    </div>\n  );\n};\n"],"names":["HvBulkActions","props","id","className","classes","classesProp","selectAllPagesLabel","actionsDisabled","maxVisibleActions","checkboxProps","actions","numTotal","numSelected","selectAllLabel","selectAllConjunctionLabel","showSelectAllPages","semantic","actionsCallback","onSelectAll","onSelectAllPages","others","useDefaultProps","cx","css","useClasses","activeTheme","colors","useTheme","baseColor","base_light","theme","anySelected","isSemantic","selectAllLabelComponent","disabled","root","staticClasses","selectAll","color","bulkActions","semanticColor","backgroundColor","hexToRgbA","selectAllContainer","setId","divider","selectAllPages","actionButtonVariant"],"mappings":"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"}