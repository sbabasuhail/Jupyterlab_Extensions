import { jsx, jsxs, Fragment } from "@emotion/react/jsx-runtime";
import { theme } from "@hitachivantara/uikit-styles";
import { useDefaultProps } from "../../hooks/useDefaultProps.js";
import { setId } from "../../utils/setId.js";
import { useTheme } from "../../hooks/useTheme.js";
import { hexToRgbA } from "../../utils/hexToRgbA.js";
import { useClasses, staticClasses } from "./BulkActions.styles.js";
import { HvButton } from "../Button/Button.js";
import { HvTypography } from "../Typography/Typography.js";
import { HvCheckBox } from "../CheckBox/CheckBox.js";
import { HvActionsGeneric } from "../ActionsGeneric/ActionsGeneric.js";
const HvBulkActions = (props) => {
  const {
    id,
    className,
    classes: classesProp,
    selectAllPagesLabel,
    actionsDisabled,
    maxVisibleActions,
    checkboxProps,
    actions,
    numTotal = 0,
    numSelected = 0,
    selectAllLabel = "All",
    selectAllConjunctionLabel = "/",
    showSelectAllPages = false,
    semantic = true,
    actionsCallback,
    onSelectAll,
    onSelectAllPages,
    ...others
  } = useDefaultProps("HvBulkActions", props);
  const {
    classes,
    cx,
    css
  } = useClasses(classesProp);
  const {
    activeTheme,
    colors
  } = useTheme();
  const baseColor = (colors == null ? void 0 : colors.base_light) || theme.colors.base_light;
  const anySelected = numSelected > 0;
  const isSemantic = semantic && anySelected;
  const selectAllLabelComponent = /* @__PURE__ */ jsx(HvTypography, { component: "span", disabled: checkboxProps == null ? void 0 : checkboxProps.disabled, variant: "body", children: !anySelected ? /* @__PURE__ */ jsxs(Fragment, { children: [
    /* @__PURE__ */ jsx(HvTypography, { variant: "label", children: selectAllLabel }),
    ` (${numTotal})`
  ] }) : /* @__PURE__ */ jsxs(Fragment, { children: [
    /* @__PURE__ */ jsx(HvTypography, { variant: "label", children: numSelected }),
    ` ${selectAllConjunctionLabel} ${numTotal}`
  ] }) });
  return /* @__PURE__ */ jsxs("div", { id, className: cx(classes.root, {
    [classes.semantic]: isSemantic
  }, isSemantic && css({
    [`& .${staticClasses.selectAll} div`]: {
      color: theme.bulkActions.semanticColor,
      "&:hover:not(:disabled)": {
        backgroundColor: hexToRgbA(baseColor, 0.3)
      },
      "& *": {
        color: theme.bulkActions.semanticColor,
        backgroundColor: "transparent"
      }
    },
    [`& .${staticClasses.selectAll}:focus-within div`]: {
      backgroundColor: hexToRgbA(baseColor, 0.3)
    }
  }), className), ...others, children: [
    /* @__PURE__ */ jsxs("div", { className: classes.selectAllContainer, children: [
      /* @__PURE__ */ jsx(HvCheckBox, { id: setId(id, "select"), className: classes.selectAll, checked: numSelected > 0, semantic: isSemantic, onChange: onSelectAll, indeterminate: numSelected > 0 && numSelected < numTotal, label: selectAllLabelComponent, ...checkboxProps }),
      showSelectAllPages && anySelected && numSelected < numTotal && /* @__PURE__ */ jsxs(Fragment, { children: [
        /* @__PURE__ */ jsx("div", { className: classes.divider }),
        /* @__PURE__ */ jsx(HvButton, { id: setId(id, "pages"), className: classes.selectAllPages, variant: isSemantic ? activeTheme == null ? void 0 : activeTheme.bulkActions.actionButtonVariant : "secondaryGhost", onClick: onSelectAllPages, children: selectAllPagesLabel ?? `Select all ${numTotal} items` })
      ] })
    ] }),
    /* @__PURE__ */ jsx(HvActionsGeneric, { id: setId(id, "actions"), classes: {
      root: classes.actions
    }, category: isSemantic ? activeTheme == null ? void 0 : activeTheme.bulkActions.actionButtonVariant : "secondaryGhost", actions, disabled: actionsDisabled ?? numSelected === 0, actionsCallback, maxVisibleActions })
  ] });
};
export {
  HvBulkActions,
  staticClasses as bulkActionsClasses
};
//# sourceMappingURL=BulkActions.js.map
