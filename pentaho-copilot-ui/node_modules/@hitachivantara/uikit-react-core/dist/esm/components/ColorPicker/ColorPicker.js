import { jsxs, jsx, Fragment } from "@emotion/react/jsx-runtime";
import { Checkbox, ColorPicker } from "@hitachivantara/uikit-react-icons";
import { useDefaultProps } from "../../hooks/useDefaultProps.js";
import { useControlled } from "../../hooks/useControlled.js";
import { useUniqueId } from "../../hooks/useUniqueId.js";
import { useLabels } from "../../hooks/useLabels.js";
import { useTheme } from "../../hooks/useTheme.js";
import { setId } from "../../utils/setId.js";
import { useClasses } from "./ColorPicker.styles.js";
import { staticClasses } from "./ColorPicker.styles.js";
import { PresetColors } from "./PresetColors/PresetColors.js";
import { Picker } from "./Picker/Picker.js";
import { SavedColors } from "./SavedColors/SavedColors.js";
import { HvFormElement } from "../Forms/FormElement/FormElement.js";
import { HvLabel } from "../Forms/Label/Label.js";
import { HvInfoMessage } from "../Forms/InfoMessage/InfoMessage.js";
import { HvBaseDropdown } from "../BaseDropdown/BaseDropdown.js";
import { HvTypography } from "../Typography/Typography.js";
import { HvPanel } from "../Panel/Panel.js";
const DEFAULT_LABELS = {
  recommendedColorsLabel: "Recommended colors:",
  customColorsLabel: "Custom colors:"
};
const HvColorPicker = (props) => {
  const {
    id,
    name,
    required = false,
    disabled = false,
    label,
    "aria-label": ariaLabel,
    "aria-labelledby": ariaLabelledBy,
    description,
    "aria-describedby": ariaDescribedBy,
    className,
    classes: classesProp,
    value,
    onChange,
    onChangeComplete,
    defaultValue = "",
    expanded,
    defaultExpanded = false,
    recommendedColorsPosition = "top",
    recommendedColors = ["#95AFE8", "#E89E5D", "#83B8A6", "#70759C", "#C57E7E", "#FADA95", "#ADBFE8", "#E3B386", "#9AC6B7", "#8B90AF", "#CF9797", "#FAE1AA"],
    showLabels = true,
    labels: labelsProp,
    dropdownIcon = "colorPicker",
    placeholder = "Select color...",
    iconOnly = false,
    showSavedColors = true,
    showCustomColors = true,
    savedColorsValue,
    defaultSavedColorsValue = [],
    onSavedColorAdded,
    onSavedColorRemoved,
    deleteSavedColorButtonArialLabel = "Delete saved color",
    addSavedColorButtonAriaLabel = "Add current color to saved colors"
  } = useDefaultProps("HvColorPicker", props);
  const {
    classes,
    css,
    cx
  } = useClasses(classesProp);
  const {
    activeTheme
  } = useTheme();
  const labels = useLabels(DEFAULT_LABELS, labelsProp);
  const [isOpen, setIsOpen] = useControlled(expanded, Boolean(defaultExpanded));
  const [color, setColor] = useControlled(value, defaultValue);
  const [savedColors, setSavedColors] = useControlled(savedColorsValue, defaultSavedColorsValue);
  const elementId = useUniqueId(id, "hvdropdown");
  const hasLabel = label != null;
  const hasDescription = description != null;
  const handleToggle = (_, open) => {
    setIsOpen(open);
  };
  const handleSelect = (val) => {
    onChange == null ? void 0 : onChange(val.hex);
    onChangeComplete == null ? void 0 : onChangeComplete(val.hex);
    setColor(val.hex);
  };
  const handleOnChange = (val) => {
    onChange == null ? void 0 : onChange(val.hex);
    setColor(val.hex);
  };
  const handleOnChangeComplete = (val) => {
    onChangeComplete == null ? void 0 : onChangeComplete(val.hex);
    setColor(val.hex);
  };
  const handleAddColor = () => {
    const colorToAdd = color || "#000000";
    onSavedColorAdded == null ? void 0 : onSavedColorAdded(colorToAdd);
    setSavedColors([...savedColors, colorToAdd]);
  };
  const handleRemoveColor = (val, position) => {
    if (savedColors[position] === val) {
      const sColors = [...savedColors];
      sColors.splice(position, 1);
      onSavedColorRemoved == null ? void 0 : onSavedColorRemoved(val);
      setSavedColors(sColors);
    }
  };
  const setFocusToContent = (containerRef) => {
    const inputs = containerRef == null ? void 0 : containerRef.getElementsByTagName("input");
    if (inputs && inputs.length > 0) {
      inputs[0].focus();
    }
  };
  return /* @__PURE__ */ jsxs(HvFormElement, { id, name, disabled, required, className: cx(classes.root, className), children: [
    (hasLabel || hasDescription) && /* @__PURE__ */ jsxs("div", { className: classes.labelContainer, children: [
      hasLabel && /* @__PURE__ */ jsx(HvLabel, { id: setId(elementId, "label"), label, className: classes.label }),
      hasDescription && /* @__PURE__ */ jsx(HvInfoMessage, { id: setId(elementId, "description"), className: classes.description, children: description })
    ] }),
    /* @__PURE__ */ jsx(HvBaseDropdown, { variableWidth: true, className, expanded: isOpen, onToggle: handleToggle, onContainerCreation: setFocusToContent, classes: {
      root: cx({
        [classes.dropdownRootIconOnly]: iconOnly
      }),
      selection: cx(iconOnly && css({
        padding: 0
      }))
    }, adornment: iconOnly && color ? /* @__PURE__ */ jsx(Checkbox, { className: classes.headerColorIconOnly, color: [color, "transparent"] }) : dropdownIcon === "colorPicker" ? /* @__PURE__ */ jsx(ColorPicker, { className: classes.colorPickerIcon }) : void 0, placeholder: iconOnly ? void 0 : color ? /* @__PURE__ */ jsxs(Fragment, { children: [
      /* @__PURE__ */ jsx(Checkbox, { className: classes.headerColorIcon, color: [color, "transparent"] }),
      /* @__PURE__ */ jsx(HvTypography, { className: classes.headerColorValue, variant: activeTheme == null ? void 0 : activeTheme.colorPicker.inputValueVariant, children: color })
    ] }) : placeholder, "aria-label": ariaLabel, "aria-labelledby": [label && setId(elementId, "label"), ariaLabelledBy].join(" ").trim() || void 0, "aria-describedby": [description && setId(elementId, "description"), ariaDescribedBy].join(" ").trim() || void 0, children: /* @__PURE__ */ jsx(HvPanel, { className: classes.panel, children: /* @__PURE__ */ jsxs("div", { className: classes.colorPicker, children: [
      recommendedColorsPosition === "top" && /* @__PURE__ */ jsx(PresetColors, { className: cx((showCustomColors || showSavedColors) && css({
        paddingBottom: activeTheme == null ? void 0 : activeTheme.colorPicker.recommendedColorsBottomPadding
      }), classes.recommendedColorsRoot), colors: recommendedColors, onClick: handleSelect, title: showLabels ? labels == null ? void 0 : labels.recommendedColorsLabel : void 0 }),
      showCustomColors && /* @__PURE__ */ jsx(Picker, { classes: {
        fields: cx({
          [classes.pickerFields]: recommendedColorsPosition === "bottom" || showSavedColors
        })
      }, title: showLabels ? labels == null ? void 0 : labels.customColorsLabel : void 0, color, onChange: handleOnChange, onChangeComplete: handleOnChangeComplete }),
      showSavedColors && /* @__PURE__ */ jsx(SavedColors, { colors: savedColors, onAddColor: handleAddColor, onClickColor: handleSelect, onRemoveColor: handleRemoveColor, deleteButtonAriaLabel: deleteSavedColorButtonArialLabel, addButtonAriaLabel: addSavedColorButtonAriaLabel }),
      recommendedColorsPosition === "bottom" && /* @__PURE__ */ jsx(PresetColors, { colors: recommendedColors, onClick: handleSelect, title: showLabels ? labels == null ? void 0 : labels.recommendedColorsLabel : void 0 })
    ] }) }) })
  ] });
};
export {
  HvColorPicker,
  staticClasses as colorPickerClasses
};
//# sourceMappingURL=ColorPicker.js.map
