import { jsx } from "@emotion/react/jsx-runtime";
import { useDefaultProps } from "../../hooks/useDefaultProps.js";
import { useMemo } from "react";
import { useResizeDetector } from "react-resize-detector";
import { useClasses } from "./OverflowTooltip.styles.js";
import { staticClasses } from "./OverflowTooltip.styles.js";
import { HvTooltip } from "../Tooltip/Tooltip.js";
import { HvTypography } from "../Typography/Typography.js";
const isParagraph = (children = "") => /\s/.test(children);
const HvOverflowTooltip = (props) => {
  var _a;
  const {
    id,
    classes: classesProp,
    className,
    data,
    open,
    paragraphOverflow,
    placement = "top-start",
    tooltipsProps
  } = useDefaultProps("HvOverflowTooltip", props);
  const {
    classes,
    cx
  } = useClasses(classesProp);
  const {
    width = 0,
    ref
  } = useResizeDetector({
    refreshMode: "debounce",
    refreshOptions: {
      trailing: true
    },
    handleHeight: false
  });
  const scrollWidth = ((_a = ref.current) == null ? void 0 : _a.scrollWidth) || 0;
  const isOverflowing = scrollWidth - width >= 1;
  const isParag = useMemo(() => paragraphOverflow && isParagraph(data == null ? void 0 : data.toString()), [data, paragraphOverflow]);
  const content = useMemo(() => /* @__PURE__ */ jsx("div", { ref, className: cx({
    [classes.tooltipAnchor]: !isParag,
    [classes.tooltipAnchorParagraph]: isParag
  }, className), children: data }), [className, classes.tooltipAnchor, classes.tooltipAnchorParagraph, cx, data, isParag, ref]);
  return /* @__PURE__ */ jsx(
    HvTooltip,
    {
      id,
      disableHoverListener: !isOverflowing,
      open,
      placement,
      title: /* @__PURE__ */ jsx(HvTypography, { className: classes.tooltipData, variant: "body", children: data }),
      "aria-label": null,
      "aria-labelledby": null,
      ...tooltipsProps,
      children: content
    }
  );
};
export {
  HvOverflowTooltip,
  staticClasses as overflowTooltipClasses
};
//# sourceMappingURL=OverflowTooltip.js.map
