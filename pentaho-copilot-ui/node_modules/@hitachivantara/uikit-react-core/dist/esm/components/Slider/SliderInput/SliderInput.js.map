{"version":3,"file":"SliderInput.js","sources":["../../../../../src/components/Slider/SliderInput/SliderInput.tsx"],"sourcesContent":["import { useEffect, useState } from \"react\";\n\nimport { Remove } from \"@hitachivantara/uikit-react-icons\";\n\nimport { setId } from \"@core/utils/setId\";\nimport { HvFormStatus } from \"@core/components/Forms\";\nimport { HvInput, HvInputProps } from \"@core/components/Input\";\nimport { HvBaseProps } from \"@core/types/generic\";\nimport { ExtractNames } from \"@core/utils/classes\";\n\nimport { knobsValuesToString, stringValuesToKnobs } from \"../utils\";\nimport { staticClasses, useClasses } from \"./SliderInput.styles\";\n\nexport { staticClasses as sliderInputClasses };\n\nexport type HvSliderInputClasses = ExtractNames<typeof useClasses>;\n\nexport interface HvSliderInputProps\n  extends HvBaseProps<HTMLDivElement, \"onChange\"> {\n  /**\n   * Used to generate the aria-label for the inputs.\n   */\n  label?: React.ReactNode;\n  /**\n   * Input status.\n   */\n  status?: HvFormStatus[];\n  /**\n   * The values array to apply to the component\n   */\n  values?: number[];\n  /**\n   * Callback function to be triggered when the selected date has changed.\n   */\n  onChange?: (values: number[], index: number) => void;\n  /**\n   * Attributes applied to the input element.\n   */\n  inputProps?: HvInputProps[];\n  /**\n   * Indicates that the form element is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Indicates that the form element is read only.\n   */\n  readOnly?: boolean;\n  /**\n   * Indicates how many decimals to use.\n   */\n  markDigits?: number;\n  /**\n   * Styles applied from the theme.\n   */\n  classes?: HvSliderInputClasses;\n}\n\nexport const HvSliderInput = ({\n  classes: classesProp,\n  className,\n  id,\n  label,\n  status,\n  values: valuesProp = [],\n  inputProps = [],\n  readOnly = false,\n  disabled = false,\n  markDigits = 0,\n  onChange,\n  ...others\n}: HvSliderInputProps) => {\n  const { classes, cx } = useClasses(classesProp);\n\n  const [inputValues, setInputValues] = useState<string[]>(\n    knobsValuesToString(valuesProp, markDigits)\n  );\n\n  const handleChange = (index: number) => {\n    if (disabled) return;\n\n    onChange?.(stringValuesToKnobs(inputValues), index);\n  };\n\n  useEffect(() => {\n    setInputValues(knobsValuesToString(valuesProp, markDigits));\n  }, [markDigits, valuesProp]);\n\n  return (\n    <div className={cx(classes.inputRoot, className)} {...others}>\n      {inputValues.map((value, index) => (\n        <div key={setId(id, index)} className={classes.inputContainer}>\n          {index !== 0 && <Remove color={disabled ? [\"atmo4\"] : undefined} />}\n          <HvInput\n            id={setId(id, index)}\n            aria-label={`${label}-${index}`}\n            className={classes.input}\n            disabled={disabled}\n            type=\"number\"\n            value={Number.isNaN(value) || value == null ? \"\" : value.toString()}\n            onEnter={() => handleChange(index)}\n            onBlur={() => handleChange(index)}\n            onChange={(_, inputValue) => {\n              const newValues = [...inputValues];\n              newValues[index] = inputValue;\n              setInputValues(newValues);\n            }}\n            status={status?.[index] || \"standBy\"}\n            readOnly={readOnly}\n            disableClear\n            {...inputProps[index]}\n          />\n        </div>\n      ))}\n    </div>\n  );\n};\n"],"names":["HvSliderInput","classes","classesProp","className","id","label","status","values","valuesProp","inputProps","readOnly","disabled","markDigits","onChange","others","cx","useClasses","inputValues","setInputValues","useState","knobsValuesToString","handleChange","index","stringValuesToKnobs","useEffect","inputRoot","map","value","inputContainer","undefined","setId","input","Number","isNaN","toString","_","inputValue","newValues"],"mappings":";;;;;;;;AAyDO,MAAMA,gBAAgBA,CAAC;AAAA,EAC5BC,SAASC;AAAAA,EACTC;AAAAA,EACAC;AAAAA,EACAC;AAAAA,EACAC;AAAAA,EACAC,QAAQC,aAAa,CAAE;AAAA,EACvBC,aAAa,CAAE;AAAA,EACfC,WAAW;AAAA,EACXC,WAAW;AAAA,EACXC,aAAa;AAAA,EACbC;AAAAA,EACA,GAAGC;AACe,MAAM;AAClB,QAAA;AAAA,IAAEb;AAAAA,IAASc;AAAAA,EAAAA,IAAOC,WAAWd,WAAW;AAExC,QAAA,CAACe,aAAaC,cAAc,IAAIC,SACpCC,oBAAoBZ,YAAYI,UAAU,CAC5C;AAEMS,QAAAA,eAAeA,CAACC,UAAkB;AAClCX,QAAAA;AAAU;AAEHY,yCAAAA,oBAAoBN,WAAW,GAAGK;AAAAA,EAAK;AAGpDE,YAAU,MAAM;AACCJ,mBAAAA,oBAAoBZ,YAAYI,UAAU,CAAC;AAAA,EAAA,GACzD,CAACA,YAAYJ,UAAU,CAAC;AAE3B,6BACG,OAAI,EAAA,WAAWO,GAAGd,QAAQwB,WAAWtB,SAAS,GAAG,GAAIW,QACnDG,UAAYS,YAAAA,IAAI,CAACC,OAAOL,+BACtB,OAA2B,EAAA,WAAWrB,QAAQ2B,gBAC5CN,UAAAA;AAAAA,IAAU,UAAA,yBAAM,QAAO,EAAA,OAAOX,WAAW,CAAC,OAAO,IAAIkB,QAAa;AAAA,wBAClE,SACC,EAAA,IAAIC,MAAM1B,IAAIkB,KAAK,GACnB,cAAa,GAAEjB,KAAM,IAAGiB,KAAM,IAC9B,WAAWrB,QAAQ8B,OACnB,UACA,MAAK,UACL,OAAOC,OAAOC,MAAMN,KAAK,KAAKA,SAAS,OAAO,KAAKA,MAAMO,SAAS,GAClE,SAAS,MAAMb,aAAaC,KAAK,GACjC,QAAQ,MAAMD,aAAaC,KAAK,GAChC,UAAU,CAACa,GAAGC,eAAe;AACrBC,YAAAA,YAAY,CAAC,GAAGpB,WAAW;AACjCoB,gBAAUf,KAAK,IAAIc;AACnBlB,qBAAemB,SAAS;AAAA,IAE1B,GAAA,SAAQ/B,iCAASgB,WAAU,WAC3B,UACA,cAAY,MACZ,GAAIb,WAAWa,KAAK,EAAE,CAAA;AAAA,EAAA,EAAA,GAnBhBQ,MAAM1B,IAAIkB,KAAK,CAqBzB,CACD,EACH,CAAA;AAEJ;"}