import { jsx, jsxs } from "@emotion/react/jsx-runtime";
import { forwardRef } from "react";
import { useDefaultProps } from "../../hooks/useDefaultProps.js";
import { User } from "@hitachivantara/uikit-react-icons";
import { getColor, theme } from "@hitachivantara/uikit-styles";
import MuiAvatar from "@mui/material/Avatar";
import { useImageLoaded } from "../../hooks/useImageLoaded.js";
import { decreaseSize } from "../../utils/sizes.js";
import { useClasses } from "./Avatar.styles.js";
import { staticClasses } from "./Avatar.styles.js";
const HvAvatar = forwardRef((props, ref) => {
  const {
    className,
    style,
    classes: classesProp,
    children: childrenProp,
    component = "div",
    size = "sm",
    backgroundColor = "secondary",
    color = "atmo1",
    src,
    srcSet,
    sizes,
    alt,
    imgProps,
    status,
    badge,
    variant = "circular",
    avatarProps,
    ...others
  } = useDefaultProps("HvAvatar", props);
  const {
    classes,
    cx
  } = useClasses(classesProp);
  let children;
  const imageLoaded = useImageLoaded(src, srcSet);
  const hasImg = src || srcSet;
  const hasImgNotFailing = hasImg && imageLoaded !== "error";
  if (hasImgNotFailing) {
    children = /* @__PURE__ */ jsx("img", { alt, src, srcSet, sizes, className: classes.img, ...imgProps });
  } else if (childrenProp != null) {
    children = childrenProp;
  } else if (hasImg && alt) {
    [children] = alt;
  } else {
    children = /* @__PURE__ */ jsx(User, { color, iconSize: decreaseSize(size), className: classes.fallback });
  }
  const inlineStyle = {
    ...style
  };
  if (component != null && typeof component !== "string") {
    inlineStyle.borderRadius = "50%";
  }
  if (!hasImgNotFailing) {
    inlineStyle.backgroundColor = getColor(backgroundColor, theme.colors.secondary);
    inlineStyle.color = getColor(color, theme.colors.atmo1);
  }
  const statusInlineStyle = {};
  if (status) {
    const statusColor = getColor(status, theme.colors.positive);
    statusInlineStyle.boxShadow = `inset 0px 0px 0px 2px ${statusColor}`;
  }
  const badgeColor = getColor(badge || "", theme.colors.positive);
  return /* @__PURE__ */ jsx("div", { ref, className: classes.container, ...others, children: /* @__PURE__ */ jsxs("div", { className: cx(classes.status, classes[variant], classes[size]), style: statusInlineStyle, children: [
    badge && /* @__PURE__ */ jsx("div", { className: classes.badge, style: {
      backgroundColor: badgeColor
    } }),
    /* @__PURE__ */ jsx(
      MuiAvatar,
      {
        component,
        className: cx(classes.root, classes.avatar, classes[size], className),
        style: inlineStyle,
        variant,
        size,
        ...avatarProps,
        children
      }
    )
  ] }) });
});
export {
  HvAvatar,
  staticClasses as avatarClasses
};
//# sourceMappingURL=Avatar.js.map
