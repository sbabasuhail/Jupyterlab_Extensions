import { jsxs, jsx } from "@emotion/react/jsx-runtime";
import { useRef, useState, useMemo } from "react";
import { useDefaultProps } from "../../hooks/useDefaultProps.js";
import { Time as Time$1 } from "@internationalized/date";
import { useTimeField } from "@react-aria/datepicker";
import { useTimeFieldState } from "@react-stately/datepicker";
import { Time } from "@hitachivantara/uikit-react-icons";
import { useControlled } from "../../hooks/useControlled.js";
import { useUniqueId } from "../../hooks/useUniqueId.js";
import { setId } from "../../utils/setId.js";
import { Placeholder } from "./Placeholder.js";
import { useClasses } from "./TimePicker.styles.js";
import { staticClasses } from "./TimePicker.styles.js";
import { Unit } from "./Unit/Unit.js";
import { HvFormElement } from "../Forms/FormElement/FormElement.js";
import { HvLabel } from "../Forms/Label/Label.js";
import { HvInfoMessage } from "../Forms/InfoMessage/InfoMessage.js";
import { HvBaseDropdown } from "../BaseDropdown/BaseDropdown.js";
import { HvWarningText } from "../Forms/WarningText/WarningText.js";
const toTime = (value) => {
  if (!value)
    return void 0;
  const {
    hours,
    minutes,
    seconds
  } = value;
  return new Time$1(hours, minutes, seconds);
};
const getFormat = (timeFormat) => {
  if (timeFormat == null)
    return 24;
  return timeFormat === "12" ? 12 : 24;
};
const HvTimePicker = (props) => {
  const {
    classes: classesProp,
    className,
    id: idProp,
    name,
    required = false,
    disabled = false,
    readOnly = false,
    label,
    "aria-label": ariaLabel,
    "aria-labelledby": ariaLabelledBy,
    description,
    "aria-describedby": ariaDescribedBy,
    status,
    statusMessage,
    "aria-errormessage": ariaErrorMessage,
    placeholder,
    hoursPlaceholder = "hh",
    minutesPlaceholder = "mm",
    secondsPlaceholder = "ss",
    value: valueProp,
    defaultValue: defaultValueProp,
    timeFormat,
    showSeconds,
    disableExpand,
    locale = "en",
    onToggle,
    onChange,
    // misc properties:
    disablePortal = true,
    escapeWithReference = true,
    dropdownProps,
    ...others
  } = useDefaultProps("HvTimePicker", props);
  const id = useUniqueId(idProp, "hvtimepicker");
  const ref = useRef(null);
  const {
    classes,
    cx
  } = useClasses(classesProp);
  const stateProps = {
    value: toTime(valueProp),
    defaultValue: toTime(defaultValueProp),
    label,
    locale,
    isRequired: required,
    isReadOnly: readOnly,
    isDisabled: disabled,
    granularity: "second",
    hourCycle: getFormat(timeFormat),
    onChange: (value) => {
      const {
        hour: hours,
        minute: minutes,
        second: seconds
      } = value;
      onChange == null ? void 0 : onChange({
        hours,
        minutes,
        seconds
      });
    }
  };
  const state = useTimeFieldState(stateProps);
  const {
    labelProps,
    fieldProps,
    descriptionProps
  } = useTimeField({
    ...stateProps,
    id,
    "aria-label": ariaLabel,
    "aria-labelledby": ariaLabelledBy,
    "aria-describedby": ariaDescribedBy
  }, state, ref);
  const [open, setOpen] = useState(false);
  const [validationMessage] = useControlled(statusMessage, "Required");
  const [validationState] = useControlled(status, "standBy");
  const placeholders = useMemo(() => ({
    hour: hoursPlaceholder,
    minute: minutesPlaceholder,
    second: secondsPlaceholder
  }), [hoursPlaceholder, minutesPlaceholder, secondsPlaceholder]);
  const canShowError = ariaErrorMessage == null && (status !== void 0 && statusMessage !== void 0 || status === void 0 && required);
  const isStateInvalid = validationState === "invalid";
  const errorMessageId = isStateInvalid ? canShowError ? setId(id, "error") : ariaErrorMessage : void 0;
  return /* @__PURE__ */ jsxs(HvFormElement, { name, required, disabled, status: validationState, className: cx(classes.root, className), ...others, children: [
    (label || description) && /* @__PURE__ */ jsxs("div", { className: classes.labelContainer, children: [
      label && /* @__PURE__ */ jsx(HvLabel, { label, className: classes.label, ...labelProps }),
      description && /* @__PURE__ */ jsx(HvInfoMessage, { className: classes.description, ...descriptionProps, children: description })
    ] }),
    /* @__PURE__ */ jsx(HvBaseDropdown, { role: "combobox", variableWidth: true, disabled, readOnly, placeholder: placeholder && !state.value ? placeholder : /* @__PURE__ */ jsx(Placeholder, { ref, name, state, placeholders, className: cx(classes.placeholder, {
      [classes.placeholderDisabled]: disabled
    }), ...fieldProps }), classes: {
      header: cx(classes.dropdownHeader, {
        [classes.dropdownHeaderInvalid]: isStateInvalid
      }),
      panel: classes.dropdownPanel,
      headerOpen: classes.dropdownHeaderOpen
    }, placement: "right", adornment: /* @__PURE__ */ jsx(Time, { color: disabled ? "secondary_60" : void 0, className: classes.icon }), expanded: open, onToggle: (evt, newOpen) => {
      if (disableExpand)
        return;
      setOpen(newOpen);
      onToggle == null ? void 0 : onToggle(evt, newOpen);
    }, onContainerCreation: (containerRef) => {
      var _a;
      (_a = containerRef == null ? void 0 : containerRef.getElementsByTagName("input")[0]) == null ? void 0 : _a.focus();
    }, "aria-haspopup": "dialog", "aria-label": ariaLabel, "aria-labelledby": fieldProps["aria-labelledby"], "aria-describedby": fieldProps["aria-describedby"], "aria-invalid": isStateInvalid ? true : void 0, "aria-errormessage": errorMessageId, disablePortal, popperProps: {
      modifiers: [{
        name: "preventOverflow",
        enabled: escapeWithReference
      }]
    }, ...dropdownProps, children: /* @__PURE__ */ jsx("div", { ref, className: classes.timePopperContainer, children: state.segments.map((segment, i) => /* @__PURE__ */ jsx(Unit, { state, segment, placeholder: placeholders[segment.type], onAdd: () => state.increment(segment.type), onSub: () => state.decrement(segment.type), onChange: (evt, val) => {
      state.setSegment(segment.type, Number(val));
    } }, i)) }) }),
    canShowError && /* @__PURE__ */ jsx(HvWarningText, { id: setId(id, "error"), disableBorder: true, className: classes.error, children: validationMessage })
  ] });
};
export {
  HvTimePicker,
  staticClasses as timePickerClasses
};
//# sourceMappingURL=TimePicker.js.map
