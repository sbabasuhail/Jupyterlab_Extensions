import { jsx, jsxs, Fragment } from "@emotion/react/jsx-runtime";
import { useState, useContext, useMemo, useCallback, useEffect } from "react";
import cloneDeep from "lodash/cloneDeep";
import { setId } from "../../../utils/setId.js";
import { HvFilterGroupContext } from "../FilterGroupContext.js";
import { useClasses } from "./RightPanel.styles.js";
import { staticClasses } from "./RightPanel.styles.js";
import { HvTypography } from "../../Typography/Typography.js";
import { HvCheckBox } from "../../CheckBox/CheckBox.js";
import { HvPanel } from "../../Panel/Panel.js";
import { HvInput } from "../../Input/Input.js";
import { HvList } from "../../List/List.js";
const HvFilterGroupRightPanel = ({
  id,
  className,
  labels,
  emptyElement,
  classes: classesProp
}) => {
  const {
    classes
  } = useClasses(classesProp);
  const [searchStr, setSearchStr] = useState("");
  const [allSelected, setAllSelected] = useState(false);
  const [anySelected, setAnySelected] = useState(false);
  const {
    filterOptions,
    filterValues = [],
    setFilterValues,
    activeGroup
  } = useContext(HvFilterGroupContext);
  const activeGroupOptions = useMemo(() => {
    var _a;
    return ((_a = filterOptions[activeGroup]) == null ? void 0 : _a.data.map((option) => option.id)) || [];
  }, [filterOptions, activeGroup]);
  const activeFilterValues = useMemo(() => {
    var _a;
    return ((_a = filterValues[activeGroup]) == null ? void 0 : _a.filter((value) => activeGroupOptions.includes(value))) || [];
  }, [filterValues, activeGroupOptions, activeGroup]);
  const listValues = useMemo(() => {
    var _a;
    return ((_a = filterOptions[activeGroup]) == null ? void 0 : _a.data.map((option) => {
      var _a2;
      return {
        ...option,
        label: option.name,
        selected: (_a2 = filterValues[activeGroup]) == null ? void 0 : _a2.includes(option.id),
        isHidden: option.name.toLowerCase().indexOf(searchStr.toLowerCase()) < 0
      };
    })) || [];
  }, [filterOptions, filterValues, activeGroup, searchStr]);
  const updateSelectAll = useCallback(() => {
    const nbrSelected = activeFilterValues == null ? void 0 : activeFilterValues.length;
    const hasSelection = nbrSelected > 0;
    const allSelect = nbrSelected === activeGroupOptions.length;
    setAnySelected(hasSelection);
    setAllSelected(hasSelection && allSelect);
  }, [activeFilterValues, activeGroupOptions]);
  useEffect(() => {
    updateSelectAll();
  }, [activeFilterValues, updateSelectAll]);
  useEffect(() => setSearchStr(""), [activeGroup]);
  const onChangeHandler = (values) => {
    const newFilterValues = filterOptions.map((_, i) => activeGroup === i ? values.filter((v) => v.selected).map((v) => v.id) : [...filterValues[i] || []]);
    setFilterValues(newFilterValues);
  };
  const handleSelectAll = useCallback(() => {
    const newFilterValues = cloneDeep(filterValues);
    newFilterValues[activeGroup] = anySelected ? [] : activeGroupOptions;
    setFilterValues(newFilterValues);
  }, [activeGroup, activeGroupOptions, anySelected, filterValues, setFilterValues]);
  const SelectAll = useCallback(() => {
    const nbrSelected = activeFilterValues == null ? void 0 : activeFilterValues.length;
    const defaultLabel = /* @__PURE__ */ jsx(HvTypography, { component: "span", children: nbrSelected > 0 ? /* @__PURE__ */ jsxs(Fragment, { children: [
      /* @__PURE__ */ jsx("b", { children: nbrSelected }),
      ` ${labels == null ? void 0 : labels.multiSelectionConjunction} ${activeGroupOptions.length}`
    ] }) : /* @__PURE__ */ jsxs(Fragment, { children: [
      /* @__PURE__ */ jsx("b", { children: labels == null ? void 0 : labels.selectAll }),
      ` (${activeGroupOptions.length})`
    ] }) });
    return /* @__PURE__ */ jsx("div", { className: classes.selectAllContainer, children: /* @__PURE__ */ jsx(HvCheckBox, { id: setId(id, "select-all"), label: defaultLabel, onChange: () => handleSelectAll(), className: classes.selectAll, indeterminate: anySelected && !allSelected, checked: allSelected }) });
  }, [activeFilterValues == null ? void 0 : activeFilterValues.length, activeGroupOptions.length, allSelected, anySelected, handleSelectAll, id, labels, classes == null ? void 0 : classes.selectAllContainer, classes == null ? void 0 : classes.selectAll]);
  return /* @__PURE__ */ jsx(HvPanel, { id: setId(id, "rightPanel"), className, children: listValues.length > 0 ? /* @__PURE__ */ jsxs(Fragment, { children: [
    /* @__PURE__ */ jsx(HvInput, { id: setId(id, "search"), classes: {
      root: classes.search
    }, type: "search", placeholder: labels == null ? void 0 : labels.searchBoxPlaceholder, value: searchStr, onChange: (_, str) => setSearchStr(str) }),
    /* @__PURE__ */ jsx(SelectAll, {}),
    /* @__PURE__ */ jsx(HvList, { id: setId(id, "list"), values: listValues, className: classes.list, multiSelect: true, useSelector: true, showSelectAll: false, onChange: onChangeHandler, selectable: true, condensed: true, hasTooltips: true }, activeGroup)
  ] }) : emptyElement });
};
export {
  HvFilterGroupRightPanel,
  staticClasses as filterGroupRightPanelClasses
};
//# sourceMappingURL=RightPanel.js.map
