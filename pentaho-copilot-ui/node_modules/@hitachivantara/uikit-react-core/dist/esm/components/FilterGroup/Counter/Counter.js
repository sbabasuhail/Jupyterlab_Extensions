import { jsxs, jsx } from "@emotion/react/jsx-runtime";
import { useContext } from "react";
import { HvFilterGroupContext } from "../FilterGroupContext.js";
import { useClasses } from "./Counter.styles.js";
import { staticClasses } from "./Counter.styles.js";
const getExistingFiltersById = (idx, filterValues, filterOptions) => {
  var _a;
  let total = 0;
  (_a = filterValues[idx]) == null ? void 0 : _a.forEach((fv) => {
    var _a2;
    if ((_a2 = filterOptions[idx]) == null ? void 0 : _a2.data.find((f) => f.id === fv)) {
      total += 1;
    }
  });
  return total;
};
const HvFilterGroupCounter = ({
  className,
  id,
  classes: classesProp
}) => {
  const {
    classes,
    cx
  } = useClasses(classesProp);
  const {
    filterOptions,
    filterValues = [],
    appliedFilters = []
  } = useContext(HvFilterGroupContext);
  const options = id && filterOptions.find((option) => option.id === id) ? [filterOptions.find((option) => option.id === id)] : filterOptions;
  const optionIdx = filterOptions.findIndex((option) => option.id === id);
  let groupsCounter = 0;
  appliedFilters.filter((elem) => elem !== void 0).forEach((fg, i) => {
    groupsCounter += getExistingFiltersById(i, filterValues, filterOptions);
  });
  const partialCounter = id ? getExistingFiltersById(optionIdx, filterValues, filterOptions) || 0 : groupsCounter;
  const totalCounter = options.reduce((acc, option) => acc + option.data.length, 0);
  return /* @__PURE__ */ jsxs("div", { className: cx(classes.root, className), children: [
    partialCounter > 0 ? /* @__PURE__ */ jsx("p", { className: classes.partialCounter, children: partialCounter }) : partialCounter,
    ` / ${totalCounter}`
  ] });
};
export {
  HvFilterGroupCounter,
  staticClasses as filterGroupCounterClasses
};
//# sourceMappingURL=Counter.js.map
