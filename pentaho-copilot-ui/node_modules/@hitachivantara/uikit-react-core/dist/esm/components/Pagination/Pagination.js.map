{"version":3,"file":"Pagination.js","sources":["../../../../src/components/Pagination/Pagination.tsx"],"sourcesContent":["import { HTMLAttributes, useCallback, useEffect } from \"react\";\nimport { useDefaultProps } from \"@core/hooks/useDefaultProps\";\n\nimport { Hidden } from \"@mui/material\";\n\nimport {\n  Start,\n  End,\n  Backwards,\n  Forwards,\n} from \"@hitachivantara/uikit-react-icons\";\n\nimport { HvInput, HvInputProps } from \"@core/components/Input\";\nimport { HvTypography } from \"@core/components/Typography\";\nimport { HvBaseProps } from \"@core/types/generic\";\nimport { setId } from \"@core/utils/setId\";\nimport { isKey } from \"@core/utils/keyboardUtils\";\nimport { ExtractNames } from \"@core/utils/classes\";\nimport { useLabels } from \"@core/hooks/useLabels\";\n\nimport HvSelect, { Option } from \"./Select\";\nimport { staticClasses, useClasses } from \"./Pagination.styles\";\nimport { usePageInput, getSafePage, setColor } from \"./utils\";\nimport ButtonIconTooltip from \"./ButtonIconTooltip\";\n\nexport { staticClasses as paginationClasses };\n\nexport type HvPaginationClasses = ExtractNames<typeof useClasses>;\n\nexport interface HvPaginationLabels {\n  /** The show label. */\n  pageSizePrev?: string;\n  /** Indicate the units of the page size selection. */\n  pageSizeEntryName?: string;\n  /** Used for the aria-label of the selection of number of unit.s */\n  pageSizeSelectorDescription?: string;\n  /** Separator of current page and total pages. */\n  pagesSeparator?: string;\n  /** Title of button `firstPage`. */\n  paginationFirstPageTitle?: string;\n  /** Title of button `previousPage`. */\n  paginationPreviousPageTitle?: string;\n  /** Title of button `nextPage`. */\n  paginationNextPageTitle?: string;\n  /** Title of button `lastPage`. */\n  paginationLastPageTitle?: string;\n  /** Aria-label passed to the page input. */\n  paginationInputLabel?: string;\n  /** Aria-label of the first page button */\n  firstPage?: string;\n  /** Aria-label of the previous page button */\n  previousPage?: string;\n  /** Aria-label of the next page button */\n  nextPage?: string;\n  /** Aria-label of the last page button */\n  lastPage?: string;\n}\n\nexport interface HvPaginationProps extends HvBaseProps {\n  /** The number of pages the component has. */\n  pages?: number;\n  /** The currently selected page (0-indexed). */\n  page?: number;\n  /** Controls whether the left page size mechanism should be visible. */\n  showPageSizeOptions?: boolean;\n  /** The array of possible page sizes for the dropdown. */\n  pageSizeOptions?: number[];\n  /** The currently selected page size. */\n  pageSize?: number;\n  /** Controls whether the central page changing mechanism should be visible. */\n  showPageJump?: boolean;\n  /** Controls whether the previous/first page buttons are enabled. */\n  canPrevious?: boolean;\n  /** Controls whether the next/last page buttons are enabled. */\n  canNext?: boolean;\n  /** Function called when the page changes. */\n  onPageChange?: (page: number) => void;\n  /** Function called when the page size changes. */\n  onPageSizeChange?: (pageSize: number) => void;\n  /** An object containing all the labels for the component. */\n  labels?: HvPaginationLabels;\n  /** Other props to show page component. */\n  showPageProps?: HTMLAttributes<HTMLDivElement>;\n  /** Other props to pagination component. */\n  navigationProps?: HTMLAttributes<HTMLDivElement>;\n  /** Extra properties passed to the input component representing the current pages. */\n  currentPageInputProps?: HvInputProps;\n  /** A Jss Object used to override or extend the styles applied to the component. */\n  classes?: HvPaginationClasses;\n}\n\nconst DEFAULT_LABELS = {\n  pageSizePrev: \"Show\",\n  pageSizeEntryName: \"rows\",\n  pageSizeSelectorDescription: \"Select how many to display\",\n  pagesSeparator: \"/\",\n  paginationFirstPageTitle: \"First page\",\n  paginationPreviousPageTitle: \"Previous page\",\n  paginationNextPageTitle: \"Next page\",\n  paginationLastPageTitle: \"Last page\",\n  paginationInputLabel: \"Current page\",\n  firstPage: \"First Page\",\n  previousPage: \"Previous Page\",\n  nextPage: \"Next Page\",\n  lastPage: \"Last Page\",\n};\n\nconst defaultPageSizeOptions = [5, 10, 20, 25, 50, 100];\n\n/**\n * Pagination is the process of dividing a document into discrete pages. It relates to how users interact\n * with structured content on a website or application.\n */\nexport const HvPagination = (props: HvPaginationProps) => {\n  const {\n    classes: classesProp,\n    className,\n    id,\n    pages = 1,\n    page = 0,\n    showPageSizeOptions = true,\n    pageSizeOptions = defaultPageSizeOptions,\n    pageSize = defaultPageSizeOptions[1],\n    showPageJump = true,\n    canPrevious = false,\n    canNext = false,\n    onPageChange,\n    onPageSizeChange,\n    labels: labelsProp,\n    showPageProps,\n    navigationProps,\n    currentPageInputProps,\n    ...others\n  } = useDefaultProps(\"HvPagination\", props);\n\n  const labels = useLabels(DEFAULT_LABELS, labelsProp);\n  const [pageInput, handleInputChange] = usePageInput(page);\n  const { classes, cx } = useClasses(classesProp);\n\n  const changePage = useCallback(\n    (newPage: number) => {\n      const safePage: number = getSafePage(newPage, page, pages);\n\n      onPageChange?.(safePage);\n      handleInputChange(null, safePage + 1);\n    },\n    [page, pages, onPageChange, handleInputChange]\n  );\n\n  useEffect(() => {\n    if (page >= pages && pages > 0) {\n      changePage(page);\n    }\n  }, [changePage, page, pages]);\n\n  useEffect(() => {\n    if (pageInput !== page + 1) {\n      handleInputChange(null, page + 1);\n    }\n\n    // we only want to \"fix\" the input's display value when `page` property changed\n    // (either externally or when internally committed - onBlur or Enter),\n    // not while editing the input.\n    // breaking a rule of hooks isn't ideal and it's just a hack for fixing\n    // a bug preventing properly controlling of the `page` property.\n    // fixing it some other way would potentially introduce a breaking change.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [handleInputChange, page]);\n\n  const renderPageJump = () => (\n    <div className={classes.pageJump}>\n      <HvInput\n        id={setId(id, \"currentPage\")}\n        labels={labels}\n        inputProps={{\n          \"aria-label\": labels?.paginationInputLabel,\n          // We really want the native number input\n          type: \"number\",\n        }}\n        classes={{\n          root: classes?.pageSizeInputContainer,\n          input: classes?.pageSizeInput,\n          inputRoot: classes?.pageSizeInputRoot,\n        }}\n        onChange={(event, value) => handleInputChange(event, Number(value))}\n        value={String(pageInput)}\n        onBlur={(evt, value) => changePage(Number(value) - 1)}\n        onKeyDown={(evt, value) =>\n          isKey(evt, \"Enter\") && changePage(Number(value) - 1)\n        }\n        disabled={pageSize === 0}\n        disableClear\n        {...currentPageInputProps}\n      />\n    </div>\n  );\n\n  return (\n    <div id={id} className={cx(classes.root, className)} {...others}>\n      <div className={classes.pageSizeOptions} {...showPageProps}>\n        {showPageSizeOptions && (\n          <>\n            <Hidden xsDown>\n              <HvTypography\n                component=\"span\"\n                className={classes?.pageSizeTextContainer}\n              >\n                {labels?.pageSizePrev}\n              </HvTypography>\n            </Hidden>\n            <HvSelect\n              id={setId(id, \"pageSize\")}\n              disabled={pageSize === 0}\n              className={classes.pageSizeOptionsSelect}\n              aria-label={labels?.pageSizeSelectorDescription}\n              onChange={(_: any, val: number) => onPageSizeChange?.(val)}\n              value={pageSize}\n            >\n              {pageSizeOptions.map((option) => (\n                <Option key={option} value={option}>\n                  {option}\n                </Option>\n              ))}\n            </HvSelect>\n            <Hidden xsDown>\n              <HvTypography\n                component=\"span\"\n                className={classes.pageSizeTextContainer}\n              >\n                {labels?.pageSizeEntryName}\n              </HvTypography>\n            </Hidden>\n          </>\n        )}\n      </div>\n      <div className={classes.pageNavigator} {...navigationProps}>\n        <ButtonIconTooltip\n          id={setId(id, \"firstPage-button\")}\n          aria-label={labels?.firstPage}\n          className={classes.iconContainer}\n          disabled={!canPrevious}\n          onClick={() => changePage(0)}\n          tooltip={labels?.paginationFirstPageTitle}\n        >\n          <Start className={classes.icon} color={setColor(!canPrevious)} />\n        </ButtonIconTooltip>\n        <ButtonIconTooltip\n          id={setId(id, \"previousPage-button\")}\n          aria-label={labels?.previousPage}\n          className={classes.iconContainer}\n          disabled={!canPrevious}\n          onClick={() => changePage(page - 1)}\n          tooltip={labels?.paginationPreviousPageTitle}\n        >\n          <Backwards className={classes.icon} color={setColor(!canPrevious)} />\n        </ButtonIconTooltip>\n        <div className={classes.pageInfo}>\n          {showPageJump ? (\n            renderPageJump()\n          ) : (\n            <HvTypography component=\"span\">{`${page + 1}`}</HvTypography>\n          )}\n          <HvTypography component=\"span\">{`${labels?.pagesSeparator} `}</HvTypography>\n          <HvTypography component=\"span\" id={setId(id, \"totalPages\")}>\n            {pages}\n          </HvTypography>\n        </div>\n        <ButtonIconTooltip\n          id={setId(id, \"nextPage-button\")}\n          aria-label={labels?.nextPage}\n          className={classes.iconContainer}\n          disabled={!canNext}\n          onClick={() => changePage(page + 1)}\n          tooltip={labels?.paginationNextPageTitle}\n        >\n          <Forwards className={classes.icon} color={setColor(!canNext)} />\n        </ButtonIconTooltip>\n        <ButtonIconTooltip\n          id={setId(id, \"lastPage-button\")}\n          aria-label={labels?.lastPage}\n          className={classes.iconContainer}\n          disabled={!canNext}\n          onClick={() => changePage(pages - 1)}\n          tooltip={labels?.paginationLastPageTitle}\n        >\n          <End className={classes.icon} color={setColor(!canNext)} />\n        </ButtonIconTooltip>\n      </div>\n    </div>\n  );\n};\n"],"names":["DEFAULT_LABELS","pageSizePrev","pageSizeEntryName","pageSizeSelectorDescription","pagesSeparator","paginationFirstPageTitle","paginationPreviousPageTitle","paginationNextPageTitle","paginationLastPageTitle","paginationInputLabel","firstPage","previousPage","nextPage","lastPage","defaultPageSizeOptions","HvPagination","props","classes","classesProp","className","id","pages","page","showPageSizeOptions","pageSizeOptions","pageSize","showPageJump","canPrevious","canNext","onPageChange","onPageSizeChange","labels","labelsProp","showPageProps","navigationProps","currentPageInputProps","others","useDefaultProps","useLabels","pageInput","handleInputChange","usePageInput","cx","useClasses","changePage","useCallback","newPage","safePage","getSafePage","useEffect","renderPageJump","pageJump","setId","type","root","pageSizeInputContainer","input","pageSizeInput","inputRoot","pageSizeInputRoot","event","value","Number","String","evt","isKey","pageSizeTextContainer","pageSizeOptionsSelect","_","val","map","option","pageNavigator","iconContainer","icon","setColor","pageInfo"],"mappings":"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"}