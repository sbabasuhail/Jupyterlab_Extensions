import { jsxs, jsx, Fragment } from "@emotion/react/jsx-runtime";
import { useCallback, useEffect } from "react";
import { useDefaultProps } from "../../hooks/useDefaultProps.js";
import { Hidden } from "@mui/material";
import { Start, Backwards, Forwards, End } from "@hitachivantara/uikit-react-icons";
import { setId } from "../../utils/setId.js";
import { isKey } from "../../utils/keyboardUtils.js";
import { useLabels } from "../../hooks/useLabels.js";
import HvSelect, { Option } from "./Select.js";
import { useClasses } from "./Pagination.styles.js";
import { staticClasses } from "./Pagination.styles.js";
import { usePageInput, setColor, getSafePage } from "./utils.js";
import ButtonIconTooltip from "./ButtonIconTooltip.js";
import { HvTypography } from "../Typography/Typography.js";
import { HvInput } from "../Input/Input.js";
const DEFAULT_LABELS = {
  pageSizePrev: "Show",
  pageSizeEntryName: "rows",
  pageSizeSelectorDescription: "Select how many to display",
  pagesSeparator: "/",
  paginationFirstPageTitle: "First page",
  paginationPreviousPageTitle: "Previous page",
  paginationNextPageTitle: "Next page",
  paginationLastPageTitle: "Last page",
  paginationInputLabel: "Current page",
  firstPage: "First Page",
  previousPage: "Previous Page",
  nextPage: "Next Page",
  lastPage: "Last Page"
};
const defaultPageSizeOptions = [5, 10, 20, 25, 50, 100];
const HvPagination = (props) => {
  const {
    classes: classesProp,
    className,
    id,
    pages = 1,
    page = 0,
    showPageSizeOptions = true,
    pageSizeOptions = defaultPageSizeOptions,
    pageSize = defaultPageSizeOptions[1],
    showPageJump = true,
    canPrevious = false,
    canNext = false,
    onPageChange,
    onPageSizeChange,
    labels: labelsProp,
    showPageProps,
    navigationProps,
    currentPageInputProps,
    ...others
  } = useDefaultProps("HvPagination", props);
  const labels = useLabels(DEFAULT_LABELS, labelsProp);
  const [pageInput, handleInputChange] = usePageInput(page);
  const {
    classes,
    cx
  } = useClasses(classesProp);
  const changePage = useCallback((newPage) => {
    const safePage = getSafePage(newPage, page, pages);
    onPageChange == null ? void 0 : onPageChange(safePage);
    handleInputChange(null, safePage + 1);
  }, [page, pages, onPageChange, handleInputChange]);
  useEffect(() => {
    if (page >= pages && pages > 0) {
      changePage(page);
    }
  }, [changePage, page, pages]);
  useEffect(() => {
    if (pageInput !== page + 1) {
      handleInputChange(null, page + 1);
    }
  }, [handleInputChange, page]);
  const renderPageJump = () => /* @__PURE__ */ jsx("div", { className: classes.pageJump, children: /* @__PURE__ */ jsx(HvInput, { id: setId(id, "currentPage"), labels, inputProps: {
    "aria-label": labels == null ? void 0 : labels.paginationInputLabel,
    // We really want the native number input
    type: "number"
  }, classes: {
    root: classes == null ? void 0 : classes.pageSizeInputContainer,
    input: classes == null ? void 0 : classes.pageSizeInput,
    inputRoot: classes == null ? void 0 : classes.pageSizeInputRoot
  }, onChange: (event, value) => handleInputChange(event, Number(value)), value: String(pageInput), onBlur: (evt, value) => changePage(Number(value) - 1), onKeyDown: (evt, value) => isKey(evt, "Enter") && changePage(Number(value) - 1), disabled: pageSize === 0, disableClear: true, ...currentPageInputProps }) });
  return /* @__PURE__ */ jsxs("div", { id, className: cx(classes.root, className), ...others, children: [
    /* @__PURE__ */ jsx("div", { className: classes.pageSizeOptions, ...showPageProps, children: showPageSizeOptions && /* @__PURE__ */ jsxs(Fragment, { children: [
      /* @__PURE__ */ jsx(Hidden, { xsDown: true, children: /* @__PURE__ */ jsx(HvTypography, { component: "span", className: classes == null ? void 0 : classes.pageSizeTextContainer, children: labels == null ? void 0 : labels.pageSizePrev }) }),
      /* @__PURE__ */ jsx(HvSelect, { id: setId(id, "pageSize"), disabled: pageSize === 0, className: classes.pageSizeOptionsSelect, "aria-label": labels == null ? void 0 : labels.pageSizeSelectorDescription, onChange: (_, val) => onPageSizeChange == null ? void 0 : onPageSizeChange(val), value: pageSize, children: pageSizeOptions.map((option) => /* @__PURE__ */ jsx(Option, { value: option, children: option }, option)) }),
      /* @__PURE__ */ jsx(Hidden, { xsDown: true, children: /* @__PURE__ */ jsx(HvTypography, { component: "span", className: classes.pageSizeTextContainer, children: labels == null ? void 0 : labels.pageSizeEntryName }) })
    ] }) }),
    /* @__PURE__ */ jsxs("div", { className: classes.pageNavigator, ...navigationProps, children: [
      /* @__PURE__ */ jsx(ButtonIconTooltip, { id: setId(id, "firstPage-button"), "aria-label": labels == null ? void 0 : labels.firstPage, className: classes.iconContainer, disabled: !canPrevious, onClick: () => changePage(0), tooltip: labels == null ? void 0 : labels.paginationFirstPageTitle, children: /* @__PURE__ */ jsx(Start, { className: classes.icon, color: setColor(!canPrevious) }) }),
      /* @__PURE__ */ jsx(ButtonIconTooltip, { id: setId(id, "previousPage-button"), "aria-label": labels == null ? void 0 : labels.previousPage, className: classes.iconContainer, disabled: !canPrevious, onClick: () => changePage(page - 1), tooltip: labels == null ? void 0 : labels.paginationPreviousPageTitle, children: /* @__PURE__ */ jsx(Backwards, { className: classes.icon, color: setColor(!canPrevious) }) }),
      /* @__PURE__ */ jsxs("div", { className: classes.pageInfo, children: [
        showPageJump ? renderPageJump() : /* @__PURE__ */ jsx(HvTypography, { component: "span", children: `${page + 1}` }),
        /* @__PURE__ */ jsx(HvTypography, { component: "span", children: `${labels == null ? void 0 : labels.pagesSeparator} ` }),
        /* @__PURE__ */ jsx(HvTypography, { component: "span", id: setId(id, "totalPages"), children: pages })
      ] }),
      /* @__PURE__ */ jsx(ButtonIconTooltip, { id: setId(id, "nextPage-button"), "aria-label": labels == null ? void 0 : labels.nextPage, className: classes.iconContainer, disabled: !canNext, onClick: () => changePage(page + 1), tooltip: labels == null ? void 0 : labels.paginationNextPageTitle, children: /* @__PURE__ */ jsx(Forwards, { className: classes.icon, color: setColor(!canNext) }) }),
      /* @__PURE__ */ jsx(ButtonIconTooltip, { id: setId(id, "lastPage-button"), "aria-label": labels == null ? void 0 : labels.lastPage, className: classes.iconContainer, disabled: !canNext, onClick: () => changePage(pages - 1), tooltip: labels == null ? void 0 : labels.paginationLastPageTitle, children: /* @__PURE__ */ jsx(End, { className: classes.icon, color: setColor(!canNext) }) })
    ] })
  ] });
};
export {
  HvPagination,
  staticClasses as paginationClasses
};
//# sourceMappingURL=Pagination.js.map
