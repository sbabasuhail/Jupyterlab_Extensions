import { jsx, jsxs } from "@emotion/react/jsx-runtime";
import { useDefaultProps } from "../../hooks/useDefaultProps.js";
import { useTheme } from "@mui/material/styles";
import { useMediaQuery } from "@mui/material";
import isString from "lodash/isString";
import { theme } from "@hitachivantara/uikit-styles";
import { useTheme as useTheme$1 } from "../../hooks/useTheme.js";
import { useClasses } from "./GlobalActions.styles.js";
import { staticClasses } from "./GlobalActions.styles.js";
import { HvTypography } from "../Typography/Typography.js";
const getBreakpointStyles = (isUpMd, isSmDown) => isUpMd ? {
  width: `calc(100% - 2 * ${theme.spacing(4)})`,
  marginLeft: `${theme.spacing(4)}`,
  marginRight: `${theme.spacing(4)}`
} : isSmDown ? {
  width: `calc(100% - 2 * ${theme.spacing(2)})`,
  marginLeft: `${theme.spacing(2)}`,
  marginRight: `${theme.spacing(2)}`
} : {};
const HvGlobalActions = (props) => {
  const {
    children,
    classes: classesProp,
    className,
    title,
    variant = "global",
    backButton,
    headingLevel,
    position: positionProp,
    ...others
  } = useDefaultProps("HvGlobalActions", props);
  const muiTheme = useTheme();
  const {
    activeTheme
  } = useTheme$1();
  const {
    classes,
    cx,
    css
  } = useClasses(classesProp);
  const isSmDown = useMediaQuery(muiTheme.breakpoints.down("sm"));
  const isUpMd = useMediaQuery(muiTheme.breakpoints.up("md"));
  const fixedPositionCss = positionProp === "fixed" && getBreakpointStyles(isUpMd, isSmDown);
  const headingLevelToApply = headingLevel || (variant === "global" ? 1 : 2);
  const position = positionProp || (variant === "global" ? "sticky" : "relative");
  return /* @__PURE__ */ jsx("div", { className: cx(classes.root, {
    [classes.positionSticky]: position === "sticky",
    [classes.positionFixed]: position === "fixed",
    [classes.global]: variant === "global"
  }, css(fixedPositionCss), className), ...others, children: /* @__PURE__ */ jsxs("div", { className: cx(classes.wrapper, {
    [classes.globalWrapperComplement]: variant === "global",
    [classes.globalSectionArea]: variant === "section"
  }), children: [
    variant === "global" && backButton && /* @__PURE__ */ jsx("div", { className: classes.backButton, children: backButton }),
    !isString(title) ? title : /* @__PURE__ */ jsx(HvTypography, { variant: variant === "global" ? "title3" : activeTheme == null ? void 0 : activeTheme.globalActions.sectionVariant, component: `h${headingLevelToApply}`, className: classes.name, children: title }),
    children && /* @__PURE__ */ jsx("div", { className: classes.actions, children })
  ] }) });
};
export {
  HvGlobalActions,
  staticClasses as globalActionsClasses
};
//# sourceMappingURL=GlobalActions.js.map
