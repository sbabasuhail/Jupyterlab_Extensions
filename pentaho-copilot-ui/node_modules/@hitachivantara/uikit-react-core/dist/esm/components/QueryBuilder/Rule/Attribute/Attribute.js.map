{"version":3,"file":"Attribute.js","sources":["../../../../../../src/components/QueryBuilder/Rule/Attribute/Attribute.tsx"],"sourcesContent":["import { useMemo, useContext, memo } from \"react\";\n\nimport { HvDropdown } from \"@core/components/Dropdown\";\n\nimport { QueryBuilderContext } from \"../../Context\";\nimport { isBigList } from \"../../utils\";\n\nexport interface AttributeProps {\n  id: number;\n  attribute: string;\n  disabled: boolean;\n  isInvalid: boolean;\n}\n\nexport const Attribute = ({\n  id,\n  attribute,\n  disabled,\n  isInvalid,\n}: AttributeProps) => {\n  const context = useContext(QueryBuilderContext);\n  const { dispatchAction, attributes, operators, labels, readOnly } = context;\n\n  const values = useMemo(() => {\n    if (!attributes) return [];\n\n    return Object.keys(attributes).map((key) => ({\n      id: key,\n      label: attributes[key].label,\n      selected: key === attribute,\n    }));\n  }, [attributes, attribute]);\n\n  const currentType =\n    attribute != null && attributes ? attributes[attribute]?.type : null;\n\n  return (\n    <HvDropdown\n      singleSelectionToggle={false}\n      label={labels.rule.attribute.label}\n      placeholder={labels.rule.attribute.placeholder}\n      values={values}\n      disabled={disabled}\n      readOnly={readOnly}\n      status={isInvalid ? \"invalid\" : \"valid\"}\n      statusMessage={labels.rule.attribute.exists}\n      onChange={(selected) => {\n        if (selected && !Array.isArray(selected)) {\n          const attributeId = selected.id;\n\n          const type =\n            attributes && attributeId && attributes[attributeId]?.type;\n          const typeOperators = type ? operators[type] : undefined;\n\n          let operator;\n          if (currentType === type) {\n            operator = undefined;\n          } else if (typeOperators?.length === 1) {\n            operator = typeOperators[0].operator;\n          } else {\n            operator = null;\n          }\n\n          // default boolean attributes to true\n          const value = type === \"boolean\" ? true : undefined;\n\n          dispatchAction({\n            type: \"set-attribute\",\n            id,\n            attribute: attributeId?.toString(),\n            operator,\n            value,\n          });\n        } else {\n          dispatchAction({ type: \"set-attribute\", id, attribute: null });\n        }\n      }}\n      showSearch={isBigList(values)}\n      {...(isBigList(values) && { virtualized: true, height: 300 })}\n    />\n  );\n};\n\nexport default memo(Attribute);\n"],"names":["Attribute","id","attribute","disabled","isInvalid","context","useContext","QueryBuilderContext","dispatchAction","attributes","operators","labels","readOnly","values","useMemo","Object","keys","map","key","label","selected","currentType","type","rule","placeholder","exists","Array","isArray","attributeId","typeOperators","undefined","operator","length","value","toString","isBigList","virtualized","height","memo"],"mappings":";;;;;AAcO,MAAMA,YAAYA,CAAC;AAAA,EACxBC;AAAAA,EACAC;AAAAA,EACAC;AAAAA,EACAC;AACc,MAAM;;AACdC,QAAAA,UAAUC,WAAWC,mBAAmB;AACxC,QAAA;AAAA,IAAEC;AAAAA,IAAgBC;AAAAA,IAAYC;AAAAA,IAAWC;AAAAA,IAAQC;AAAAA,EAAaP,IAAAA;AAE9DQ,QAAAA,SAASC,QAAQ,MAAM;AAC3B,QAAI,CAACL;AAAY,aAAO;AAExB,WAAOM,OAAOC,KAAKP,UAAU,EAAEQ,IAAKC,CAAS,SAAA;AAAA,MAC3CjB,IAAIiB;AAAAA,MACJC,OAAOV,WAAWS,GAAG,EAAEC;AAAAA,MACvBC,UAAUF,QAAQhB;AAAAA,IAClB,EAAA;AAAA,EAAA,GACD,CAACO,YAAYP,SAAS,CAAC;AAE1B,QAAMmB,cACJnB,aAAa,QAAQO,cAAaA,gBAAWP,SAAS,MAApBO,mBAAuBa,OAAO;AAGhE,SAAA,oBAAC,YACC,EAAA,uBAAuB,OACvB,OAAOX,OAAOY,KAAKrB,UAAUiB,OAC7B,aAAaR,OAAOY,KAAKrB,UAAUsB,aACnC,QACA,UACA,UACA,QAAQpB,YAAY,YAAY,SAChC,eAAeO,OAAOY,KAAKrB,UAAUuB,QACrC,UAAWL,CAAa,aAAA;;AACtB,QAAIA,YAAY,CAACM,MAAMC,QAAQP,QAAQ,GAAG;AACxC,YAAMQ,cAAcR,SAASnB;AAE7B,YAAMqB,OACJb,cAAcmB,iBAAenB,MAAAA,WAAWmB,WAAW,MAAtBnB,gBAAAA,IAAyBa;AACxD,YAAMO,gBAAgBP,OAAOZ,UAAUY,IAAI,IAAIQ;AAE3CC,UAAAA;AACJ,UAAIV,gBAAgBC,MAAM;AACbQ,mBAAAA;AAAAA,MAAAA,YACFD,+CAAeG,YAAW,GAAG;AAC3BH,mBAAAA,cAAc,CAAC,EAAEE;AAAAA,MAAAA,OACvB;AACM,mBAAA;AAAA,MACb;AAGME,YAAAA,QAAQX,SAAS,YAAY,OAAOQ;AAE3B,qBAAA;AAAA,QACbR,MAAM;AAAA,QACNrB;AAAAA,QACAC,WAAW0B,2CAAaM;AAAAA,QACxBH;AAAAA,QACAE;AAAAA,MAAAA,CACD;AAAA,IAAA,OACI;AACU,qBAAA;AAAA,QAAEX,MAAM;AAAA,QAAiBrB;AAAAA,QAAIC,WAAW;AAAA,MAAA,CAAM;AAAA,IAC/D;AAAA,EAAA,GAEF,YAAYiC,UAAUtB,MAAM,GACvBsB,GAAAA,UAAUtB,MAAM,KAAK;AAAA,IAAEuB,aAAa;AAAA,IAAMC,QAAQ;AAAA,EACvD,EAAA,CAAA;AAEN;AAEeC,KAAKtC,SAAS;"}