import { jsx } from "@emotion/react/jsx-runtime";
import { useContext, useMemo, memo } from "react";
import { QueryBuilderContext } from "../../Context.js";
import { isBigList } from "../../utils/index.js";
import { HvDropdown } from "../../../Dropdown/Dropdown.js";
const Attribute = ({
  id,
  attribute,
  disabled,
  isInvalid
}) => {
  var _a;
  const context = useContext(QueryBuilderContext);
  const {
    dispatchAction,
    attributes,
    operators,
    labels,
    readOnly
  } = context;
  const values = useMemo(() => {
    if (!attributes)
      return [];
    return Object.keys(attributes).map((key) => ({
      id: key,
      label: attributes[key].label,
      selected: key === attribute
    }));
  }, [attributes, attribute]);
  const currentType = attribute != null && attributes ? (_a = attributes[attribute]) == null ? void 0 : _a.type : null;
  return /* @__PURE__ */ jsx(HvDropdown, { singleSelectionToggle: false, label: labels.rule.attribute.label, placeholder: labels.rule.attribute.placeholder, values, disabled, readOnly, status: isInvalid ? "invalid" : "valid", statusMessage: labels.rule.attribute.exists, onChange: (selected) => {
    var _a2;
    if (selected && !Array.isArray(selected)) {
      const attributeId = selected.id;
      const type = attributes && attributeId && ((_a2 = attributes[attributeId]) == null ? void 0 : _a2.type);
      const typeOperators = type ? operators[type] : void 0;
      let operator;
      if (currentType === type) {
        operator = void 0;
      } else if ((typeOperators == null ? void 0 : typeOperators.length) === 1) {
        operator = typeOperators[0].operator;
      } else {
        operator = null;
      }
      const value = type === "boolean" ? true : void 0;
      dispatchAction({
        type: "set-attribute",
        id,
        attribute: attributeId == null ? void 0 : attributeId.toString(),
        operator,
        value
      });
    } else {
      dispatchAction({
        type: "set-attribute",
        id,
        attribute: null
      });
    }
  }, showSearch: isBigList(values), ...isBigList(values) && {
    virtualized: true,
    height: 300
  } });
};
memo(Attribute);
export {
  Attribute
};
//# sourceMappingURL=Attribute.js.map
