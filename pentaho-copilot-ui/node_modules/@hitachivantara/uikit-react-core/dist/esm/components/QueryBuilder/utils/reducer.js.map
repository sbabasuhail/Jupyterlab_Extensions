{"version":3,"file":"reducer.js","sources":["../../../../../src/components/QueryBuilder/utils/reducer.tsx"],"sourcesContent":["import { emptyRule, emptyGroup, findNodeById, findParentById } from \"./index\";\n\nconst reducer = (state, action) => {\n  const query = { ...state };\n\n  switch (action.type) {\n    case \"reset-query\": {\n      return emptyGroup();\n    }\n    case \"reset-group\": {\n      const group = findNodeById(action.id, query);\n      if (group && \"rules\" in group) {\n        group.rules = [emptyRule()];\n\n        return query;\n      }\n      break;\n    }\n    case \"add-rule\": {\n      const group = findNodeById(action.id, query);\n      if (group && \"rules\" in group) {\n        const rule = emptyRule();\n\n        group.rules.push(rule);\n\n        return query;\n      }\n      break;\n    }\n    case \"add-group\": {\n      const group = findNodeById(action.id, query);\n      if (group && \"rules\" in group) {\n        group.rules.push(emptyGroup(true));\n\n        return query;\n      }\n      break;\n    }\n    case \"remove-node\": {\n      const parent = findParentById(action.id, query);\n      if (parent) {\n        parent.rules = parent.rules.filter((rule) => rule.id !== action.id);\n\n        return query;\n      }\n\n      // reset query if deleting top node\n      return emptyGroup();\n    }\n    case \"set-combinator\": {\n      const node = findNodeById(action.id, query);\n      if (node && \"combinator\" in node) {\n        if (node.combinator !== action.combinator) {\n          node.combinator = action.combinator;\n\n          return query;\n        }\n      }\n      break;\n    }\n    case \"set-attribute\": {\n      const node = findNodeById(action.id, query);\n      if (node && node.attribute !== action.attribute) {\n        node.attribute = action.attribute ?? undefined;\n\n        // we keep the operator and value unless the operator is explicitly null (or set)\n        if (action.operator !== undefined) {\n          node.operator = action.operator ?? undefined;\n          node.value = action.value ?? undefined;\n        }\n\n        return query;\n      }\n      break;\n    }\n    case \"set-operator\": {\n      const node = findNodeById(action.id, query);\n      if (node && \"attribute\" in node) {\n        if (node.operator !== action.operator) {\n          node.operator = action.operator;\n          if (action.value !== undefined) {\n            node.value = action.value ?? undefined;\n          }\n\n          return query;\n        }\n      }\n      break;\n    }\n    case \"set-value\": {\n      const node = findNodeById(action.id, query);\n      if (node && \"operator\" in node) {\n        node.value = action.value ?? undefined;\n\n        return query;\n      }\n      break;\n    }\n\n    default:\n  }\n\n  // just return existing state if nothing changed\n  return state;\n};\n\nexport default reducer;\n"],"names":["reducer","state","action","query","type","emptyGroup","group","findNodeById","id","rules","emptyRule","rule","push","parent","findParentById","filter","node","combinator","attribute","undefined","operator","value"],"mappings":";AAEA,MAAMA,UAAUA,CAACC,OAAOC,WAAW;AACjC,QAAMC,QAAQ;AAAA,IAAE,GAAGF;AAAAA,EAAAA;AAEnB,UAAQC,OAAOE,MAAI;AAAA,IACjB,KAAK,eAAe;AAClB,aAAOC,WAAW;AAAA,IACpB;AAAA,IACA,KAAK,eAAe;AAClB,YAAMC,QAAQC,aAAaL,OAAOM,IAAIL,KAAK;AACvCG,UAAAA,SAAS,WAAWA,OAAO;AACvBG,cAAAA,QAAQ,CAACC,UAAAA,CAAW;AAEnBP,eAAAA;AAAAA,MACT;AACA;AAAA,IACF;AAAA,IACA,KAAK,YAAY;AACf,YAAMG,QAAQC,aAAaL,OAAOM,IAAIL,KAAK;AACvCG,UAAAA,SAAS,WAAWA,OAAO;AAC7B,cAAMK,OAAOD;AAEPD,cAAAA,MAAMG,KAAKD,IAAI;AAEdR,eAAAA;AAAAA,MACT;AACA;AAAA,IACF;AAAA,IACA,KAAK,aAAa;AAChB,YAAMG,QAAQC,aAAaL,OAAOM,IAAIL,KAAK;AACvCG,UAAAA,SAAS,WAAWA,OAAO;AAC7BA,cAAMG,MAAMG,KAAKP,WAAW,IAAI,CAAC;AAE1BF,eAAAA;AAAAA,MACT;AACA;AAAA,IACF;AAAA,IACA,KAAK,eAAe;AAClB,YAAMU,SAASC,eAAeZ,OAAOM,IAAIL,KAAK;AAC9C,UAAIU,QAAQ;AACHJ,eAAAA,QAAQI,OAAOJ,MAAMM,OAAQJ,UAASA,KAAKH,OAAON,OAAOM,EAAE;AAE3DL,eAAAA;AAAAA,MACT;AAGA,aAAOE,WAAW;AAAA,IACpB;AAAA,IACA,KAAK,kBAAkB;AACrB,YAAMW,OAAOT,aAAaL,OAAOM,IAAIL,KAAK;AACtCa,UAAAA,QAAQ,gBAAgBA,MAAM;AAC5BA,YAAAA,KAAKC,eAAef,OAAOe,YAAY;AACzCD,eAAKC,aAAaf,OAAOe;AAElBd,iBAAAA;AAAAA,QACT;AAAA,MACF;AACA;AAAA,IACF;AAAA,IACA,KAAK,iBAAiB;AACpB,YAAMa,OAAOT,aAAaL,OAAOM,IAAIL,KAAK;AAC1C,UAAIa,QAAQA,KAAKE,cAAchB,OAAOgB,WAAW;AAC1CA,aAAAA,YAAYhB,OAAOgB,aAAaC;AAGjCjB,YAAAA,OAAOkB,aAAaD,QAAW;AAC5BC,eAAAA,WAAWlB,OAAOkB,YAAYD;AAC9BE,eAAAA,QAAQnB,OAAOmB,SAASF;AAAAA,QAC/B;AAEOhB,eAAAA;AAAAA,MACT;AACA;AAAA,IACF;AAAA,IACA,KAAK,gBAAgB;AACnB,YAAMa,OAAOT,aAAaL,OAAOM,IAAIL,KAAK;AACtCa,UAAAA,QAAQ,eAAeA,MAAM;AAC3BA,YAAAA,KAAKI,aAAalB,OAAOkB,UAAU;AACrCJ,eAAKI,WAAWlB,OAAOkB;AACnBlB,cAAAA,OAAOmB,UAAUF,QAAW;AACzBE,iBAAAA,QAAQnB,OAAOmB,SAASF;AAAAA,UAC/B;AAEOhB,iBAAAA;AAAAA,QACT;AAAA,MACF;AACA;AAAA,IACF;AAAA,IACA,KAAK,aAAa;AAChB,YAAMa,OAAOT,aAAaL,OAAOM,IAAIL,KAAK;AACtCa,UAAAA,QAAQ,cAAcA,MAAM;AACzBK,aAAAA,QAAQnB,OAAOmB,SAASF;AAEtBhB,eAAAA;AAAAA,MACT;AACA;AAAA,IACF;AAAA,EAGF;AAGOF,SAAAA;AACT;AAEA,MAAA,YAAeD;"}