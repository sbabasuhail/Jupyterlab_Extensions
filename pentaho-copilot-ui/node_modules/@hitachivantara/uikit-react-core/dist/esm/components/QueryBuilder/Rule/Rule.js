import { jsx, jsxs } from "@emotion/react/jsx-runtime";
import { Delete } from "@hitachivantara/uikit-react-icons";
import { useTheme, useMediaQuery } from "@mui/material";
import { useContext, useMemo } from "react";
import { withTooltip } from "../../../hocs/withTooltip.js";
import { QueryBuilderContext } from "../Context.js";
import { useClasses } from "./Rule.styles.js";
import { HvGrid } from "../../Grid/Grid.js";
import { Attribute } from "./Attribute/Attribute.js";
import { Operator } from "./Operator/Operator.js";
import { Value } from "./Value/Value.js";
import { HvButton } from "../../Button/Button.js";
const Rule = ({
  id,
  combinator,
  attribute,
  operator,
  value,
  disabled,
  isInvalid
}) => {
  const {
    classes,
    cx
  } = useClasses();
  const context = useContext(QueryBuilderContext);
  const theme = useTheme();
  const isMdDown = useMediaQuery(theme.breakpoints.down("md"));
  const {
    askAction,
    attributes,
    operators,
    labels,
    readOnly
  } = context;
  const availableOperators = useMemo(() => {
    const attributeSpec = attribute != null && attributes ? attributes[attribute] : null;
    if (attributeSpec != null) {
      const typeOperators = operators[attributeSpec.type];
      if (typeOperators != null) {
        return typeOperators.reduce((count, item) => count + (item.combinators.includes(combinator) ? 1 : 0), 0);
      }
    }
    return -1;
  }, [attribute, attributes, combinator, operators]);
  const shouldShowValueInput = operator !== "Empty" && operator !== "IsNotEmpty";
  const DeleteIcon = withTooltip(() => /* @__PURE__ */ jsx(Delete, {}), labels.rule.delete.tooltip, "bottom");
  return /* @__PURE__ */ jsxs(HvGrid, { container: true, className: cx(classes.root, {
    [classes.isMdDown]: isMdDown
  }), spacing: 0, wrap: "nowrap", children: [
    /* @__PURE__ */ jsx(HvGrid, { item: true, xs: 2, lg: 3, children: /* @__PURE__ */ jsx(Attribute, { attribute, id, disabled, isInvalid }) }),
    attribute != null && availableOperators > 0 && /* @__PURE__ */ jsx(HvGrid, { item: true, xs: 2, lg: 3, children: /* @__PURE__ */ jsx(Operator, { id, combinator, attribute, operator }) }),
    attribute != null && (operator != null || availableOperators === 0) && /* @__PURE__ */ jsx(HvGrid, { item: true, xs: true, children: shouldShowValueInput && /* @__PURE__ */ jsx(Value, { attribute, id, operator, value }) }),
    /* @__PURE__ */ jsx(HvGrid, { item: true, className: classes.actionsContainer, children: /* @__PURE__ */ jsx(HvButton, { icon: true, "aria-label": labels.rule.delete.ariaLabel, onClick: () => {
      askAction({
        actions: [{
          type: "remove-node",
          id
        }],
        dialog: labels.rule.delete
      });
    }, disabled: readOnly, children: /* @__PURE__ */ jsx(DeleteIcon, {}) }) })
  ] });
};
export {
  Rule
};
//# sourceMappingURL=Rule.js.map
