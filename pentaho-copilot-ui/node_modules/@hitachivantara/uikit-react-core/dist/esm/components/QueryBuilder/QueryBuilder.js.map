{"version":3,"file":"QueryBuilder.js","sources":["../../../../src/components/QueryBuilder/QueryBuilder.tsx"],"sourcesContent":["import cloneDeep from \"lodash/cloneDeep\";\nimport isEqual from \"lodash/isEqual\";\nimport { useDefaultProps } from \"@core/hooks/useDefaultProps\";\n\nimport {\n  useContext,\n  useEffect,\n  useMemo,\n  useReducer,\n  useRef,\n  useState,\n} from \"react\";\n\nimport { ExtractNames } from \"@core/utils/classes\";\n\nimport { ConfirmationDialog } from \"./ConfirmationDialog\";\nimport { QueryBuilderContext } from \"./Context\";\nimport { RuleGroup } from \"./RuleGroup\";\nimport {\n  AskAction,\n  Attribute,\n  Query,\n  QueryBuilderLabels,\n  QueryCombinator,\n  QueryOperator,\n} from \"./types\";\nimport { clearNodeIds, emptyGroup } from \"./utils\";\nimport reducer from \"./utils/reducer\";\nimport { useClasses, staticClasses } from \"./QueryBuilder.styles\";\n\nexport { staticClasses as queryBuilderClasses };\n\nexport type HvQueryBuilderClasses = ExtractNames<typeof useClasses>;\n\nexport interface HvQueryBuilderProps {\n  attributes?: Record<string, Attribute>;\n  /**\n   * The query rules operators by attribute type and combinator.\n   */\n  operators?: Record<string, QueryOperator[]>;\n  /**\n   * The query combinators operands.\n   */\n  combinators?: QueryCombinator[];\n  /**\n   * The initial query representation.\n   */\n  query?: Query;\n  /**\n   * Callback fired when query changes.\n   * @param {Query} value - the query representation.\n   */\n  onChange?: (value: Query) => void;\n  /**\n   * Max depth of nested query groups.\n   */\n  maxDepth?: number;\n  /**\n   * An object containing all the labels.\n   */\n  labels?: QueryBuilderLabels;\n  /**\n   * A flag indicating if the Query Builder is in read only mode.\n   */\n  readOnly?: boolean;\n  /**\n   * Override or extend the styles applied to the component.\n   * See CSS API tab for more details.\n   */\n  classes?: HvQueryBuilderClasses;\n}\n\n/**\n * **HvQueryBuilder** component allows you to create conditions and group them using logical operators.\n * It outputs a structured set of rules which can be easily parsed to create SQL/NoSQL/whatever queries.\n */\nexport const HvQueryBuilder = (props: HvQueryBuilderProps) => {\n  const {\n    attributes,\n    query,\n    onChange,\n    operators,\n    combinators,\n    maxDepth = 1,\n    labels,\n    readOnly = false,\n    classes,\n  } = useDefaultProps(\"HvQueryBuilder\", props);\n\n  const [pendingAction, askAction] = useState<AskAction>();\n  const currentAttributes = useRef<\n    Record<string, Attribute> | undefined | null\n  >(null);\n  const [state, dispatchAction] = useReducer(\n    reducer,\n    query,\n    (initialState) => initialState || emptyGroup()\n  );\n\n  const initialState = query === state;\n  const [prevState, setPrevState] = useState();\n\n  const defaultContext = useContext(QueryBuilderContext);\n\n  const context = useMemo(\n    () => ({\n      dispatchAction,\n      askAction,\n      attributes,\n      /* eslint-disable react/destructuring-assignment */\n      operators: operators ?? defaultContext.operators,\n      combinators: combinators ?? defaultContext.combinators,\n      maxDepth: maxDepth ?? defaultContext.maxDepth,\n      labels: labels ?? defaultContext.labels,\n      initialTouched: initialState,\n      readOnly,\n    }),\n    [\n      attributes,\n      operators,\n      defaultContext.operators,\n      defaultContext.combinators,\n      defaultContext.maxDepth,\n      defaultContext.labels,\n      combinators,\n      maxDepth,\n      labels,\n      readOnly,\n      initialState,\n    ]\n  );\n\n  useEffect(() => {\n    if (currentAttributes.current == null) {\n      // first run, nothing to do\n      currentAttributes.current = attributes;\n    } else if (currentAttributes.current !== attributes) {\n      // attributes changed, the existing query is almost certain invalid, so reset it\n      currentAttributes.current = attributes;\n      dispatchAction({ type: \"reset-query\" });\n    }\n  }, [attributes]);\n\n  // Propagate the change if the query is modified.\n  useEffect(() => {\n    if (!initialState && !isEqual(state, prevState)) {\n      onChange?.(clearNodeIds(state));\n      setPrevState(cloneDeep(state));\n    }\n  }, [state, prevState, initialState, onChange]);\n\n  const onConfirmHandler = () => {\n    if (pendingAction) {\n      askAction(undefined);\n      pendingAction.actions.forEach((action) => dispatchAction(action));\n    }\n  };\n\n  const onCancelHandler = () => {\n    askAction(undefined);\n  };\n\n  return (\n    <QueryBuilderContext.Provider value={context}>\n      <RuleGroup\n        level={0}\n        id={state.id}\n        combinator={state.combinator}\n        rules={state.rules}\n        classes={classes}\n      />\n      <ConfirmationDialog\n        isOpen={pendingAction != null}\n        onConfirm={onConfirmHandler}\n        onCancel={onCancelHandler}\n        title={pendingAction?.dialog.dialogTitle || \"\"}\n        message={pendingAction?.dialog.dialogMessage || \"\"}\n        confirmButtonLabel={pendingAction?.dialog.dialogConfirm || \"\"}\n        cancelButtonLabel={pendingAction?.dialog.dialogCancel || \"\"}\n        closeButtonTooltip={pendingAction?.dialog.dialogCloseTooltip || \"\"}\n      />\n    </QueryBuilderContext.Provider>\n  );\n};\n"],"names":["HvQueryBuilder","props","attributes","query","onChange","operators","combinators","maxDepth","labels","readOnly","classes","useDefaultProps","pendingAction","askAction","useState","currentAttributes","useRef","state","dispatchAction","useReducer","reducer","initialState","emptyGroup","prevState","setPrevState","defaultContext","useContext","QueryBuilderContext","context","useMemo","initialTouched","useEffect","current","type","isEqual","clearNodeIds","cloneDeep","onConfirmHandler","undefined","actions","forEach","action","onCancelHandler","id","combinator","rules","dialog","dialogTitle","dialogMessage","dialogConfirm","dialogCancel","dialogCloseTooltip"],"mappings":";;;;;;;;;;AA4EaA,MAAAA,iBAAiBA,CAACC,UAA+B;AACtD,QAAA;AAAA,IACJC;AAAAA,IACAC;AAAAA,IACAC;AAAAA,IACAC;AAAAA,IACAC;AAAAA,IACAC,WAAW;AAAA,IACXC;AAAAA,IACAC,WAAW;AAAA,IACXC;AAAAA,EAAAA,IACEC,gBAAgB,kBAAkBV,KAAK;AAE3C,QAAM,CAACW,eAAeC,SAAS,IAAIC,SAAoB;AACjDC,QAAAA,oBAAoBC,OAExB,IAAI;AACA,QAAA,CAACC,OAAOC,cAAc,IAAIC,WAC9BC,SACAjB,OACCkB,CAAAA,kBAAiBA,iBAAgBC,WACpC,CAAA;AAEA,QAAMD,eAAelB,UAAUc;AAC/B,QAAM,CAACM,WAAWC,YAAY,IAAIV,SAAS;AAErCW,QAAAA,iBAAiBC,WAAWC,mBAAmB;AAE/CC,QAAAA,UAAUC,QACd,OAAO;AAAA,IACLX;AAAAA,IACAL;AAAAA,IACAX;AAAAA;AAAAA,IAEAG,WAAWA,aAAaoB,eAAepB;AAAAA,IACvCC,aAAaA,eAAemB,eAAenB;AAAAA,IAC3CC,UAAUA,YAAYkB,eAAelB;AAAAA,IACrCC,QAAQA,UAAUiB,eAAejB;AAAAA,IACjCsB,gBAAgBT;AAAAA,IAChBZ;AAAAA,EAAAA,IAEF,CACEP,YACAG,WACAoB,eAAepB,WACfoB,eAAenB,aACfmB,eAAelB,UACfkB,eAAejB,QACfF,aACAC,UACAC,QACAC,UACAY,YAAY,CAEhB;AAEAU,YAAU,MAAM;AACVhB,QAAAA,kBAAkBiB,WAAW,MAAM;AAErCjB,wBAAkBiB,UAAU9B;AAAAA,IAAAA,WACnBa,kBAAkBiB,YAAY9B,YAAY;AAEnDa,wBAAkBiB,UAAU9B;AACb,qBAAA;AAAA,QAAE+B,MAAM;AAAA,MAAA,CAAe;AAAA,IACxC;AAAA,EAAA,GACC,CAAC/B,UAAU,CAAC;AAGf6B,YAAU,MAAM;AACd,QAAI,CAACV,gBAAgB,CAACa,QAAQjB,OAAOM,SAAS,GAAG;AACpCY,2CAAAA,aAAalB,KAAK;AAChBmB,mBAAAA,UAAUnB,KAAK,CAAC;AAAA,IAC/B;AAAA,KACC,CAACA,OAAOM,WAAWF,cAAcjB,QAAQ,CAAC;AAE7C,QAAMiC,mBAAmBA,MAAM;AAC7B,QAAIzB,eAAe;AACjBC,gBAAUyB,MAAS;AACnB1B,oBAAc2B,QAAQC,QAASC,CAAWvB,WAAAA,eAAeuB,MAAM,CAAC;AAAA,IAClE;AAAA,EAAA;AAGF,QAAMC,kBAAkBA,MAAM;AAC5B7B,cAAUyB,MAAS;AAAA,EAAA;AAGrB,SACG,qBAAA,oBAAoB,UAApB,EAA6B,OAAOV,SACnC,UAAA;AAAA,IAAA,oBAAC,WACC,EAAA,OAAO,GACP,IAAIX,MAAM0B,IACV,YAAY1B,MAAM2B,YAClB,OAAO3B,MAAM4B,OACb,SAAiB;AAAA,IAElB,oBAAA,oBAAA,EACC,QAAQjC,iBAAiB,MACzB,WAAWyB,kBACX,UAAUK,iBACV,QAAO9B,+CAAekC,OAAOC,gBAAe,IAC5C,UAASnC,+CAAekC,OAAOE,kBAAiB,IAChD,qBAAoBpC,+CAAekC,OAAOG,kBAAiB,IAC3D,oBAAmBrC,+CAAekC,OAAOI,iBAAgB,IACzD,qBAAoBtC,+CAAekC,OAAOK,uBAAsB,IAAG;AAAA,EAEvE,EAAA,CAAA;AAEJ;"}