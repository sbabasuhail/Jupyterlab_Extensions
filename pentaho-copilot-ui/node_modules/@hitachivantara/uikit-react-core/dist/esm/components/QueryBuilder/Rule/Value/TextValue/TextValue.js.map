{"version":3,"file":"TextValue.js","sources":["../../../../../../../src/components/QueryBuilder/Rule/Value/TextValue/TextValue.tsx"],"sourcesContent":["import { memo, useContext, useState } from \"react\";\n\nimport { HvFormStatus } from \"@core/components/Forms\";\nimport { HvInput } from \"@core/components/Input\";\n\nimport { QueryBuilderContext } from \"../../../Context\";\nimport { useClasses } from \"./TextValue.styles\";\n\nexport interface TextValueProps {\n  id?: number;\n  value?: any;\n  initialTouched?: boolean;\n}\n\nexport const TextValue = ({\n  id,\n  value = \"\",\n  initialTouched = false,\n}: TextValueProps) => {\n  const { classes } = useClasses();\n\n  const context = useContext(QueryBuilderContext);\n  const { labels, dispatchAction, readOnly } = context;\n  const [touched, setTouched] = useState(initialTouched);\n  const isValid = value != null && value.toString().trim() !== \"\";\n\n  let status: HvFormStatus = isValid ? \"valid\" : \"invalid\";\n  status = !touched ? \"standBy\" : status;\n\n  return (\n    <HvInput\n      className={classes.location}\n      label={labels.rule.value.text.label}\n      required\n      status={status}\n      statusMessage={labels.rule.value.text.validation.required}\n      value={value}\n      inputProps={{\n        autoComplete: \"off\",\n      }}\n      onChange={(t, v) => {\n        dispatchAction({\n          type: \"set-value\",\n          id,\n          value: v,\n        });\n      }}\n      onBlur={() => {\n        setTouched(true);\n      }}\n      onKeyDown={(e: any) => {\n        if (e.key === \"Enter\") {\n          e.preventDefault();\n        }\n      }}\n      placeholder=\"â€”\"\n      readOnly={readOnly}\n    />\n  );\n};\n\nexport default memo(TextValue);\n"],"names":["TextValue","id","value","initialTouched","classes","useClasses","context","useContext","QueryBuilderContext","labels","dispatchAction","readOnly","touched","setTouched","useState","isValid","toString","trim","status","location","rule","text","label","validation","required","autoComplete","t","v","type","e","key","preventDefault","memo"],"mappings":";;;;;AAcO,MAAMA,YAAYA,CAAC;AAAA,EACxBC;AAAAA,EACAC,QAAQ;AAAA,EACRC,iBAAiB;AACH,MAAM;AACd,QAAA;AAAA,IAAEC;AAAAA,MAAYC,WAAW;AAEzBC,QAAAA,UAAUC,WAAWC,mBAAmB;AACxC,QAAA;AAAA,IAAEC;AAAAA,IAAQC;AAAAA,IAAgBC;AAAAA,EAAaL,IAAAA;AAC7C,QAAM,CAACM,SAASC,UAAU,IAAIC,SAASX,cAAc;AACrD,QAAMY,UAAUb,SAAS,QAAQA,MAAMc,WAAWC,KAAW,MAAA;AAEzDC,MAAAA,SAAuBH,UAAU,UAAU;AACtC,WAAA,CAACH,UAAU,YAAYM;AAG9B,SAAA,oBAAC,WACC,WAAWd,QAAQe,UACnB,OAAOV,OAAOW,KAAKlB,MAAMmB,KAAKC,OAC9B,UAAQ,MACR,QACA,eAAeb,OAAOW,KAAKlB,MAAMmB,KAAKE,WAAWC,UACjD,OACA,YAAY;AAAA,IACVC,cAAc;AAAA,EAAA,GAEhB,UAAU,CAACC,GAAGC,MAAM;AACH,mBAAA;AAAA,MACbC,MAAM;AAAA,MACN3B;AAAAA,MACAC,OAAOyB;AAAAA,IAAAA,CACR;AAAA,EACH,GACA,QAAQ,MAAM;AACZd,eAAW,IAAI;AAAA,EAAA,GAEjB,WAAW,CAACgB,MAAW;AACjBA,QAAAA,EAAEC,QAAQ,SAAS;AACrBD,QAAEE,eAAe;AAAA,IACnB;AAAA,EACF,GACA,aAAY,KACZ,SACA,CAAA;AAEN;AAEeC,KAAKhC,SAAS;"}