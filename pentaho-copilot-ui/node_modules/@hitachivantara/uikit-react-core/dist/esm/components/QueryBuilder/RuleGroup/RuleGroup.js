import { jsxs, Fragment, jsx } from "@emotion/react/jsx-runtime";
import { useContext, useCallback } from "react";
import { Add, Delete, Info } from "@hitachivantara/uikit-react-icons";
import { withTooltip } from "../../../hocs/withTooltip.js";
import { QueryBuilderContext } from "../Context.js";
import { useClasses } from "../QueryBuilder.styles.js";
import { HvButton } from "../../Button/Button.js";
import { Rule } from "../Rule/Rule.js";
import { HvEmptyState } from "../../EmptyState/EmptyState.js";
import { HvGrid } from "../../Grid/Grid.js";
import { HvMultiButton } from "../../MultiButton/MultiButton.js";
import { HvTypography } from "../../Typography/Typography.js";
const RuleGroup = ({
  level = 0,
  id,
  combinator = "and",
  rules = [],
  classes: classesProp
}) => {
  var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l, _m, _n, _o, _p, _q, _r, _s, _t;
  const {
    classes,
    cx
  } = useClasses(classesProp);
  const context = useContext(QueryBuilderContext);
  const {
    dispatchAction,
    askAction,
    maxDepth,
    combinators,
    labels,
    readOnly
  } = context;
  const normalizedMaxDepth = maxDepth - 1;
  const actionButtons = /* @__PURE__ */ jsxs(Fragment, { children: [
    /* @__PURE__ */ jsx("div", { className: classes.buttonBackground, children: /* @__PURE__ */ jsx(HvButton, { variant: "secondarySubtle", onClick: () => {
      dispatchAction({
        type: "add-rule",
        id
      });
    }, disabled: readOnly, startIcon: /* @__PURE__ */ jsx(Add, {}), children: level === 0 && ((_b = (_a = labels.query) == null ? void 0 : _a.addRule) == null ? void 0 : _b.label) != null ? (_d = (_c = labels.query) == null ? void 0 : _c.addRule) == null ? void 0 : _d.label : labels.group.addRule.label }) }),
    level <= normalizedMaxDepth && /* @__PURE__ */ jsx("div", { className: classes.buttonBackground, children: /* @__PURE__ */ jsx(HvButton, { variant: "secondarySubtle", onClick: () => {
      dispatchAction({
        type: "add-group",
        id
      });
    }, disabled: readOnly, startIcon: /* @__PURE__ */ jsx(Add, {}), children: level === 0 && ((_f = (_e = labels.query) == null ? void 0 : _e.addGroup) == null ? void 0 : _f.label) != null ? (_h = (_g = labels.query) == null ? void 0 : _g.addGroup) == null ? void 0 : _h.label : labels.group.addGroup.label }) })
  ] });
  const DeleteIcon = withTooltip(() => /* @__PURE__ */ jsx(Delete, { className: cx({
    [classes.topRemoveButtonDisabled]: readOnly
  }) }), level === 0 && ((_j = (_i = labels.query) == null ? void 0 : _i.delete) == null ? void 0 : _j.tooltip) ? (_l = (_k = labels.query) == null ? void 0 : _k.delete) == null ? void 0 : _l.tooltip : labels.group.delete.tooltip, "top");
  const onClickCombinator = useCallback((item) => {
    dispatchAction({
      type: "set-combinator",
      id,
      combinator: item.operand
    });
  }, [dispatchAction, id]);
  return /* @__PURE__ */ jsxs("div", { className: cx(classes.root, {
    [classes.topGroup]: level === 0,
    [classes.subGroup]: level > 0
  }), children: [
    /* @__PURE__ */ jsxs(HvGrid, { container: true, children: [
      /* @__PURE__ */ jsx(HvGrid, { item: true, children: /* @__PURE__ */ jsx(HvMultiButton, { className: cx(classes.combinator, classes.topCombinator), disabled: readOnly, children: combinators && combinators.map((item) => /* @__PURE__ */ jsx(HvButton, { className: classes.combinatorButton, selected: item.operand === combinator, onClick: () => item.operand && onClickCombinator(item), disabled: readOnly, size: "xs", children: item.label }, item.operand)) }) }),
      /* @__PURE__ */ jsx(HvGrid, { item: true, children: /* @__PURE__ */ jsx("div", { className: cx(classes.buttonBackground, classes.topRemoveButton), children: /* @__PURE__ */ jsx(HvButton, { icon: true, className: classes.removeButton, onClick: () => {
        var _a2;
        askAction({
          actions: [{
            type: "remove-node",
            id
          }],
          dialog: level === 0 && ((_a2 = labels.query) == null ? void 0 : _a2.delete) != null ? labels.query.delete : labels.group.delete
        });
      }, "aria-label": level === 0 && ((_n = (_m = labels.query) == null ? void 0 : _m.delete) == null ? void 0 : _n.ariaLabel) ? (_p = (_o = labels.query) == null ? void 0 : _o.delete) == null ? void 0 : _p.ariaLabel : labels.group.delete.ariaLabel, disabled: readOnly, children: /* @__PURE__ */ jsx(DeleteIcon, {}) }) }) })
    ] }),
    (rules == null ? void 0 : rules.length) > 0 && /* @__PURE__ */ jsx("div", { className: cx(classes.rulesContainer, {
      [classes.subRulesContainer]: level > 0,
      [classes.topRulesContainer]: level === 0
    }), children: rules.map((rule, index) => {
      if ("combinator" in rule) {
        return /* @__PURE__ */ jsx(RuleGroup, { level: level + 1, ...rule, id: rule.id, classes }, rule.id ?? index);
      }
      const isInvalid = combinator === "and" && rules.some((r, i) => {
        if ("attribute" in r) {
          if (r.attribute === rule.attribute && r.id !== rule.id && i < index) {
            return true;
          }
        }
        return false;
      });
      return /* @__PURE__ */ jsx(Rule, { ...rule, isInvalid, id: rule.id, combinator }, rule.id ?? index);
    }) }),
    (rules == null ? void 0 : rules.length) === 0 && /* @__PURE__ */ jsx(HvEmptyState, { title: (_q = labels.empty) == null ? void 0 : _q.title, message: /* @__PURE__ */ jsxs(Fragment, { children: [
      /* @__PURE__ */ jsx(HvTypography, { variant: "link", component: "a", onClick: () => {
        dispatchAction({
          type: "add-rule",
          id
        });
      }, style: {
        cursor: "pointer",
        textDecoration: "underline"
      }, children: `${(_r = labels.empty) == null ? void 0 : _r.createCondition}` }),
      level <= normalizedMaxDepth && /* @__PURE__ */ jsxs(Fragment, { children: [
        `${(_s = labels.empty) == null ? void 0 : _s.spacer}`,
        /* @__PURE__ */ jsx(HvTypography, { variant: "link", component: "a", onClick: () => {
          dispatchAction({
            type: "add-group",
            id
          });
        }, style: {
          cursor: "pointer",
          textDecoration: "underline"
        }, children: `${(_t = labels.empty) == null ? void 0 : _t.createGroup}` })
      ] })
    ] }), icon: /* @__PURE__ */ jsx(Info, {}) }),
    /* @__PURE__ */ jsx(HvGrid, { container: true, children: /* @__PURE__ */ jsx(HvGrid, { item: true, className: cx(classes.actionButtonContainer, classes.topActionButtonContainer), children: actionButtons }) })
  ] });
};
export {
  RuleGroup
};
//# sourceMappingURL=RuleGroup.js.map
