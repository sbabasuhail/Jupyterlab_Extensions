import { jsx } from "@emotion/react/jsx-runtime";
import { getColor } from "@hitachivantara/uikit-styles";
import Chip from "@mui/material/Chip";
import { useTheme } from "../../hooks/useTheme.js";
import { useDefaultProps } from "../../hooks/useDefaultProps.js";
import { CloseXS } from "@hitachivantara/uikit-react-icons";
import { useClasses } from "./Tag.styles.js";
import { staticClasses } from "./Tag.styles.js";
const getCategoricalColor = (customColor, colors) => {
  return customColor && (colors == null ? void 0 : colors[customColor]) || customColor || (colors == null ? void 0 : colors.cat1);
};
const HvTag = (props) => {
  const {
    classes: classesProp,
    className,
    style,
    label,
    disabled,
    type = "semantic",
    color,
    deleteIcon,
    onDelete,
    onClick,
    // TODO: remove from API
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    deleteButtonArialLabel = "Delete tag",
    deleteButtonProps = {},
    ...others
  } = useDefaultProps("HvTag", props);
  const {
    colors
  } = useTheme();
  const {
    classes,
    cx,
    css
  } = useClasses(classesProp);
  const defaultDeleteIcon = /* @__PURE__ */ jsx(CloseXS, { role: "none", className: cx(classes.button, classes.tagButton), iconSize: "XS", color: "base_dark", ...deleteButtonProps });
  const categoricalBackgroundColor = type === "categorical" ? getCategoricalColor(color, colors) : void 0;
  const backgroundColor = type === "semantic" && getColor(color, "neutral_20") || type === "categorical" && `${categoricalBackgroundColor}30` || void 0;
  const isClickable = !!(onClick || onDelete) && !disabled;
  const clickableClass = css({
    "&:hover": {
      boxShadow: `0 0 0 1pt ${categoricalBackgroundColor}`
    }
  });
  return /* @__PURE__ */ jsx(Chip, { label, disabled, className: cx({
    [clickableClass]: isClickable
  }, className), style: {
    ...disabled ? null : {
      backgroundColor
    },
    ...style
  }, classes: {
    root: cx(classes.root, classes.chipRoot, {
      [classes.disabled]: disabled,
      [classes.clickable]: isClickable,
      [classes.categorical]: type === "categorical",
      [classes.categoricalFocus]: type === "categorical" && !disabled,
      [classes.categoricalDisabled]: type === "categorical" && disabled
    }),
    label: classes.label,
    deleteIcon: cx(classes.deleteIcon, {
      [classes.disabledDeleteIcon]: disabled
    })
  }, deleteIcon: deleteIcon || defaultDeleteIcon, onDelete: disabled ? void 0 : onDelete, onClick: disabled ? void 0 : onClick, ...others });
};
export {
  HvTag,
  staticClasses as tagClasses
};
//# sourceMappingURL=Tag.js.map
