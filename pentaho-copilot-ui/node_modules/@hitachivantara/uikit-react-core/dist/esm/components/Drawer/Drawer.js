import { jsxs, jsx } from "@emotion/react/jsx-runtime";
import { useState, useEffect } from "react";
import { useDefaultProps } from "../../hooks/useDefaultProps.js";
import { Drawer } from "@mui/material";
import { Close } from "@hitachivantara/uikit-react-icons";
import { theme } from "@hitachivantara/uikit-styles";
import { withTooltip } from "../../hocs/withTooltip.js";
import { hexToRgbA } from "../../utils/hexToRgbA.js";
import { setId } from "../../utils/setId.js";
import { checkValidHexColorValue } from "../../utils/checkValidHexColorValue.js";
import { getVarValue } from "../../utils/theme.js";
import { useTheme } from "../../hooks/useTheme.js";
import { useClasses } from "./Drawer.styles.js";
import { staticClasses } from "./Drawer.styles.js";
import { HvButton } from "../Button/Button.js";
const getBackgroundColor = (color) => {
  return checkValidHexColorValue(color) ? hexToRgbA(color, 0.8) : color;
};
const HvDrawer = (props) => {
  const {
    className,
    classes: classesProp,
    id,
    children,
    open,
    onClose,
    anchor = "right",
    buttonTitle = "Close",
    ...others
  } = useDefaultProps("HvDrawer", props);
  const {
    classes,
    css,
    cx
  } = useClasses(classesProp);
  const {
    colors,
    activeTheme,
    rootId
  } = useTheme();
  const [backgroundColorValue, setBackgroundColorValue] = useState(getVarValue(theme.drawer.backDropBackgroundColor, rootId) || "");
  const closeButtonDisplay = () => /* @__PURE__ */ jsx(Close, { role: "none" });
  const CloseButtonTooltipWrapper = buttonTitle ? withTooltip(closeButtonDisplay, buttonTitle, "top") : closeButtonDisplay;
  const [backgroundColor, setBackgroundColor] = useState(getBackgroundColor(backgroundColorValue));
  useEffect(() => {
    setBackgroundColorValue(getVarValue(theme.drawer.backDropBackgroundColor, rootId) || (activeTheme == null ? void 0 : activeTheme.drawer.backDropBackgroundColor) || "");
    setBackgroundColor(getBackgroundColor(backgroundColorValue));
  }, [colors, backgroundColorValue, setBackgroundColor, rootId, activeTheme == null ? void 0 : activeTheme.drawer.backDropBackgroundColor]);
  return /* @__PURE__ */ jsxs(Drawer, { className: cx(classes.root, className), id, anchor, open, PaperProps: {
    classes: {
      root: classes.paper
    }
  }, BackdropProps: {
    classes: {
      root: cx(css({
        backgroundColor
      }), classes.background)
    }
  }, onClose, ...others, children: [
    /* @__PURE__ */ jsx(HvButton, { id: setId(id, "close"), className: classes.closeButton, variant: "secondaryGhost", onClick: onClose, "aria-label": buttonTitle, children: /* @__PURE__ */ jsx(CloseButtonTooltipWrapper, {}) }),
    children
  ] });
};
export {
  HvDrawer,
  staticClasses as drawerClasses
};
//# sourceMappingURL=Drawer.js.map
