import { jsx, jsxs } from "@emotion/react/jsx-runtime";
import { Children } from "react";
import { useDefaultProps } from "../../hooks/useDefaultProps.js";
import { setId } from "../../utils/setId.js";
import { useControlled } from "../../hooks/useControlled.js";
import { HvControlsContextProvider } from "./context/ControlsContext.js";
import { useClasses } from "./Controls.styles.js";
import { staticClasses } from "./Controls.styles.js";
import { HvMultiButton } from "../MultiButton/MultiButton.js";
import { HvButton } from "../Button/Button.js";
const HvControls = (props) => {
  const {
    id,
    className,
    classes: classesProp,
    views,
    callbacks,
    selectedView,
    defaultView,
    children,
    hideViewSwitcher = false,
    onViewChange
  } = useDefaultProps("HvControls", props);
  const {
    classes,
    cx
  } = useClasses(classesProp);
  const [currentView, setCurrentView] = useControlled(selectedView, defaultView);
  const onViewChangeHandler = (evt, btnId) => {
    setCurrentView(btnId);
    onViewChange == null ? void 0 : onViewChange(evt, btnId);
  };
  const onSearchHandler = (value) => {
    var _a;
    return (_a = callbacks == null ? void 0 : callbacks.setGlobalFilter) == null ? void 0 : _a.call(callbacks, value);
  };
  const onSortHandler = (value) => {
    var _a;
    return (_a = callbacks == null ? void 0 : callbacks.setSortBy) == null ? void 0 : _a.call(callbacks, [{
      id: value == null ? void 0 : value.accessor,
      desc: value == null ? void 0 : value.desc
    }]);
  };
  const childrenCount = Children.count(children);
  const childrenArray = Children.toArray(children);
  const childrenIndexCut = childrenCount > 0 ? Math.round(childrenCount * 0.5) : 0;
  const leftChildren = childrenArray.slice(0, childrenIndexCut);
  const rightChildren = childrenArray.slice(childrenIndexCut, childrenCount || 0);
  return /* @__PURE__ */ jsx("div", { id, className: cx(classes.root, className), children: /* @__PURE__ */ jsxs(HvControlsContextProvider, { value: {
    onSearch: onSearchHandler,
    onSort: onSortHandler
  }, children: [
    /* @__PURE__ */ jsx("div", { className: cx(classes.section, classes.leftSection), children: leftChildren }),
    /* @__PURE__ */ jsxs("div", { className: cx(classes.section, classes.rightSection), children: [
      rightChildren,
      views && !hideViewSwitcher && (views == null ? void 0 : views.length) > 0 && /* @__PURE__ */ jsx(HvMultiButton, { id: setId(id, "view-multi-button"), children: views.map(({
        id: btnId,
        icon,
        ...others
      }) => /* @__PURE__ */ jsx(HvButton, { id: btnId, icon: true, selected: currentView === btnId, onClick: (evt) => onViewChangeHandler(evt, btnId), ...others, children: icon }, btnId)) })
    ] })
  ] }) });
};
export {
  HvControls,
  staticClasses as controlsClasses
};
//# sourceMappingURL=Controls.js.map
