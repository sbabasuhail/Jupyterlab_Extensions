{"version":3,"file":"List.js","sources":["../../../../src/components/List/List.tsx"],"sourcesContent":["import {\n  AriaRole,\n  forwardRef,\n  isValidElement,\n  useEffect,\n  useMemo,\n  useRef,\n} from \"react\";\n\nimport { FixedSizeList } from \"react-window\";\n\nimport { DropRightXS } from \"@hitachivantara/uikit-react-icons\";\n\nimport { useDefaultProps } from \"@core/hooks/useDefaultProps\";\nimport { HvBaseProps } from \"@core/types/generic\";\nimport { HvListContainer, HvListItem } from \"@core/components/ListContainer\";\nimport { HvTypography } from \"@core/components/Typography\";\nimport { setId } from \"@core/utils/setId\";\nimport { wrapperTooltip } from \"@core/utils/wrapperTooltip\";\nimport { ExtractNames } from \"@core/utils/classes\";\nimport { HvCheckBox } from \"@core/components/CheckBox\";\nimport { HvLink } from \"@core/components/Link\";\nimport { HvRadio } from \"@core/components/Radio\";\n\nimport { staticClasses, useClasses } from \"./List.styles\";\nimport { useSelectableList } from \"./useSelectableList\";\nimport { parseList } from \"./utils\";\nimport { HvListLabels, HvListValue } from \"./types\";\n\nexport { staticClasses as listClasses };\n\nexport type HvListClasses = ExtractNames<typeof useClasses>;\n\nexport interface HvListProps\n  extends HvBaseProps<HTMLUListElement, \"onChange\" | \"onClick\"> {\n  /**\n   * A list containing the elements to be rendered.\n   *\n   * - id: The id of the item.\n   * - label: The label of the element to be rendered.\n   * - selected: The selection state of the element.\n   * - disabled: The disabled state of the element.\n   * - isHidden: Is item visible.\n   * - icon: The icon.\n   * - showNavIcon: If true renders the navigation icon on the right.\n   * - path: The path to navigate to.\n   */\n  values: HvListValue[];\n  /** If true renders a multi select list. */\n  multiSelect?: boolean;\n  /**\n   * If true renders select all option for multi selection lists with selectors.\n   * note: It will only be rendered if multiSelect and useSelector props are set to true.\n   */\n  showSelectAll?: boolean;\n  /** An object containing all the labels for the dropdown. */\n  labels?: HvListLabels;\n  /** If true renders list items with radio or checkbox selectors. */\n  useSelector?: boolean;\n  /** Call back fired when list item is selected. Returns selection state. */\n  onChange?: (value: HvListValue[]) => void;\n  /** Call back fired when list item is selected. Returns selected item. */\n  onClick?: (\n    event: React.ChangeEvent<HTMLLIElement>,\n    value: HvListValue\n  ) => void;\n  /** If `true` the list items will show the selection state. */\n  selectable?: boolean;\n  /** If `true`, selection can be toggled when single selection. */\n  singleSelectionToggle?: boolean;\n  /** If `true` the list will be rendered without vertical spacing. */\n  condensed?: boolean;\n  /** If `true` the dropdown will show tooltips when user mouseenter text in list */\n  hasTooltips?: boolean;\n  /** Experimental. Height of the dropdown, in case you want to control it from a prop. Styles can also be used through dropdownListContainer class. Required in case virtualized is used */\n  height?: number;\n  /** Experimental. Uses dropdown in a virtualized form, where not all options are rendered initially. Good for use cases with a lot of options. */\n  virtualized?: boolean;\n  /** A Jss Object used to override or extend the styles applied to the component. */\n  classes?: HvListClasses;\n}\n\nconst DEFAULT_LABELS = {\n  selectAll: \"Select All\",\n  selectionConjunction: \"/\",\n};\n\n/**\n * Component used to show a set of related data to the user.\n */\nexport const HvList = (props: HvListProps) => {\n  const {\n    id,\n    classes: classesProp,\n    className,\n    multiSelect = false,\n    hasTooltips = false,\n    showSelectAll = false,\n    labels = DEFAULT_LABELS,\n    useSelector = false,\n    selectable = true,\n    singleSelectionToggle = true,\n    condensed = false,\n    onChange,\n    onClick,\n    values: valuesProp = [],\n    height,\n    virtualized = false,\n    ...others\n  } = useDefaultProps(\"HvList\", props);\n\n  const { classes, cx } = useClasses(classesProp);\n\n  const [list, setList, selection] = useSelectableList(valuesProp);\n  const listRef = useRef<any>(null);\n\n  useEffect(() => {\n    const passedProps = { multiSelect, selectable, singleSelectionToggle };\n    const parsedList: HvListValue[] = parseList(\n      undefined,\n      passedProps,\n      undefined,\n      valuesProp\n    );\n\n    setList(parsedList);\n  }, [valuesProp, multiSelect, selectable, singleSelectionToggle, setList]);\n\n  const [role, itemRole] = useMemo<[AriaRole, AriaRole]>(() => {\n    // selectors are responsible for the role & selection state\n    if (selectable && useSelector) return [\"list\", \"listitem\"];\n\n    if (selectable) return [\"listbox\", \"option\"];\n    return [\"menu\", \"menuitem\"];\n  }, [selectable, useSelector]);\n\n  const handleSelect = (evt, item) => {\n    if (!item.path) evt.preventDefault();\n    if (item.disabled) return;\n\n    const passedProps = { multiSelect, selectable, singleSelectionToggle };\n    const parsedList = parseList(item, passedProps, undefined, list);\n    setList(parsedList);\n\n    onClick?.(evt, item);\n    onChange?.(parsedList);\n  };\n\n  const handleSelectAll = () => {\n    const passedProps = { multiSelect, selectable, singleSelectionToggle };\n    const anySelectableSelected = list.some(\n      (elem) => elem.selected || elem.disabled\n    );\n    const parsedList = parseList(\n      undefined,\n      passedProps,\n      !anySelectableSelected,\n      list\n    );\n    setList(parsedList);\n\n    onChange?.(parsedList);\n  };\n\n  const renderLeftIcon = (item) => {\n    return isValidElement(item.icon)\n      ? item.icon\n      : item.icon?.({\n          isSelected: item.selected,\n          isDisabled: item.disabled,\n        });\n  };\n\n  const renderSelectAll = () => {\n    const { selectAll, selectionConjunction } = labels;\n\n    const anySelected = !!selection?.length;\n    const allSelected = selection.length === list.length;\n\n    const selectionLabel = (\n      <HvTypography component=\"span\">\n        {!anySelected ? (\n          <>\n            <b>{selectAll}</b>\n            {` (${list.length})`}\n          </>\n        ) : (\n          <>\n            <b>{selection.length}</b>\n            {`\\xa0${selectionConjunction}\\xa0`}\n            {list.length}\n          </>\n        )}\n      </HvTypography>\n    );\n\n    return (\n      <HvCheckBox\n        id={setId(id, \"select-all\")}\n        label={selectionLabel}\n        onChange={handleSelectAll}\n        className={classes.selectAllSelector}\n        indeterminate={anySelected && !allSelected}\n        checked={allSelected}\n      />\n    );\n  };\n\n  const renderItemText = (item) => {\n    const ItemText = wrapperTooltip(hasTooltips, item.label, item.label);\n\n    return !multiSelect && item.path ? (\n      <HvLink key={item.label} route={item.path} classes={{ a: classes.link }}>\n        <ItemText />\n      </HvLink>\n    ) : (\n      <ItemText />\n    );\n  };\n\n  const renderMultiSelectItem = (item, itemId) => {\n    if (useSelector) {\n      const Selection = wrapperTooltip(\n        hasTooltips,\n        <HvCheckBox\n          id={setId(itemId, \"selector\")}\n          label={item.label}\n          checked={item.selected}\n          disabled={item.disabled}\n          onChange={(evt) => handleSelect(evt, item)}\n          classes={{\n            root: classes.selectorRoot,\n            container: classes.selectorContainer,\n            label: classes.truncate,\n          }}\n        />,\n        item.label\n      );\n      return <Selection />;\n    }\n\n    return renderItemText(item);\n  };\n\n  const renderSingleSelectItem = (item, itemId) => {\n    if (useSelector) {\n      const Selection = wrapperTooltip(\n        hasTooltips,\n        <HvRadio\n          id={setId(itemId, \"selector\")}\n          label={item.label}\n          checked={item.selected}\n          disabled={item.disabled}\n          classes={{\n            root: classes.selectorRoot,\n            container: classes.selectorContainer,\n            label: classes.truncate,\n          }}\n        />,\n        item.label\n      );\n      return <Selection />;\n    }\n    return renderItemText(item);\n  };\n\n  const renderListItem = (item, i, otherProps = {}) => {\n    const itemId = setId(id, \"item\", i);\n    const selected = item.selected || false;\n\n    let startAdornment = null;\n    if (!useSelector && item.icon) {\n      startAdornment = renderLeftIcon(item);\n    }\n\n    return (\n      <HvListItem\n        key={i}\n        id={itemId}\n        role={itemRole}\n        disabled={item.disabled || undefined}\n        className={classes.item}\n        classes={{\n          selected: cx({\n            [classes.itemSelector]: useSelector || multiSelect,\n          }),\n        }}\n        selected={multiSelect || selected ? selected : undefined}\n        onClick={(evt) => handleSelect(evt, item)}\n        startAdornment={startAdornment}\n        endAdornment={\n          item.showNavIcon && (\n            <DropRightXS className={classes.box} iconSize=\"XS\" />\n          )\n        }\n        {...otherProps}\n      >\n        {multiSelect\n          ? renderMultiSelectItem(item, itemId)\n          : renderSingleSelectItem(item, itemId)}\n      </HvListItem>\n    );\n  };\n\n  const filteredList = list.filter((it) => !it.isHidden);\n  const anySelected = list\n    .map((item) => item.selected && !item.disabled)\n    .reduce((result, selected) => result || selected, false);\n\n  const selectedItemIndex = list.findIndex((item) => item.selected);\n  useEffect(() => {\n    if (selectedItemIndex >= 0 && listRef.current !== null) {\n      listRef.current.scrollToItem(selectedItemIndex);\n    }\n  }, [listRef, selectedItemIndex]);\n\n  const renderVirtualizedListItem = ({ index, style }) => {\n    const item = filteredList[index];\n    const tabIndex =\n      item.tabIndex ||\n      (!anySelected && index === 0) ||\n      (item.selected && !item.disabled)\n        ? 0\n        : -1;\n\n    return renderListItem(item, index, {\n      style: {\n        ...style,\n        top: `${parseFloat(style.top) + 5}px`,\n        left: `${parseFloat(style.left) + 5}px`,\n        width: `calc(${parseFloat(style.width)}% - 10px)`,\n      },\n      tabIndex,\n      interactive: true,\n      condensed,\n      disableGutters: useSelector,\n    });\n  };\n\n  const ariaMultiSelectable = (role === \"listbox\" && multiSelect) || undefined;\n\n  const ListContainer = useMemo(() => {\n    return forwardRef(({ ...rest }, ref) => (\n      <HvListContainer\n        id={id}\n        className={cx(classes.root, className)}\n        role={role}\n        interactive\n        condensed={condensed}\n        disableGutters={useSelector}\n        aria-multiselectable={ariaMultiSelectable}\n        ref={ref}\n        {...rest}\n      />\n    ));\n  }, [\n    cx,\n    id,\n    useSelector,\n    className,\n    classes.root,\n    role,\n    condensed,\n    ariaMultiSelectable,\n  ]);\n\n  // Render nothing if there are no items\n  if (filteredList.length === 0) return null;\n\n  return (\n    <>\n      {multiSelect && useSelector && showSelectAll && renderSelectAll()}\n\n      {!virtualized ? (\n        <HvListContainer\n          id={id}\n          className={cx(classes.root, className)}\n          role={role}\n          interactive\n          condensed={condensed}\n          disableGutters={useSelector}\n          aria-multiselectable={ariaMultiSelectable}\n          {...others}\n        >\n          {filteredList.map((item, i) => renderListItem(item, i))}\n        </HvListContainer>\n      ) : (\n        <FixedSizeList\n          ref={listRef}\n          className={classes.virtualizedRoot}\n          height={(height || 0) + 5}\n          width=\"100%\"\n          itemCount={filteredList.length}\n          itemSize={condensed ? 32 : 40}\n          innerElementType={ListContainer}\n          {...others}\n        >\n          {renderVirtualizedListItem}\n        </FixedSizeList>\n      )}\n    </>\n  );\n};\n"],"names":["DEFAULT_LABELS","selectAll","selectionConjunction","HvList","props","id","classes","classesProp","className","multiSelect","hasTooltips","showSelectAll","labels","useSelector","selectable","singleSelectionToggle","condensed","onChange","onClick","values","valuesProp","height","virtualized","others","useDefaultProps","cx","useClasses","list","setList","selection","useSelectableList","listRef","useRef","useEffect","passedProps","parsedList","parseList","undefined","role","itemRole","useMemo","handleSelect","evt","item","path","preventDefault","disabled","handleSelectAll","anySelectableSelected","some","elem","selected","renderLeftIcon","isValidElement","icon","isSelected","isDisabled","renderSelectAll","anySelected","length","allSelected","selectionLabel","setId","selectAllSelector","renderItemText","ItemText","wrapperTooltip","label","a","link","renderMultiSelectItem","itemId","Selection","root","selectorRoot","container","selectorContainer","truncate","renderSingleSelectItem","renderListItem","i","otherProps","startAdornment","itemSelector","showNavIcon","box","filteredList","filter","it","isHidden","map","reduce","result","selectedItemIndex","findIndex","current","scrollToItem","renderVirtualizedListItem","index","style","tabIndex","top","parseFloat","left","width","interactive","disableGutters","ariaMultiSelectable","ListContainer","forwardRef","rest","ref","virtualizedRoot"],"mappings":";;;;;;;;;;;;;;;;;AAkFA,MAAMA,iBAAiB;AAAA,EACrBC,WAAW;AAAA,EACXC,sBAAsB;AACxB;AAKaC,MAAAA,SAASA,CAACC,UAAuB;AACtC,QAAA;AAAA,IACJC;AAAAA,IACAC,SAASC;AAAAA,IACTC;AAAAA,IACAC,cAAc;AAAA,IACdC,cAAc;AAAA,IACdC,gBAAgB;AAAA,IAChBC,SAASZ;AAAAA,IACTa,cAAc;AAAA,IACdC,aAAa;AAAA,IACbC,wBAAwB;AAAA,IACxBC,YAAY;AAAA,IACZC;AAAAA,IACAC;AAAAA,IACAC,QAAQC,aAAa,CAAE;AAAA,IACvBC;AAAAA,IACAC,cAAc;AAAA,IACd,GAAGC;AAAAA,EAAAA,IACDC,gBAAgB,UAAUpB,KAAK;AAE7B,QAAA;AAAA,IAAEE;AAAAA,IAASmB;AAAAA,EAAAA,IAAOC,WAAWnB,WAAW;AAE9C,QAAM,CAACoB,MAAMC,SAASC,SAAS,IAAIC,kBAAkBV,UAAU;AACzDW,QAAAA,UAAUC,OAAY,IAAI;AAEhCC,YAAU,MAAM;AACd,UAAMC,cAAc;AAAA,MAAEzB;AAAAA,MAAaK;AAAAA,MAAYC;AAAAA,IAAAA;AAC/C,UAAMoB,aAA4BC,UAChCC,QACAH,aACAG,QACAjB,UACF;AAEAQ,YAAQO,UAAU;AAAA,EAAA,GACjB,CAACf,YAAYX,aAAaK,YAAYC,uBAAuBa,OAAO,CAAC;AAExE,QAAM,CAACU,MAAMC,QAAQ,IAAIC,QAA8B,MAAM;AAE3D,QAAI1B,cAAcD;AAAoB,aAAA,CAAC,QAAQ,UAAU;AAErDC,QAAAA;AAAmB,aAAA,CAAC,WAAW,QAAQ;AACpC,WAAA,CAAC,QAAQ,UAAU;AAAA,EAAA,GACzB,CAACA,YAAYD,WAAW,CAAC;AAEtB4B,QAAAA,eAAeA,CAACC,KAAKC,SAAS;AAClC,QAAI,CAACA,KAAKC;AAAMF,UAAIG,eAAe;AACnC,QAAIF,KAAKG;AAAU;AAEnB,UAAMZ,cAAc;AAAA,MAAEzB;AAAAA,MAAaK;AAAAA,MAAYC;AAAAA,IAAAA;AAC/C,UAAMoB,aAAaC,UAAUO,MAAMT,aAAaG,QAAWV,IAAI;AAC/DC,YAAQO,UAAU;AAElBjB,uCAAUwB,KAAKC;AACf1B,yCAAWkB;AAAAA,EAAU;AAGvB,QAAMY,kBAAkBA,MAAM;AAC5B,UAAMb,cAAc;AAAA,MAAEzB;AAAAA,MAAaK;AAAAA,MAAYC;AAAAA,IAAAA;AAC/C,UAAMiC,wBAAwBrB,KAAKsB,KAChCC,UAASA,KAAKC,YAAYD,KAAKJ,QAClC;AACA,UAAMX,aAAaC,UACjBC,QACAH,aACA,CAACc,uBACDrB,IACF;AACAC,YAAQO,UAAU;AAElBlB,yCAAWkB;AAAAA,EAAU;AAGvB,QAAMiB,iBAAkBT,CAAS,SAAA;;AAC/B,WAAOU,eAAeV,KAAKW,IAAI,IAC3BX,KAAKW,QACLX,UAAKW,SAALX,8BAAY;AAAA,MACVY,YAAYZ,KAAKQ;AAAAA,MACjBK,YAAYb,KAAKG;AAAAA,IAAAA;AAAAA,EAClB;AAGP,QAAMW,kBAAkBA,MAAM;AACtB,UAAA;AAAA,MAAExD;AAAAA,MAAWC;AAAAA,IAAyBU,IAAAA;AAEtC8C,UAAAA,eAAc,CAAC,EAAC7B,uCAAW8B;AAC3BC,UAAAA,cAAc/B,UAAU8B,WAAWhC,KAAKgC;AAE9C,UAAME,iBACH,oBAAA,cAAA,EAAa,WAAU,QACrB,UAAA,CAACH,eAEE,qBAAA,UAAA,EAAA,UAAA;AAAA,MAAA,oBAAC,OAAGzD,UAAU,UAAA,CAAA;AAAA,MACZ,KAAI0B,KAAKgC,MAAO;AAAA,IAAA,EAAA,CACpB,IAGE,qBAAA,UAAA,EAAA,UAAA;AAAA,MAAC,oBAAA,KAAA,EAAG9B,oBAAU8B,OAAO,CAAA;AAAA,MACnB,IAAMzD,oBAAqB;AAAA,MAC5ByB,KAAKgC;AAAAA,IAAAA,EACR,CAAA,EAEJ,CAAA;AAGF,+BACG,YACC,EAAA,IAAIG,MAAMzD,IAAI,YAAY,GAC1B,OAAOwD,gBACP,UAAUd,iBACV,WAAWzC,QAAQyD,mBACnB,eAAeL,gBAAe,CAACE,aAC/B,SAASA,YACT,CAAA;AAAA,EAAA;AAIN,QAAMI,iBAAkBrB,CAAS,SAAA;AAC/B,UAAMsB,WAAWC,eAAexD,aAAaiC,KAAKwB,OAAOxB,KAAKwB,KAAK;AAE5D,WAAA,CAAC1D,eAAekC,KAAKC,2BACzB,QAAwB,EAAA,OAAOD,KAAKC,MAAM,SAAS;AAAA,MAAEwB,GAAG9D,QAAQ+D;AAAAA,IAAK,GACpE,8BAAC,UAAQ,CAAA,CAAA,EAAA,GADE1B,KAAKwB,KAElB,wBAEC,UACF,CAAA,CAAA;AAAA,EAAA;AAGGG,QAAAA,wBAAwBA,CAAC3B,MAAM4B,WAAW;AAC9C,QAAI1D,aAAa;AACT2D,YAAAA,YAAYN,eAChBxD,aACC,oBAAA,YAAA,EACC,IAAIoD,MAAMS,QAAQ,UAAU,GAC5B,OAAO5B,KAAKwB,OACZ,SAASxB,KAAKQ,UACd,UAAUR,KAAKG,UACf,UAAWJ,CAAAA,QAAQD,aAAaC,KAAKC,IAAI,GACzC,SAAS;AAAA,QACP8B,MAAMnE,QAAQoE;AAAAA,QACdC,WAAWrE,QAAQsE;AAAAA,QACnBT,OAAO7D,QAAQuE;AAAAA,MAAAA,GAEjB,GACFlC,KAAKwB,KACP;AACA,iCAAQ,WAAY,CAAA,CAAA;AAAA,IACtB;AAEA,WAAOH,eAAerB,IAAI;AAAA,EAAA;AAGtBmC,QAAAA,yBAAyBA,CAACnC,MAAM4B,WAAW;AAC/C,QAAI1D,aAAa;AACf,YAAM2D,YAAYN,eAChBxD,iCACC,SACC,EAAA,IAAIoD,MAAMS,QAAQ,UAAU,GAC5B,OAAO5B,KAAKwB,OACZ,SAASxB,KAAKQ,UACd,UAAUR,KAAKG,UACf,SAAS;AAAA,QACP2B,MAAMnE,QAAQoE;AAAAA,QACdC,WAAWrE,QAAQsE;AAAAA,QACnBT,OAAO7D,QAAQuE;AAAAA,MAAAA,GAEjB,GACFlC,KAAKwB,KACP;AACA,iCAAQ,WAAY,CAAA,CAAA;AAAA,IACtB;AACA,WAAOH,eAAerB,IAAI;AAAA,EAAA;AAG5B,QAAMoC,iBAAiBA,CAACpC,MAAMqC,GAAGC,aAAa,CAAA,MAAO;AACnD,UAAMV,SAAST,MAAMzD,IAAI,QAAQ2E,CAAC;AAC5B7B,UAAAA,WAAWR,KAAKQ,YAAY;AAElC,QAAI+B,iBAAiB;AACjB,QAAA,CAACrE,eAAe8B,KAAKW,MAAM;AAC7B4B,uBAAiB9B,eAAeT,IAAI;AAAA,IACtC;AAEA,WACG,oBAAA,YAAA,EAEC,IAAI4B,QACJ,MAAMhC,UACN,UAAUI,KAAKG,YAAYT,QAC3B,WAAW/B,QAAQqC,MACnB,SAAS;AAAA,MACPQ,UAAU1B,GAAG;AAAA,QACX,CAACnB,QAAQ6E,YAAY,GAAGtE,eAAeJ;AAAAA,MAAAA,CACxC;AAAA,IAAA,GAEH,UAAUA,eAAe0C,WAAWA,WAAWd,QAC/C,SAAUK,CAAQD,QAAAA,aAAaC,KAAKC,IAAI,GACxC,gBACA,cACEA,KAAKyC,eACH,oBAAC,aAAY,EAAA,WAAW9E,QAAQ+E,KAAK,UAAS,KAAI,CAAA,GAGlDJ,GAAAA,YAEHxE,UAAAA,cACG6D,sBAAsB3B,MAAM4B,MAAM,IAClCO,uBAAuBnC,MAAM4B,MAAM,KAtBlCS,CAuBP;AAAA,EAAA;AAIJ,QAAMM,eAAe3D,KAAK4D,OAAQC,CAAO,OAAA,CAACA,GAAGC,QAAQ;AACrD,QAAM/B,cAAc/B,KACjB+D,IAAK/C,CAASA,SAAAA,KAAKQ,YAAY,CAACR,KAAKG,QAAQ,EAC7C6C,OAAO,CAACC,QAAQzC,aAAayC,UAAUzC,UAAU,KAAK;AAEzD,QAAM0C,oBAAoBlE,KAAKmE,UAAWnD,CAAAA,SAASA,KAAKQ,QAAQ;AAChElB,YAAU,MAAM;AACd,QAAI4D,qBAAqB,KAAK9D,QAAQgE,YAAY,MAAM;AAC9CA,cAAAA,QAAQC,aAAaH,iBAAiB;AAAA,IAChD;AAAA,EAAA,GACC,CAAC9D,SAAS8D,iBAAiB,CAAC;AAE/B,QAAMI,4BAA4BA,CAAC;AAAA,IAAEC;AAAAA,IAAOC;AAAAA,EAAAA,MAAY;AAChDxD,UAAAA,OAAO2C,aAAaY,KAAK;AAC/B,UAAME,WACJzD,KAAKyD,YACJ,CAAC1C,eAAewC,UAAU,KAC1BvD,KAAKQ,YAAY,CAACR,KAAKG,WACpB,IACA;AAECiC,WAAAA,eAAepC,MAAMuD,OAAO;AAAA,MACjCC,OAAO;AAAA,QACL,GAAGA;AAAAA,QACHE,KAAM,GAAEC,WAAWH,MAAME,GAAG,IAAI,CAAE;AAAA,QAClCE,MAAO,GAAED,WAAWH,MAAMI,IAAI,IAAI,CAAE;AAAA,QACpCC,OAAQ,QAAOF,WAAWH,MAAMK,KAAK,CAAE;AAAA,MACzC;AAAA,MACAJ;AAAAA,MACAK,aAAa;AAAA,MACbzF;AAAAA,MACA0F,gBAAgB7F;AAAAA,IAAAA,CACjB;AAAA,EAAA;AAGG8F,QAAAA,sBAAuBrE,SAAS,aAAa7B,eAAgB4B;AAE7DuE,QAAAA,gBAAgBpE,QAAQ,MAAM;AAClC,WAAOqE,WAAW,CAAC;AAAA,MAAE,GAAGC;AAAAA,IAAK,GAAGC,QAC7B,oBAAA,iBAAA,EACC,IACA,WAAWtF,GAAGnB,QAAQmE,MAAMjE,SAAS,GACrC,MACA,aAAW,MACX,WACA,gBAAgBK,aAChB,wBAAsB8F,qBACtB,KACA,GAAIG,OAEP;AAAA,EACH,GAAG,CACDrF,IACApB,IACAQ,aACAL,WACAF,QAAQmE,MACRnC,MACAtB,WACA2F,mBAAmB,CACpB;AAGD,MAAIrB,aAAa3B,WAAW;AAAU,WAAA;AAEtC,SAEKlD,qBAAAA,UAAAA,EAAAA,UAAAA;AAAAA,IAAeI,eAAAA,eAAeF,iBAAiB8C,gBAAgB;AAAA,IAE/D,CAACnC,cACA,oBAAC,iBACC,EAAA,IACA,WAAWG,GAAGnB,QAAQmE,MAAMjE,SAAS,GACrC,MACA,aAAW,MACX,WACA,gBAAgBK,aAChB,wBAAsB8F,qBAClBpF,GAAAA,QAEH+D,UAAAA,aAAaI,IAAI,CAAC/C,MAAMqC,MAAMD,eAAepC,MAAMqC,CAAC,CAAC,EACxD,CAAA,IAEA,oBAAC,eACC,EAAA,KAAKjD,SACL,WAAWzB,QAAQ0G,iBACnB,SAAS3F,UAAU,KAAK,GACxB,OAAM,QACN,WAAWiE,aAAa3B,QACxB,UAAU3C,YAAY,KAAK,IAC3B,kBAAkB4F,eAClB,GAAIrF,QAEH0E,UACH,0BAAA,CAAA;AAAA,EAEJ,EAAA,CAAA;AAEJ;"}