import { jsx } from "@emotion/react/jsx-runtime";
import { isValidElement } from "react";
import isNil from "lodash/isNil";
import { useDefaultProps } from "../../hooks/useDefaultProps.js";
import { useClasses } from "./BreadCrumb.styles.js";
import { staticClasses } from "./BreadCrumb.styles.js";
import { pathWithSubMenu, removeExtension } from "./utils.js";
import { HvPathElement } from "./PathElement/PathElement.js";
import { HvPage } from "./Page/Page.js";
import { HvTypography } from "../Typography/Typography.js";
const HvBreadCrumb = (props) => {
  const {
    classes: classesProp,
    className,
    id,
    listRoute = [],
    maxVisible,
    url,
    onClick,
    component,
    dropDownMenuProps,
    ...others
  } = useDefaultProps("HvBreadCrumb", props);
  const {
    classes,
    cx
  } = useClasses(classesProp);
  const maxVisibleElem = maxVisible && maxVisible < 2 ? 2 : maxVisible;
  let listPath = listRoute.slice();
  if (!isNil(url)) {
    listPath = [];
    const baseUrl = url.match(/^.*\/\/[^/]+/);
    const urlWithoutDomain = url.replace(/^.*\/\/[^/]+/, "");
    const pathNames = urlWithoutDomain.split("/").filter((x) => x);
    pathNames.map((elem, index) => listPath.push({
      label: decodeURI(elem),
      path: `${baseUrl}/${pathNames.slice(0, index + 1).join("/")}`
    }));
  }
  const breadcrumbPath = maxVisibleElem && listPath.length > maxVisibleElem ? pathWithSubMenu(id, listPath, maxVisibleElem, onClick, dropDownMenuProps) : listPath;
  return /* @__PURE__ */ jsx("nav", { id, className: cx(classes.root, className), ...others, children: /* @__PURE__ */ jsx("ol", { className: classes.orderedList, children: listPath.map((elem, index) => {
    const key = `key_${index}`;
    const isLast = index === breadcrumbPath.length - 1;
    return /* @__PURE__ */ jsx(HvPathElement, { classes: {
      centerContainer: classes.centerContainer,
      separatorContainer: classes.separatorContainer
    }, last: isLast, children: isValidElement(elem) && elem || isLast && /* @__PURE__ */ jsx(HvTypography, { className: classes.currentPage, variant: "body", children: removeExtension(elem.label) }) || /* @__PURE__ */ jsx(HvPage, { elem, classes: {
      a: classes.a,
      link: classes.link
    }, component, onClick }) }, key);
  }) }) });
};
export {
  HvBreadCrumb,
  staticClasses as breadCrumbClasses
};
//# sourceMappingURL=BreadCrumb.js.map
