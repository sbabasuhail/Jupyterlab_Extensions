import { jsx } from "@emotion/react/jsx-runtime";
import { useState, useCallback } from "react";
import MuiRadio from "@mui/material/Radio";
import { RadioButtonUnselected, RadioButtonSelected } from "@hitachivantara/uikit-react-icons";
import { useDefaultProps } from "../../hooks/useDefaultProps.js";
import { useClasses } from "./BaseRadio.styles.js";
import { staticClasses } from "./BaseRadio.styles.js";
const getSelectorIcons = (options, classes) => {
  const {
    disabled,
    semantic
  } = options;
  const color = disabled && ["atmo3", "secondary_60"] || semantic && ["base_light", "base_dark"] || void 0;
  const checkedColor = disabled && ["atmo3", "secondary_60"] || semantic && ["base_dark", "base_light"] || void 0;
  return {
    radio: /* @__PURE__ */ jsx(RadioButtonUnselected, { color, className: classes.icon }),
    radioChecked: /* @__PURE__ */ jsx(RadioButtonSelected, { color: checkedColor, className: classes.icon })
  };
};
const HvBaseRadio = (props) => {
  const {
    classes: classesProp,
    className,
    id,
    name,
    value = "on",
    required = false,
    readOnly = false,
    disabled = false,
    checked,
    defaultChecked,
    onChange,
    semantic = false,
    inputProps,
    onFocusVisible,
    onBlur,
    ...others
  } = useDefaultProps("HvBaseRadio", props);
  const {
    classes,
    cx
  } = useClasses(classesProp);
  const [focusVisible, setFocusVisible] = useState(false);
  const onFocusVisibleCallback = useCallback((evt) => {
    setFocusVisible(true);
    onFocusVisible == null ? void 0 : onFocusVisible(evt);
  }, [onFocusVisible]);
  const onBlurCallback = useCallback((evt) => {
    setFocusVisible(false);
    onBlur == null ? void 0 : onBlur(evt);
  }, [onBlur]);
  const icons = getSelectorIcons({
    disabled,
    semantic
  }, classes);
  const onLocalChange = useCallback((evt) => {
    if (readOnly) {
      return;
    }
    onChange == null ? void 0 : onChange(evt, evt.target.checked, value);
  }, [onChange, readOnly, value]);
  return /* @__PURE__ */ jsx(MuiRadio, { id, name, className: cx(classes.root, {
    [classes.disabled]: disabled,
    [classes.focusVisible]: focusVisible
  }, className), icon: icons.radio, checkedIcon: icons.radioChecked, color: "default", disabled, required, readOnly, disableRipple: true, onChange: onLocalChange, value, checked, defaultChecked, inputProps, onFocusVisible: onFocusVisibleCallback, onBlur: onBlurCallback, ...others });
};
export {
  HvBaseRadio,
  staticClasses as baseRadioClasses,
  getSelectorIcons
};
//# sourceMappingURL=BaseRadio.js.map
