import { jsxs, jsx } from "@emotion/react/jsx-runtime";
import { useCallback } from "react";
import { useDefaultProps } from "../../hooks/useDefaultProps.js";
import { useUniqueId } from "../../hooks/useUniqueId.js";
import { useControlled } from "../../hooks/useControlled.js";
import { setId } from "../../utils/setId.js";
import { isInvalid } from "../Forms/FormElement/validationStates.js";
import { useClasses } from "./Switch.styles.js";
import { staticClasses } from "./Switch.styles.js";
import { HvBaseSwitch } from "../BaseSwitch/BaseSwitch.js";
import { HvFormElement } from "../Forms/FormElement/FormElement.js";
import { HvLabel } from "../Forms/Label/Label.js";
import { HvWarningText } from "../Forms/WarningText/WarningText.js";
const HvSwitch = (props) => {
  const {
    classes: classesProp,
    className,
    id,
    name,
    value = "on",
    required = false,
    readOnly = false,
    disabled = false,
    label,
    "aria-label": ariaLabel,
    "aria-labelledby": ariaLabelledBy,
    "aria-describedby": ariaDescribedBy,
    labelProps,
    checked,
    defaultChecked = false,
    onChange,
    status,
    statusMessage,
    "aria-errormessage": ariaErrorMessage,
    inputProps,
    ...others
  } = useDefaultProps("HvSwitch", props);
  const {
    classes,
    cx
  } = useClasses(classesProp);
  const elementId = useUniqueId(id, "hvswitch");
  const [isChecked, setIsChecked] = useControlled(checked, Boolean(defaultChecked));
  const [validationState, setValidationState] = useControlled(status, "standBy");
  const [validationMessage] = useControlled(statusMessage, "Required");
  const onLocalChange = useCallback((evt, newChecked) => {
    setIsChecked(() => {
      if (required && !newChecked) {
        setValidationState("invalid");
      } else {
        setValidationState("valid");
      }
      return newChecked;
    });
    onChange == null ? void 0 : onChange(evt, newChecked, value);
  }, [onChange, required, setIsChecked, setValidationState, value]);
  const canShowError = ariaErrorMessage == null && (status !== void 0 && statusMessage !== void 0 || status === void 0 && required);
  const isStateInvalid = isInvalid(validationState);
  let errorMessageId;
  if (isStateInvalid) {
    errorMessageId = canShowError ? setId(elementId, "error") : ariaErrorMessage;
  }
  return /* @__PURE__ */ jsxs(HvFormElement, { id, name, status: validationState, disabled, required, readOnly, className: cx(classes.root, className), children: [
    label && /* @__PURE__ */ jsx(HvLabel, { id: setId(elementId, "label"), htmlFor: setId(elementId, "input"), label, className: classes.label, ...labelProps }),
    /* @__PURE__ */ jsx("div", { className: cx(classes.switchContainer, {
      [classes.invalidSwitch]: isStateInvalid
    }), children: /* @__PURE__ */ jsx(HvBaseSwitch, { id: label ? setId(elementId, "input") : setId(id, "input"), name, disabled, readOnly, required, onChange: onLocalChange, value, checked: isChecked, inputProps: {
      "aria-invalid": isStateInvalid ? true : void 0,
      "aria-errormessage": errorMessageId,
      "aria-label": ariaLabel,
      "aria-labelledby": ariaLabelledBy,
      "aria-describedby": ariaDescribedBy,
      ...inputProps
    }, ...others }) }),
    canShowError && /* @__PURE__ */ jsx(HvWarningText, { id: setId(elementId, "error"), className: classes.error, disableBorder: true, disableAdornment: true, hideText: true, children: validationMessage })
  ] });
};
export {
  HvSwitch,
  staticClasses as switchClasses
};
//# sourceMappingURL=Switch.js.map
