import { jsx, jsxs } from "@emotion/react/jsx-runtime";
import { forwardRef, isValidElement } from "react";
import SnackbarContent from "@mui/material/SnackbarContent";
import { setId } from "../../../utils/setId.js";
import { iconVariant } from "../../../utils/iconVariant.js";
import { useTheme } from "../../../hooks/useTheme.js";
import { useClasses } from "./SnackbarContent.styles.js";
import { staticClasses } from "./SnackbarContent.styles.js";
import { HvActionsGeneric } from "../../ActionsGeneric/ActionsGeneric.js";
const HvSnackbarContent = forwardRef(({
  className,
  id,
  classes: classesProp,
  label,
  variant = "default",
  showIcon,
  customIcon,
  action,
  actionCallback,
  ...others
}, ref) => {
  const icon = customIcon || showIcon && iconVariant(variant, "base_dark");
  const innerAction = isValidElement(action) ? action : [action];
  const {
    classes,
    cx
  } = useClasses(classesProp);
  const {
    activeTheme
  } = useTheme();
  return /* @__PURE__ */ jsx(SnackbarContent, { ref, id, classes: {
    root: classes.root,
    message: classes.message
  }, className: cx(classes == null ? void 0 : classes[variant], className), message: /* @__PURE__ */ jsxs("div", { id: setId(id, "message"), className: classes.messageSpan, children: [
    icon && /* @__PURE__ */ jsx("div", { className: classes.iconVariant, children: icon }),
    /* @__PURE__ */ jsx("div", { className: classes.messageText, children: label }),
    action && /* @__PURE__ */ jsx("div", { id: setId(id, "action"), className: classes.action, children: /* @__PURE__ */ jsx(HvActionsGeneric, { id, category: activeTheme == null ? void 0 : activeTheme.snackbar.actionButtonVariant, actions: innerAction, actionsCallback: actionCallback }) })
  ] }), ...others });
});
export {
  HvSnackbarContent,
  staticClasses as snackbarContentClasses
};
//# sourceMappingURL=SnackbarContent.js.map
