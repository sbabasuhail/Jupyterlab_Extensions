{"version":3,"file":"SnackbarProvider.js","sources":["../../../../../src/components/Snackbar/SnackbarProvider/SnackbarProvider.tsx"],"sourcesContent":["import { forwardRef, ReactNode, useCallback, useMemo } from \"react\";\n\nimport {\n  CombinedClassKey,\n  OptionsObject,\n  SnackbarContent,\n  SnackbarProvider,\n  SnackbarProviderProps,\n  useSnackbar,\n} from \"notistack\";\n\nimport { clsx } from \"clsx\";\n\nimport { SnackbarOrigin } from \"@mui/material/Snackbar\";\nimport { ClassNameMap } from \"@mui/material\";\n\nimport { css } from \"@emotion/css\";\n\nimport { ExtractNames } from \"@core/utils/classes\";\n\nimport { HvSnackbarContent, HvSnackbarContentProps } from \"../SnackbarContent\";\nimport { staticClasses, useClasses } from \"./SnackbarProvider.styles\";\nimport { HvSnackbarVariant } from \"../types\";\n\nexport { staticClasses as snackbarProviderClasses };\n\nexport type HvSnackbarProviderClasses = ExtractNames<typeof useClasses>;\n\nexport interface HvSnackbarProviderProps {\n  /** Your component tree. */\n  children: React.ReactNode;\n  /** Max visible snackbars. */\n  maxSnack?: number;\n  /** How much time the snackbar remains visible in milliseconds. */\n  autoHideDuration?: number;\n  /** Where is the snackbar placed. */\n  anchorOrigin?: SnackbarOrigin;\n  /** Class object used to override notistack classes. */\n  notistackClassesOverride?: Partial<ClassNameMap<CombinedClassKey>>;\n  /** A Jss Object used to override or extend the styles applied to the component. */\n  classes?: HvSnackbarProviderClasses;\n  className?: string;\n}\n\nexport interface HvNotistackSnackMessageProps extends OptionsObject {\n  /** Id to be applied to the root node. */\n  id?: string;\n  /** Classname to apply on the root node */\n  className?: string;\n  /** Your component tree. */\n  message?: ReactNode;\n  /** Variant of the snackbar. */\n  variant?: HvSnackbarVariant;\n  /** Extra values to pass to the snackbar. */\n  snackbarContentProps?: HvSnackbarContentProps;\n}\n\nconst HvNotistackSnackMessage = forwardRef<\n  HTMLDivElement,\n  HvNotistackSnackMessageProps\n>((props, ref) => {\n  const { id, message, variant = \"success\", snackbarContentProps } = props;\n  return (\n    <SnackbarContent ref={ref}>\n      <HvSnackbarContent\n        id={id}\n        variant={variant}\n        showIcon\n        label={message}\n        role=\"none\"\n        {...snackbarContentProps}\n      />\n    </SnackbarContent>\n  );\n});\n\n// We override notistack hook to be able to customize the snackbar that should be called.\nexport const useHvSnackbar = () => {\n  const { enqueueSnackbar: enqueueNotistackSnackbar, closeSnackbar } =\n    useSnackbar();\n\n  const enqueueSnackbar = useCallback(\n    (message: ReactNode, options: HvNotistackSnackMessageProps = {}) => {\n      const {\n        id,\n        variant = \"success\",\n        snackbarContentProps,\n        className,\n        ...otherOptions\n      } = options;\n\n      return enqueueNotistackSnackbar(\n        <HvNotistackSnackMessage\n          id={id}\n          message={message}\n          variant={variant}\n          snackbarContentProps={snackbarContentProps}\n        />,\n        { ...otherOptions, className: clsx(className) }\n      );\n    },\n    [enqueueNotistackSnackbar]\n  );\n  return useMemo(\n    () => ({\n      enqueueSnackbar,\n      closeSnackbar,\n    }),\n    [enqueueSnackbar, closeSnackbar]\n  );\n};\n\nexport const HvSnackbarProvider = ({\n  children,\n  notistackClassesOverride,\n  maxSnack = 5,\n  autoHideDuration = 5000,\n  anchorOrigin = {\n    vertical: \"top\",\n    horizontal: \"right\",\n  },\n  classes: classesProp,\n  className,\n  ...others\n}: HvSnackbarProviderProps) => {\n  const { classes, cx } = useClasses(classesProp);\n\n  const notistackClasses: SnackbarProviderProps[\"classes\"] = {\n    containerRoot: css({\n      pointerEvents: \"all\",\n      \"& > div > div\": {\n        // Overrides notistack extra padding\n        padding: \"0 !important\",\n        transition: \"all 0s ease 0s !important\",\n      },\n    }),\n    ...notistackClassesOverride,\n  };\n\n  return (\n    <SnackbarProvider\n      classes={notistackClasses}\n      maxSnack={maxSnack}\n      autoHideDuration={autoHideDuration}\n      anchorOrigin={anchorOrigin as SnackbarOrigin}\n      className={cx(classes.snackItemRoot, className)}\n      {...others}\n    >\n      {children}\n    </SnackbarProvider>\n  );\n};\n"],"names":["HvNotistackSnackMessage","forwardRef","props","ref","id","message","variant","snackbarContentProps","useHvSnackbar","enqueueSnackbar","enqueueNotistackSnackbar","closeSnackbar","useSnackbar","useCallback","options","className","otherOptions","clsx","useMemo","HvSnackbarProvider","children","notistackClassesOverride","maxSnack","autoHideDuration","anchorOrigin","vertical","horizontal","classes","classesProp","others","cx","useClasses","notistackClasses","containerRoot","css","process","env","NODE_ENV","name","styles","map","toString","_EMOTION_STRINGIFIED_CSS_ERROR__","snackItemRoot"],"mappings":";;;;;;;;;;;AAyDA,MAAMA,0BAA0BC,WAG9B,CAACC,OAAOC,QAAQ;AACV,QAAA;AAAA,IAAEC;AAAAA,IAAIC;AAAAA,IAASC,UAAU;AAAA,IAAWC;AAAAA,EAAyBL,IAAAA;AACnE,SACG,oBAAA,iBAAA,EAAgB,KACf,UAAA,oBAAC,qBACC,IACA,SACA,UAAQ,MACR,OAAOG,SACP,MAAK,QACL,GAAIE,sBAAqB,EAE7B,CAAA;AAEJ,CAAC;AAGM,MAAMC,gBAAgBA,MAAM;AAC3B,QAAA;AAAA,IAAEC,iBAAiBC;AAAAA,IAA0BC;AAAAA,MACjDC,YAAY;AAEd,QAAMH,kBAAkBI,YACtB,CAACR,SAAoBS,UAAwC,CAAA,MAAO;AAC5D,UAAA;AAAA,MACJV;AAAAA,MACAE,UAAU;AAAA,MACVC;AAAAA,MACAQ;AAAAA,MACA,GAAGC;AAAAA,IACDF,IAAAA;AAEJ,WAAOJ,yBACJ,oBAAA,yBAAA,EACC,IACA,SACA,SACA,yBAEF;AAAA,MAAE,GAAGM;AAAAA,MAAcD,WAAWE,KAAKF,SAAS;AAAA,IAAA,CAC9C;AAAA,EAAA,GAEF,CAACL,wBAAwB,CAC3B;AACA,SAAOQ,QACL,OAAO;AAAA,IACLT;AAAAA,IACAE;AAAAA,EAEF,IAAA,CAACF,iBAAiBE,aAAa,CACjC;AACF;AAEO,MAAMQ,qBAAqBA,CAAC;AAAA,EACjCC;AAAAA,EACAC;AAAAA,EACAC,WAAW;AAAA,EACXC,mBAAmB;AAAA,EACnBC,eAAe;AAAA,IACbC,UAAU;AAAA,IACVC,YAAY;AAAA,EACd;AAAA,EACAC,SAASC;AAAAA,EACTb;AAAAA,EACA,GAAGc;AACoB,MAAM;AACvB,QAAA;AAAA,IAAEF;AAAAA,IAASG;AAAAA,EAAAA,IAAOC,WAAWH,WAAW;AAE9C,QAAMI,mBAAqD;AAAA,IACzDC,eAAeC,oBAAGC,QAAAC,IAAAC,aAAA,eAAA;AAAA,MAAAC,MAAA;AAAA,MAAAC,QAAA;AAAA,IAAA,IAAA;AAAA,MAAAD,MAAA;AAAA,MAAAC,QAAA;AAAA,MAAAC,KAAA;AAAA,MAAAC,UAAAC;AAAAA,IAAAA,CAOjB;AAAA,IACD,GAAGrB;AAAAA,EAAAA;AAGL,SACG,oBAAA,kBAAA,EACC,SAASW,kBACT,UACA,kBACA,cACA,WAAWF,GAAGH,QAAQgB,eAAe5B,SAAS,GAC9C,GAAIc,QAEHT,SACH,CAAA;AAEJ;"}