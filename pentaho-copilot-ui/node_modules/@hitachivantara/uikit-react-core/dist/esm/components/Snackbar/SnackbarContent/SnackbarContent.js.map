{"version":3,"file":"SnackbarContent.js","sources":["../../../../../src/components/Snackbar/SnackbarContent/SnackbarContent.tsx"],"sourcesContent":["import { forwardRef, isValidElement } from \"react\";\n\nimport SnackbarContent, {\n  SnackbarContentProps as MuiSnackbarContentProps,\n} from \"@mui/material/SnackbarContent\";\n\nimport { ExtractNames } from \"@core/utils/classes\";\nimport { setId } from \"@core/utils/setId\";\nimport { iconVariant } from \"@core/utils/iconVariant\";\nimport { HvBaseProps } from \"@core/types/generic\";\nimport {\n  HvActionsGeneric,\n  HvActionGeneric,\n} from \"@core/components/ActionsGeneric\";\nimport { HvButtonVariant } from \"@core/components/Button\";\nimport { useTheme } from \"@core/hooks/useTheme\";\n\nimport { staticClasses, useClasses } from \"./SnackbarContent.styles\";\nimport { HvSnackbarVariant } from \"../types\";\n\nexport { staticClasses as snackbarContentClasses };\n\nexport type HvSnackbarContentClasses = ExtractNames<typeof useClasses>;\n\nexport interface HvSnackbarContentProps\n  extends Omit<MuiSnackbarContentProps, \"variant\" | \"action\" | \"classes\">,\n    HvBaseProps {\n  /** The message to display. */\n  label?: React.ReactNode;\n  /** Variant of the snackbar. */\n  variant?: HvSnackbarVariant;\n  /** Controls if the associated icon to the variant should be shown. */\n  showIcon?: boolean;\n  /** Custom icon to replace the variant default. */\n  customIcon?: React.ReactNode;\n  /** Action to display. */\n  action?: React.ReactNode | HvActionGeneric;\n  /** The callback function ran when an action is triggered, receiving `action` as param */\n  actionCallback?: (\n    event: React.SyntheticEvent,\n    id: string,\n    action: HvActionGeneric\n  ) => void;\n  /** A Jss Object used to override or extend the styles applied to the component. */\n  classes?: HvSnackbarContentClasses;\n}\n\nexport const HvSnackbarContent = forwardRef<\n  HTMLDivElement,\n  HvSnackbarContentProps\n>(\n  (\n    {\n      className,\n      id,\n      classes: classesProp,\n      label,\n      variant = \"default\",\n      showIcon,\n      customIcon,\n      action,\n      actionCallback,\n      ...others\n    },\n    ref\n  ) => {\n    const icon = customIcon || (showIcon && iconVariant(variant, \"base_dark\"));\n    const innerAction: any = isValidElement(action) ? action : [action];\n\n    const { classes, cx } = useClasses(classesProp);\n    const { activeTheme } = useTheme();\n\n    return (\n      <SnackbarContent\n        ref={ref}\n        id={id}\n        classes={{\n          root: classes.root,\n          message: classes.message,\n        }}\n        className={cx(classes?.[variant], className)}\n        message={\n          <div id={setId(id, \"message\")} className={classes.messageSpan}>\n            {icon && <div className={classes.iconVariant}>{icon}</div>}\n            <div className={classes.messageText}>{label}</div>\n            {action && (\n              <div id={setId(id, \"action\")} className={classes.action}>\n                <HvActionsGeneric\n                  id={id}\n                  category={\n                    activeTheme?.snackbar.actionButtonVariant as HvButtonVariant\n                  }\n                  actions={innerAction}\n                  actionsCallback={actionCallback}\n                />\n              </div>\n            )}\n          </div>\n        }\n        {...others}\n      />\n    );\n  }\n);\n"],"names":["HvSnackbarContent","forwardRef","className","id","classes","classesProp","label","variant","showIcon","customIcon","action","actionCallback","others","ref","icon","iconVariant","innerAction","isValidElement","cx","useClasses","activeTheme","useTheme","root","message","setId","messageSpan","messageText","snackbar","actionButtonVariant"],"mappings":";;;;;;;;;AA+CaA,MAAAA,oBAAoBC,WAI/B,CACE;AAAA,EACEC;AAAAA,EACAC;AAAAA,EACAC,SAASC;AAAAA,EACTC;AAAAA,EACAC,UAAU;AAAA,EACVC;AAAAA,EACAC;AAAAA,EACAC;AAAAA,EACAC;AAAAA,EACA,GAAGC;AACL,GACAC,QACG;AACH,QAAMC,OAAOL,cAAeD,YAAYO,YAAYR,SAAS,WAAW;AACxE,QAAMS,cAAmBC,eAAeP,MAAM,IAAIA,SAAS,CAACA,MAAM;AAE5D,QAAA;AAAA,IAAEN;AAAAA,IAASc;AAAAA,EAAAA,IAAOC,WAAWd,WAAW;AACxC,QAAA;AAAA,IAAEe;AAAAA,MAAgBC,SAAS;AAEjC,SACG,oBAAA,iBAAA,EACC,KACA,IACA,SAAS;AAAA,IACPC,MAAMlB,QAAQkB;AAAAA,IACdC,SAASnB,QAAQmB;AAAAA,EAAAA,GAEnB,WAAWL,GAAGd,mCAAUG,UAAUL,SAAS,GAC3C,SACG,qBAAA,OAAA,EAAI,IAAIsB,MAAMrB,IAAI,SAAS,GAAG,WAAWC,QAAQqB,aAC/CX,UAAAA;AAAAA,IAAAA,QAAS,oBAAA,OAAA,EAAI,WAAWV,QAAQW,aAAcD,UAAK,MAAA;AAAA,IACnD,oBAAA,OAAA,EAAI,WAAWV,QAAQsB,aAAcpB,UAAM,OAAA;AAAA,IAC3CI,8BACE,OAAI,EAAA,IAAIc,MAAMrB,IAAI,QAAQ,GAAG,WAAWC,QAAQM,QAC/C,8BAAC,kBACC,EAAA,IACA,UACEU,2CAAaO,SAASC,qBAExB,SAASZ,aACT,iBAAiBL,eAAAA,CAAe,EAEpC,CAAA;AAAA,EAAA,GAEJ,GAEEC,GAAAA,OACJ,CAAA;AAEN,CACF;"}