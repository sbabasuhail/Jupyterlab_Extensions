import { jsx } from "@emotion/react/jsx-runtime";
import { useState, useCallback } from "react";
import MuiSwitch from "@mui/material/Switch";
import { useDefaultProps } from "../../hooks/useDefaultProps.js";
import { useClasses } from "./BaseSwitch.styles.js";
import { staticClasses } from "./BaseSwitch.styles.js";
const HvBaseSwitch = (props) => {
  const {
    classes: classesProp,
    className,
    id,
    name,
    value = "on",
    required = false,
    readOnly = false,
    disabled = false,
    checked,
    defaultChecked,
    onChange,
    inputProps,
    onFocusVisible,
    onBlur,
    ...others
  } = useDefaultProps("HvBaseSwitch", props);
  const {
    classes,
    cx
  } = useClasses(classesProp);
  const [focusVisible, setFocusVisible] = useState(false);
  const onFocusVisibleCallback = useCallback((evt) => {
    setFocusVisible(true);
    onFocusVisible == null ? void 0 : onFocusVisible(evt);
  }, [onFocusVisible]);
  const onBlurCallback = useCallback((evt) => {
    setFocusVisible(false);
    onBlur == null ? void 0 : onBlur(evt);
  }, [onBlur]);
  const onLocalChange = useCallback((evt) => {
    if (readOnly) {
      return;
    }
    onChange == null ? void 0 : onChange(evt, evt.target.checked, value);
  }, [onChange, readOnly, value]);
  return /* @__PURE__ */ jsx(MuiSwitch, { id, name, className: cx(classes.root, {
    [classes.disabled]: disabled,
    [classes.readOnly]: readOnly,
    [classes.focusVisible]: focusVisible
  }, className), color: "default", disabled, required, readOnly, disableRipple: true, onChange: onLocalChange, value, checked, defaultChecked, classes: {
    root: classes.switch,
    switchBase: classes.switchBase,
    checked: classes.checked,
    track: classes.track,
    thumb: classes.thumb,
    disabled: classes.disabled
  }, inputProps, onFocusVisible: onFocusVisibleCallback, onBlur: onBlurCallback, ...others });
};
export {
  HvBaseSwitch,
  staticClasses as baseSwitchClasses
};
//# sourceMappingURL=BaseSwitch.js.map
