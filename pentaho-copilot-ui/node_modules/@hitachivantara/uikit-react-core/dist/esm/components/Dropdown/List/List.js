import { jsxs, jsx, Fragment } from "@emotion/react/jsx-runtime";
import { useState, useContext, useEffect } from "react";
import { theme } from "@hitachivantara/uikit-styles";
import isNil from "lodash/isNil";
import { setId } from "../../../utils/setId.js";
import { useClasses } from "./List.styles.js";
import { staticClasses } from "./List.styles.js";
import { getSelected } from "../utils.js";
import BaseDropdownContext from "../../BaseDropdown/BaseDropdownContext/BaseDropdownContext.js";
import { HvActionBar } from "../../ActionBar/ActionBar.js";
import { HvButton } from "../../Button/Button.js";
import { HvList } from "../../List/List.js";
import { HvInput } from "../../Input/Input.js";
import { HvTypography } from "../../Typography/Typography.js";
import { HvCheckBox } from "../../CheckBox/CheckBox.js";
const clone = (values) => values.map((value) => ({
  ...value
}));
const cleanHidden = (lst) => lst.map((item) => ({
  ...item,
  isHidden: false
}));
const valuesExist = (values) => !isNil(values) && (values == null ? void 0 : values.length) > 0;
const HvDropdownList = ({
  id,
  classes: classesProp,
  values = [],
  multiSelect = false,
  showSearch = false,
  onChange,
  onCancel,
  labels,
  notifyChangesOnFirstRender = false,
  hasTooltips = false,
  singleSelectionToggle,
  height: dropdownHeight,
  maxHeight,
  virtualized = false,
  ...others
}) => {
  const {
    classes,
    cx,
    css
  } = useClasses(classesProp);
  const [searchStr, setSearchStr] = useState("");
  const [list, setList] = useState(clone(values));
  const [allSelected, setAllSelected] = useState(false);
  const [anySelected, setAnySelected] = useState(false);
  const {
    width,
    height
  } = useContext(BaseDropdownContext);
  const newLabels = {
    selectAll: labels == null ? void 0 : labels.selectAll,
    selectionConjunction: labels == null ? void 0 : labels.multiSelectionConjunction
  };
  const updateSelectAll = (listValues) => {
    if (!listValues)
      return;
    const nbrSelected = getSelected(listValues).length;
    const hasSelection = nbrSelected > 0;
    const allSelect = nbrSelected === listValues.length;
    setAnySelected(hasSelection);
    setAllSelected(hasSelection && allSelect);
  };
  useEffect(() => {
    if (!valuesExist(values))
      return;
    setList(clone(values));
    updateSelectAll(values);
    if (notifyChangesOnFirstRender) {
      onChange == null ? void 0 : onChange(values, false, false, true);
    }
  }, [values, notifyChangesOnFirstRender, onChange]);
  const handleSearch = (str) => {
    const results = list ? list.filter(({
      searchValue,
      label,
      value
    }) => {
      let stringValue = "";
      if (typeof searchValue === "string" || searchValue instanceof String) {
        stringValue = searchValue.toLowerCase();
      } else if (typeof label === "string" || label instanceof String) {
        stringValue = label.toLowerCase();
      } else if (typeof value === "string" || value instanceof String) {
        stringValue = value.toLowerCase();
      }
      return stringValue.indexOf(str.toLowerCase()) >= 0;
    }) : null;
    if (!isNil(results)) {
      const newList = list.map((elem) => {
        const isResult = results.find((result) => result.label === elem.label);
        return {
          ...elem,
          isHidden: !isResult
        };
      });
      setList(newList);
      setSearchStr(str);
    }
    return str;
  };
  const renderSearch = () => /* @__PURE__ */ jsx("div", { className: classes.searchContainer, children: /* @__PURE__ */ jsx(HvInput, { id: setId(id, "search"), type: "search", value: searchStr, placeholder: labels == null ? void 0 : labels.searchPlaceholder, "aria-label": labels == null ? void 0 : labels.searchPlaceholder, onChange: (event, str) => handleSearch(str) }) });
  const handleSelectAll = () => {
    const newList = list.map((elem) => ({
      ...elem,
      selected: !anySelected
    }));
    setList(newList);
    updateSelectAll(newList);
  };
  const renderSelectAll = () => {
    const selectAll = labels == null ? void 0 : labels.selectAll;
    const multiSelectionConjunction = labels == null ? void 0 : labels.multiSelectionConjunction;
    const nbrSelected = getSelected(list).length;
    const defaultLabel = /* @__PURE__ */ jsx(HvTypography, { component: "span", children: nbrSelected > 0 ? /* @__PURE__ */ jsxs(Fragment, { children: [
      /* @__PURE__ */ jsx("b", { children: nbrSelected }),
      ` ${multiSelectionConjunction} ${list.length}`
    ] }) : /* @__PURE__ */ jsxs(Fragment, { children: [
      /* @__PURE__ */ jsx("b", { children: selectAll }),
      ` (${list.length})`
    ] }) });
    return /* @__PURE__ */ jsx("div", { className: classes.selectAllContainer, children: /* @__PURE__ */ jsx(HvCheckBox, { id: setId(id, "select-all"), label: defaultLabel, onChange: () => handleSelectAll(), classes: {
      container: classes.selection
    }, className: classes.selectAll, indeterminate: anySelected && !allSelected, checked: allSelected }) });
  };
  const onSelection = (listValues) => {
    if (!multiSelect) {
      onChange(cleanHidden(listValues), true, true, true);
    } else {
      updateSelectAll(listValues);
      setList(clone(listValues));
    }
  };
  const renderActions = () => {
    const applyLabel = labels == null ? void 0 : labels.applyLabel;
    const cancelLabel = labels == null ? void 0 : labels.cancelLabel;
    return /* @__PURE__ */ jsxs(HvActionBar, { id: setId(id, "actions"), children: [
      /* @__PURE__ */ jsx(HvButton, { id: setId(id, "actions-apply"), onClick: () => onChange(cleanHidden(list), true, true, true), variant: "primaryGhost", children: applyLabel }),
      /* @__PURE__ */ jsx(HvButton, { id: setId(id, "actions-cancel"), onClick: onCancel, variant: "primaryGhost", children: cancelLabel })
    ] });
  };
  const showList = valuesExist(values);
  return /* @__PURE__ */ jsxs("div", { className: classes.rootList, children: [
    /* @__PURE__ */ jsx("div", { className: classes.listBorderDown }),
    /* @__PURE__ */ jsxs("div", { className: classes.listContainer, children: [
      showSearch && renderSearch(),
      showList && multiSelect && renderSelectAll(),
      showList && /* @__PURE__ */ jsx(HvList, { id: setId(id, "list"), classes: {
        root: cx(classes.dropdownListContainer, css({
          maxWidth: width,
          maxHeight: maxHeight ?? `calc(${height}px - 32px - ${theme.space.xs} - ${theme.space.sm})`,
          overflow: "auto",
          padding: 4,
          margin: -4
        }), dropdownHeight && css({
          height: dropdownHeight
        }), virtualized && css({
          maxWidth: "inherit",
          maxHeight: "inherit",
          overflow: "inherit",
          padding: 0
        }))
      }, values: list, multiSelect, useSelector: multiSelect, showSelectAll: false, onChange: onSelection, labels: newLabels, hasTooltips, selectable: true, condensed: true, singleSelectionToggle, height: dropdownHeight, virtualized, ...others })
    ] }),
    showList && multiSelect ? renderActions() : null
  ] });
};
export {
  HvDropdownList,
  staticClasses as dropdownListClasses
};
//# sourceMappingURL=List.js.map
