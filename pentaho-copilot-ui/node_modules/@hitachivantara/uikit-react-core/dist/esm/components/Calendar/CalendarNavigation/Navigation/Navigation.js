import { jsxs, jsx } from "@emotion/react/jsx-runtime";
import { DropLeftXS, DropRightXS } from "@hitachivantara/uikit-react-icons";
import { isKey } from "../../../../utils/keyboardUtils.js";
import { setId } from "../../../../utils/setId.js";
import { useClasses } from "./Navigation.styles.js";
import { staticClasses } from "./Navigation.styles.js";
import { HvTypography } from "../../../Typography/Typography.js";
const Navigation = ({
  id,
  classes: classesProp,
  onNavigatePrevious,
  onNavigateNext,
  onTextClick,
  navigationText = "n/a",
  isPreviousEnabled = true,
  isNextEnabled = true
}) => {
  const {
    classes,
    cx
  } = useClasses(classesProp);
  const onkeyDownHandler = (event, funcAction) => {
    if (isKey(event, "Enter") || isKey(event, "Space")) {
      event.preventDefault();
      funcAction(event);
    }
  };
  const onTextClickIsFunction = typeof onTextClick === "function";
  return /* @__PURE__ */ jsxs("div", { className: classes.root, children: [
    /* @__PURE__ */ jsx(DropLeftXS, { id: setId(id, "left"), className: cx(classes.icon, {
      [classes.disabled]: !isPreviousEnabled
    }), onClick: isPreviousEnabled ? (event) => onNavigatePrevious(event) : void 0, onKeyDown: (event) => isNextEnabled ? onkeyDownHandler(event, onNavigatePrevious) : void 0, tabIndex: 0 }),
    /* @__PURE__ */ jsx(
      "div",
      {
        id,
        className: cx({
          [classes.text]: onTextClickIsFunction,
          [classes.textWithoutHover]: !onTextClickIsFunction
        }),
        role: "presentation",
        onClick: onTextClick,
        onKeyDown: onTextClick && ((event) => onkeyDownHandler(event, onTextClick)),
        tabIndex: onTextClick ? 0 : -1,
        children: /* @__PURE__ */ jsx(HvTypography, { variant: "body", children: navigationText })
      }
    ),
    /* @__PURE__ */ jsx(DropRightXS, { id: setId(id, "right"), className: cx(classes.icon, {
      [classes.disabled]: !isNextEnabled
    }), onClick: isNextEnabled ? (event) => onNavigateNext(event) : void 0, onKeyDown: (event) => isNextEnabled ? onkeyDownHandler(event, onNavigateNext) : void 0, tabIndex: 0 })
  ] });
};
export {
  Navigation,
  staticClasses as navigationClasses
};
//# sourceMappingURL=Navigation.js.map
