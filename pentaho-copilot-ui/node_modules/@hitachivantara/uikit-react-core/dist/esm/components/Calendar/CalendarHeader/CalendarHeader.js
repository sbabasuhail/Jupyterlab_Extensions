import { jsxs, Fragment, jsx } from "@emotion/react/jsx-runtime";
import { useContext, useState, useEffect } from "react";
import { Info } from "@hitachivantara/uikit-react-icons";
import dayjs from "dayjs";
import localeData from "dayjs/plugin/localeData";
import localizedFormat from "dayjs/plugin/localizedFormat";
import customParseFormat from "dayjs/plugin/customParseFormat";
import isNil from "lodash/isNil";
import { isKey } from "../../../utils/keyboardUtils.js";
import { setId } from "../../../utils/setId.js";
import { isRange, isDate, formatToLocale, isSameDay } from "../utils.js";
import { useClasses } from "./CalendarHeader.styles.js";
import { staticClasses } from "./CalendarHeader.styles.js";
import { HvFormElementValueContext } from "../../Forms/FormElement/context/FormElementValueContext.js";
import { HvFormElementContext } from "../../Forms/FormElement/context/FormElementContext.js";
import { HvFormElementDescriptorsContext } from "../../Forms/FormElement/context/FormElementDescriptorsContext.js";
import { HvTypography } from "../../Typography/Typography.js";
dayjs.extend(localeData);
dayjs.extend(localizedFormat);
dayjs.extend(customParseFormat);
const HvCalendarHeader = ({
  id,
  value,
  locale = "en-US",
  classes: classesProp,
  onChange,
  showEndDate,
  showDayOfWeek = false,
  onFocus,
  invalidDateLabel = "Invalid Date",
  ...others
}) => {
  var _a;
  const {
    classes,
    cx
  } = useClasses(classesProp);
  const {
    elementId
  } = useContext(HvFormElementContext);
  const elementValue = useContext(HvFormElementValueContext);
  const {
    label
  } = useContext(HvFormElementDescriptorsContext);
  let localValue = value ?? elementValue ?? "";
  if (isRange(localValue)) {
    localValue = showEndDate ? localValue.endDate : localValue.startDate;
  }
  const [dateValue, setDateValue] = useState(localValue);
  const [editedValue, setEditedValue] = useState(null);
  const [displayValue, setDisplayValue] = useState("");
  const [weekdayDisplay, setWeekdayDisplay] = useState("");
  const localId = id ?? setId(elementId, "calendarHeader");
  const inputValue = editedValue ?? displayValue;
  const localeFormat = dayjs().locale(locale).localeData().longDateFormat("L");
  const [isValidValue, setIsValidValue] = useState(inputValue.length === 0 || !!inputValue && dayjs(localValue).isValid());
  const validateInput = (incomingValid) => incomingValid === void 0 || dayjs(incomingValid).isValid();
  useEffect(() => {
    const valid = validateInput(localValue);
    setIsValidValue(valid);
    if (valid) {
      if (!localValue) {
        setDisplayValue("");
        setEditedValue(null);
        setWeekdayDisplay("");
        return;
      }
      const weekday = new Intl.DateTimeFormat(locale, {
        weekday: "short"
      }).format(isDate(localValue) ? localValue : 0);
      setDisplayValue(formatToLocale(localValue, locale));
      setEditedValue(null);
      setWeekdayDisplay(weekday);
    }
  }, [localValue, locale]);
  const handleNewDate = (event, date) => {
    const localeParsedDate = dayjs(date, localeFormat);
    const isValidInput = localeParsedDate.isValid();
    const dateParsed = isValidInput ? localeParsedDate.toDate() : dayjs(date).toDate();
    if (!isSameDay(dateParsed, dateValue)) {
      setDateValue(dateParsed);
      onChange == null ? void 0 : onChange(event, dateParsed);
    }
    setIsValidValue(isValidInput);
    if (isValidInput) {
      setEditedValue(null);
    }
  };
  const onBlurHandler = (event) => {
    if (isNil(editedValue))
      return;
    if (editedValue === "") {
      setIsValidValue(true);
      setEditedValue(null);
      return;
    }
    handleNewDate(event, editedValue);
  };
  const keyDownHandler = (event) => {
    if (!isKey(event, "Enter") || isNil(editedValue) || editedValue === "")
      return;
    event.preventDefault();
    handleNewDate(event, editedValue);
  };
  const onFocusHandler = (event) => {
    if (!localValue)
      return;
    const formattedDate = isValidValue && isDate(localValue) ? dayjs(localValue).locale(locale).format("L") : editedValue;
    setEditedValue(formattedDate);
    onFocus == null ? void 0 : onFocus(event, formattedDate);
  };
  const onChangeHandler = (event) => {
    setEditedValue(event.target.value);
  };
  return /* @__PURE__ */ jsxs(Fragment, { children: [
    /* @__PURE__ */ jsxs("div", { id: localId, className: cx(classes.root, {
      [classes.invalid]: !isValidValue && inputValue !== ""
    }), children: [
      showDayOfWeek && /* @__PURE__ */ jsx(HvTypography, { className: classes.headerDayOfWeek, children: weekdayDisplay || "Â " }),
      /* @__PURE__ */ jsx("div", { className: classes.headerDate, children: /* @__PURE__ */ jsx("input", { type: "text", id: setId(localId, "header-input"), placeholder: localeFormat, value: inputValue, className: classes.input, onBlur: onBlurHandler, onFocus: onFocusHandler, onChange: onChangeHandler, onKeyDown: keyDownHandler, "aria-labelledby": (_a = label == null ? void 0 : label[0]) == null ? void 0 : _a.id, ...others }) })
    ] }),
    !isValidValue && inputValue !== "" && /* @__PURE__ */ jsx("div", { role: "presentation", className: classes.inputBorderContainer }),
    /* @__PURE__ */ jsx("div", { style: {
      height: 32
    }, children: !isValidValue && inputValue !== "" && /* @__PURE__ */ jsxs(HvTypography, { component: "span", variant: "body", className: classes == null ? void 0 : classes.invalidMessageStyling, children: [
      /* @__PURE__ */ jsx(Info, { color: "brand", iconSize: "S" }),
      invalidDateLabel
    ] }) })
  ] });
};
HvCalendarHeader.formElementType = "HvCalendarHeader";
export {
  HvCalendarHeader,
  staticClasses as calendarHeaderClasses
};
//# sourceMappingURL=CalendarHeader.js.map
