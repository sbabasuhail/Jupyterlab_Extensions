{"version":3,"file":"CalendarCell.js","sources":["../../../../../src/components/Calendar/SingleCalendar/CalendarCell.tsx"],"sourcesContent":["import { SyntheticEvent, useRef } from \"react\";\n\nimport { HvTypography } from \"@core/components/Typography\";\nimport { ExtractNames } from \"@core/utils/classes\";\nimport {\n  isSameDay,\n  isSameMonth,\n  dateInProvidedValueRange,\n  checkIfDateIsDisabled,\n  isDateRangeProp,\n} from \"../utils\";\nimport { DateRangeProp } from \"../types\";\nimport CalendarModel from \"../model\";\n\nimport { staticClasses, useClasses } from \"./CalendarCell.styles\";\n\nexport { staticClasses as calendarCellClasses };\n\nexport type HvCalendarCellClasses = ExtractNames<typeof useClasses>;\n\nexport const HvCalendarCell = ({\n  classes: classesProp,\n  onChange,\n  onKeyDown,\n  calendarValue,\n  firstDayOfCurrentMonth,\n  value,\n  isDateSelectionMode,\n  today,\n  locale,\n  minimumDate,\n  maximumDate,\n  rangeMode = false,\n  ...others\n}: HvCalendarCellProps) => {\n  const { classes, cx } = useClasses(classesProp);\n\n  const buttonEl = useRef<HTMLButtonElement>(null);\n\n  const startDate = isDateRangeProp(calendarValue)\n    ? calendarValue.startDate\n    : undefined;\n  const endDate = isDateRangeProp(calendarValue)\n    ? calendarValue.endDate\n    : undefined;\n  const isCellToday = isSameDay(value, today);\n  const isCellSelected = isSameDay(calendarValue, value);\n  const inMonth = isSameMonth(value, firstDayOfCurrentMonth);\n  const isCellAfterStartingDate =\n    rangeMode && value && startDate ? value >= startDate : false;\n  const isCellStartingDate = rangeMode ? isSameDay(value, startDate) : false;\n  const isDateInSelectionRange =\n    calendarValue && rangeMode\n      ? dateInProvidedValueRange(value, calendarValue)\n      : false;\n  const isDateDisabled = checkIfDateIsDisabled(value, minimumDate, maximumDate);\n  const startBookend = isSameDay(startDate, value);\n  const endBookend = isSameDay(endDate, value);\n  const isSelecting = isDateSelectionMode && isCellAfterStartingDate;\n\n  const handleClick = (event: SyntheticEvent) => {\n    if (value) {\n      onChange?.(event, value);\n      if (buttonEl.current) setTimeout(() => buttonEl?.current?.focus());\n    }\n  };\n\n  const handleKeyDown = (event) => {\n    onKeyDown?.(event);\n  };\n\n  const renderDate = () => (\n    <button\n      ref={buttonEl}\n      type=\"button\"\n      className={cx(classes.cellContainer, {\n        [classes.focusSelection]: inMonth,\n      })}\n      onClick={handleClick}\n      onKeyDown={handleKeyDown}\n      disabled={isDateDisabled || !inMonth}\n      data-in-month={inMonth}\n      {...others}\n    >\n      <HvTypography\n        variant={isCellToday ? \"label\" : \"body\"}\n        className={cx(classes.calendarDate, {\n          [classes.calendarDateSelected]: inMonth && isCellSelected,\n          [classes.calendarDateNotInMonth]: !inMonth,\n          [classes.calendarDateInSelectionRange]:\n            inMonth && rangeMode && isDateInSelectionRange,\n          [classes.calendarDateDisabled]: isDateDisabled,\n          [classes.startBookend]:\n            inMonth &&\n            ((startBookend && rangeMode) ||\n              (isCellStartingDate && isDateSelectionMode)),\n          [classes.endBookend]: inMonth && endBookend && rangeMode,\n        })}\n      >\n        {value && value.getDate()}\n      </HvTypography>\n    </button>\n  );\n\n  return (\n    <div\n      className={cx(classes.dateWrapper, {\n        [classes.cellsInRange]: inMonth && rangeMode && isSelecting,\n        [classes.cellsOutsideRange]: rangeMode && !isSelecting,\n      })}\n      data-calendar-cell=\"calendarCell\"\n    >\n      {renderDate()}\n    </div>\n  );\n};\n\nexport interface HvCalendarCellProps {\n  /**\n   * A Jss Object used to override or extend the component styles.\n   */\n  classes?: HvCalendarCellClasses;\n  /**\n   * Identifier.\n   */\n  id?: string;\n  /**\n   * The text to be shown on the main part of the header.\n   */\n  calendarValue?: string | Date | DateRangeProp;\n  /**\n   * The text to be shown on the main part of the header.\n   */\n  value?: Date;\n  /**\n   * Locale to be used by the calendar.\n   */\n  locale?: string;\n  /**\n   * Callback to define the input date.\n   */\n  onChange?: (event: SyntheticEvent, value: Date | DateRangeProp) => void;\n  /**\n   * Callback to handle input onFocus.\n   */\n  onFocus?: React.FocusEventHandler<any>;\n\n  calendarModel?: CalendarModel;\n  onKeyDown?: (event: KeyboardEvent) => void;\n\n  today?: Date;\n  minimumDate?: Date;\n  maximumDate?: Date;\n  firstDayOfCurrentMonth?: Date;\n  isDateSelectionMode?: boolean;\n  rangeMode?: boolean;\n  tabIndex?: number;\n}\n\nexport default HvCalendarCell;\n"],"names":["HvCalendarCell","classes","classesProp","onChange","onKeyDown","calendarValue","firstDayOfCurrentMonth","value","isDateSelectionMode","today","locale","minimumDate","maximumDate","rangeMode","others","cx","useClasses","buttonEl","useRef","startDate","isDateRangeProp","undefined","endDate","isCellToday","isSameDay","isCellSelected","inMonth","isSameMonth","isCellAfterStartingDate","isCellStartingDate","isDateInSelectionRange","dateInProvidedValueRange","isDateDisabled","checkIfDateIsDisabled","startBookend","endBookend","isSelecting","handleClick","event","current","setTimeout","focus","handleKeyDown","renderDate","cellContainer","focusSelection","calendarDate","calendarDateSelected","calendarDateNotInMonth","calendarDateInSelectionRange","calendarDateDisabled","getDate","dateWrapper","cellsInRange","cellsOutsideRange"],"mappings":";;;;;;AAoBO,MAAMA,iBAAiBA,CAAC;AAAA,EAC7BC,SAASC;AAAAA,EACTC;AAAAA,EACAC;AAAAA,EACAC;AAAAA,EACAC;AAAAA,EACAC;AAAAA,EACAC;AAAAA,EACAC;AAAAA,EACAC;AAAAA,EACAC;AAAAA,EACAC;AAAAA,EACAC,YAAY;AAAA,EACZ,GAAGC;AACgB,MAAM;AACnB,QAAA;AAAA,IAAEb;AAAAA,IAASc;AAAAA,EAAAA,IAAOC,WAAWd,WAAW;AAExCe,QAAAA,WAAWC,OAA0B,IAAI;AAE/C,QAAMC,YAAYC,gBAAgBf,aAAa,IAC3CA,cAAcc,YACdE;AACJ,QAAMC,UAAUF,gBAAgBf,aAAa,IACzCA,cAAciB,UACdD;AACEE,QAAAA,cAAcC,UAAUjB,OAAOE,KAAK;AACpCgB,QAAAA,iBAAiBD,UAAUnB,eAAeE,KAAK;AAC/CmB,QAAAA,UAAUC,YAAYpB,OAAOD,sBAAsB;AACzD,QAAMsB,0BACJf,aAAaN,SAASY,YAAYZ,SAASY,YAAY;AACzD,QAAMU,qBAAqBhB,YAAYW,UAAUjB,OAAOY,SAAS,IAAI;AACrE,QAAMW,yBACJzB,iBAAiBQ,YACbkB,yBAAyBxB,OAAOF,aAAa,IAC7C;AACN,QAAM2B,iBAAiBC,sBAAsB1B,OAAOI,aAAaC,WAAW;AACtEsB,QAAAA,eAAeV,UAAUL,WAAWZ,KAAK;AACzC4B,QAAAA,aAAaX,UAAUF,SAASf,KAAK;AAC3C,QAAM6B,cAAc5B,uBAAuBoB;AAErCS,QAAAA,cAAcA,CAACC,UAA0B;AAC7C,QAAI/B,OAAO;AACTJ,2CAAWmC,OAAO/B;AAClB,UAAIU,SAASsB;AAASC,mBAAW,MAAA;;AAAMvB,4DAAUsB,YAAVtB,mBAAmBwB;AAAAA,SAAO;AAAA,IACnE;AAAA,EAAA;AAGF,QAAMC,gBAAiBJ,CAAU,UAAA;AAC/BlC,2CAAYkC;AAAAA,EAAK;AAGbK,QAAAA,aAAaA,MACjB,oBAAC,UACC,EAAA,KAAK1B,UACL,MAAK,UACL,WAAWF,GAAGd,QAAQ2C,eAAe;AAAA,IACnC,CAAC3C,QAAQ4C,cAAc,GAAGnB;AAAAA,EAC3B,CAAA,GACD,SAASW,aACT,WAAWK,eACX,UAAUV,kBAAkB,CAACN,SAC7B,iBAAeA,SACf,GAAIZ,QAEJ,UAAC,oBAAA,cAAA,EACC,SAASS,cAAc,UAAU,QACjC,WAAWR,GAAGd,QAAQ6C,cAAc;AAAA,IAClC,CAAC7C,QAAQ8C,oBAAoB,GAAGrB,WAAWD;AAAAA,IAC3C,CAACxB,QAAQ+C,sBAAsB,GAAG,CAACtB;AAAAA,IACnC,CAACzB,QAAQgD,4BAA4B,GACnCvB,WAAWb,aAAaiB;AAAAA,IAC1B,CAAC7B,QAAQiD,oBAAoB,GAAGlB;AAAAA,IAChC,CAAC/B,QAAQiC,YAAY,GACnBR,YACEQ,gBAAgBrB,aACfgB,sBAAsBrB;AAAAA,IAC3B,CAACP,QAAQkC,UAAU,GAAGT,WAAWS,cAActB;AAAAA,EAAAA,CAChD,GAEAN,UAAAA,SAASA,MAAM4C,WAClB,EACF,CAAA;AAGF,SACG,oBAAA,OAAA,EACC,WAAWpC,GAAGd,QAAQmD,aAAa;AAAA,IACjC,CAACnD,QAAQoD,YAAY,GAAG3B,WAAWb,aAAauB;AAAAA,IAChD,CAACnC,QAAQqD,iBAAiB,GAAGzC,aAAa,CAACuB;AAAAA,EAAAA,CAC5C,GACD,sBAAmB,gBAElBO,uBACH,CAAA;AAEJ;"}