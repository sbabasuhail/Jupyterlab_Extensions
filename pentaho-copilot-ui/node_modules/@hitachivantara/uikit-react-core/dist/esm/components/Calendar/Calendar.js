import { jsx, jsxs } from "@emotion/react/jsx-runtime";
import { useDefaultProps } from "../../hooks/useDefaultProps.js";
import { useContext } from "react";
import { setId } from "../../utils/setId.js";
import { isRange } from "./utils.js";
import { useClasses } from "./Calendar.styles.js";
import { staticClasses } from "./Calendar.styles.js";
import { HvSingleCalendar } from "./SingleCalendar/SingleCalendar.js";
import { HvFormElementContext } from "../Forms/FormElement/context/FormElementContext.js";
import { HvFormElementValueContext } from "../Forms/FormElement/context/FormElementValueContext.js";
const HvCalendar = (props) => {
  const {
    classes: classesProp,
    id,
    locale = "en-US",
    value,
    visibleMonth,
    visibleYear,
    rightVisibleMonth,
    rightVisibleYear,
    minimumDate,
    maximumDate,
    startAdornment,
    onChange,
    onInputChange,
    onVisibleDateChange,
    invalidDateLabel,
    ...others
  } = useDefaultProps("HvCalendar", props);
  const {
    classes
  } = useClasses(classesProp);
  const {
    elementId
  } = useContext(HvFormElementContext);
  const elementValue = useContext(HvFormElementValueContext);
  const localValue = value ?? elementValue;
  const localId = id ?? setId(elementId, "single-calendar");
  const rangeMode = isRange(localValue);
  const rightCalendarId = setId(localId, "single-calendar-right");
  const clampedMonth = visibleMonth && visibleMonth % 13 > 0 ? visibleMonth % 13 : 1;
  const singleCalendar = /* @__PURE__ */ jsx(HvSingleCalendar, { id: localId, locale, value: localValue, visibleMonth: clampedMonth, visibleYear, minimumDate, maximumDate, onChange, onInputChange: (evt, date) => onInputChange && onInputChange(evt, date, "left"), onVisibleDateChange, invalidDateLabel, ...others });
  const rangeCalendar = /* @__PURE__ */ jsxs("div", { className: classes.rangeCalendarContainer, children: [
    /* @__PURE__ */ jsx(HvSingleCalendar, { className: classes.singleCalendar, id: localId, locale, value: localValue, visibleMonth: clampedMonth, visibleYear, minimumDate, maximumDate, onChange, onInputChange: (evt, date) => onInputChange && onInputChange(evt, date, "left"), onVisibleDateChange: (event, action, index) => onVisibleDateChange == null ? void 0 : onVisibleDateChange(event, action, index, "left"), invalidDateLabel, ...others }),
    /* @__PURE__ */ jsx(HvSingleCalendar, { className: classes.singleCalendar, id: rightCalendarId, locale, value: localValue, visibleMonth: rightVisibleMonth, visibleYear: rightVisibleYear, minimumDate, maximumDate, onChange, onInputChange: (evt, date) => onInputChange && onInputChange(evt, date, "right"), onVisibleDateChange: (event, action, index) => {
      onVisibleDateChange == null ? void 0 : onVisibleDateChange(event, action, index, "right");
    }, showEndDate: true, invalidDateLabel, ...others })
  ] });
  return /* @__PURE__ */ jsxs("div", { className: classes.root, children: [
    startAdornment,
    rangeMode ? rangeCalendar : singleCalendar
  ] });
};
export {
  HvCalendar,
  staticClasses as calendarClasses
};
//# sourceMappingURL=Calendar.js.map
