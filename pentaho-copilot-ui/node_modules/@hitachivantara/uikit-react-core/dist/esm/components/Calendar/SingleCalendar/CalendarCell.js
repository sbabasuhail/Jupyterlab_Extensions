import { jsx } from "@emotion/react/jsx-runtime";
import { useRef } from "react";
import { isDateRangeProp, isSameDay, isSameMonth, dateInProvidedValueRange, checkIfDateIsDisabled } from "../utils.js";
import { useClasses } from "./CalendarCell.styles.js";
import { staticClasses } from "./CalendarCell.styles.js";
import { HvTypography } from "../../Typography/Typography.js";
const HvCalendarCell = ({
  classes: classesProp,
  onChange,
  onKeyDown,
  calendarValue,
  firstDayOfCurrentMonth,
  value,
  isDateSelectionMode,
  today,
  locale,
  minimumDate,
  maximumDate,
  rangeMode = false,
  ...others
}) => {
  const {
    classes,
    cx
  } = useClasses(classesProp);
  const buttonEl = useRef(null);
  const startDate = isDateRangeProp(calendarValue) ? calendarValue.startDate : void 0;
  const endDate = isDateRangeProp(calendarValue) ? calendarValue.endDate : void 0;
  const isCellToday = isSameDay(value, today);
  const isCellSelected = isSameDay(calendarValue, value);
  const inMonth = isSameMonth(value, firstDayOfCurrentMonth);
  const isCellAfterStartingDate = rangeMode && value && startDate ? value >= startDate : false;
  const isCellStartingDate = rangeMode ? isSameDay(value, startDate) : false;
  const isDateInSelectionRange = calendarValue && rangeMode ? dateInProvidedValueRange(value, calendarValue) : false;
  const isDateDisabled = checkIfDateIsDisabled(value, minimumDate, maximumDate);
  const startBookend = isSameDay(startDate, value);
  const endBookend = isSameDay(endDate, value);
  const isSelecting = isDateSelectionMode && isCellAfterStartingDate;
  const handleClick = (event) => {
    if (value) {
      onChange == null ? void 0 : onChange(event, value);
      if (buttonEl.current)
        setTimeout(() => {
          var _a;
          return (_a = buttonEl == null ? void 0 : buttonEl.current) == null ? void 0 : _a.focus();
        });
    }
  };
  const handleKeyDown = (event) => {
    onKeyDown == null ? void 0 : onKeyDown(event);
  };
  const renderDate = () => /* @__PURE__ */ jsx("button", { ref: buttonEl, type: "button", className: cx(classes.cellContainer, {
    [classes.focusSelection]: inMonth
  }), onClick: handleClick, onKeyDown: handleKeyDown, disabled: isDateDisabled || !inMonth, "data-in-month": inMonth, ...others, children: /* @__PURE__ */ jsx(HvTypography, { variant: isCellToday ? "label" : "body", className: cx(classes.calendarDate, {
    [classes.calendarDateSelected]: inMonth && isCellSelected,
    [classes.calendarDateNotInMonth]: !inMonth,
    [classes.calendarDateInSelectionRange]: inMonth && rangeMode && isDateInSelectionRange,
    [classes.calendarDateDisabled]: isDateDisabled,
    [classes.startBookend]: inMonth && (startBookend && rangeMode || isCellStartingDate && isDateSelectionMode),
    [classes.endBookend]: inMonth && endBookend && rangeMode
  }), children: value && value.getDate() }) });
  return /* @__PURE__ */ jsx("div", { className: cx(classes.dateWrapper, {
    [classes.cellsInRange]: inMonth && rangeMode && isSelecting,
    [classes.cellsOutsideRange]: rangeMode && !isSelecting
  }), "data-calendar-cell": "calendarCell", children: renderDate() });
};
export {
  HvCalendarCell,
  staticClasses as calendarCellClasses,
  HvCalendarCell as default
};
//# sourceMappingURL=CalendarCell.js.map
