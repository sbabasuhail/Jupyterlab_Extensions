import { jsx, jsxs } from "@emotion/react/jsx-runtime";
import { useState, useMemo } from "react";
import isNil from "lodash/isNil";
import { isKey } from "../../../utils/keyboardUtils.js";
import { setId } from "../../../utils/setId.js";
import { isDate, getWeekdayNamesList, isRange } from "../utils.js";
import { generateCalendarModel } from "../model.js";
import { HvCalendarCell } from "./CalendarCell.js";
import { HvCalendarHeader } from "../CalendarHeader/CalendarHeader.js";
import { useClasses } from "./SingleCalendar.styles.js";
import { staticClasses } from "./SingleCalendar.styles.js";
import { HvComposedNavigation } from "../CalendarNavigation/ComposedNavigation/ComposedNavigation.js";
import { HvCalendarWeekLabel } from "../CalendarWeekLabels/CalendarWeekLabels.js";
import { HvMonthSelector } from "../CalendarNavigation/MonthSelector/MonthSelector.js";
const HvSingleCalendar = ({
  classes: classesProp,
  className,
  id,
  locale = "en-US",
  value,
  visibleMonth,
  visibleYear,
  minimumDate,
  maximumDate,
  onChange,
  onInputChange,
  onVisibleDateChange,
  showEndDate,
  showDayOfWeek,
  invalidDateLabel,
  children,
  ...others
}) => {
  var _a, _b;
  const {
    classes,
    cx
  } = useClasses(classesProp);
  const today = /* @__PURE__ */ new Date();
  const localValue = isNil(value) ? today : value;
  const [calViewMode, setCalViewMode] = useState("calendar");
  const rangeMode = isRange(localValue);
  const isDateSelectionMode = rangeMode && !isDate(localValue.endDate);
  const calModel = rangeMode ? generateCalendarModel(localValue.startDate, visibleMonth, visibleYear) : generateCalendarModel(localValue, visibleMonth, visibleYear);
  const firstDayOfCurrentMonth = new Date(calModel.year, calModel.month - 1, 1);
  const firstDayOfCurrentMonthTime = firstDayOfCurrentMonth.getTime();
  const listWeekdayNames = useMemo(() => getWeekdayNamesList(locale, "narrow"), [locale]);
  const handleChange = (event, date) => {
    event == null ? void 0 : event.preventDefault();
    onChange == null ? void 0 : onChange(event, date);
  };
  const handleInputChange = (event, date) => {
    event == null ? void 0 : event.preventDefault();
    onInputChange == null ? void 0 : onInputChange(event, date);
  };
  const getNavChild = (event, siblings, i) => {
    if (isKey(event, "ArrowLeft"))
      return siblings[i - 1];
    if (isKey(event, "ArrowRight"))
      return siblings[i + 1];
    if (isKey(event, "ArrowUp"))
      return siblings[i - 7];
    if (isKey(event, "ArrowDown"))
      return siblings[i + 7];
    return void 0;
  };
  const handleKeyDown = (event) => {
    var _a2;
    const el = document == null ? void 0 : document.activeElement;
    const parent = (_a2 = el == null ? void 0 : el.parentElement) == null ? void 0 : _a2.parentElement;
    const siblings = parent != null ? Array.from(parent.getElementsByClassName(classes.cellContainer)) : [];
    const elIndex = el ? siblings.indexOf(el) : 0;
    if (isKey(event, "Enter")) {
      el.focus();
      return;
    }
    const child = getNavChild(event, siblings, elIndex);
    if (child) {
      const inMonth = child.getAttribute("data-in-month");
      if (inMonth === "true") {
        event == null ? void 0 : event.preventDefault();
        child == null ? void 0 : child.focus();
      }
    }
  };
  const renderCalendarDate = (currentDate) => {
    return /* @__PURE__ */ jsx(HvCalendarCell, { classes, tabIndex: currentDate.getTime() === firstDayOfCurrentMonthTime ? 0 : -1, onChange: handleChange, onKeyDown: handleKeyDown, value: currentDate, today, calendarValue: localValue, rangeMode, isDateSelectionMode, locale, firstDayOfCurrentMonth, maximumDate, minimumDate }, currentDate);
  };
  return /* @__PURE__ */ jsx("div", { className: cx(classes.calendarContainer, className), ...others, children: /* @__PURE__ */ jsxs("div", { id, className: classes.calendarWrapper, children: [
    /* @__PURE__ */ jsx(HvCalendarHeader, { id: setId(id, "header"), locale, onChange: handleInputChange, showEndDate: showEndDate && !isDateSelectionMode, showDayOfWeek, invalidDateLabel }),
    calViewMode === "calendar" && /* @__PURE__ */ jsxs("div", { children: [
      /* @__PURE__ */ jsx(HvComposedNavigation, { id, locale, onChange: onVisibleDateChange, onViewModeChange: setCalViewMode, visibleYear: visibleYear || today.getFullYear(), visibleMonth: visibleMonth || today.getMonth() + 1 }),
      /* @__PURE__ */ jsxs("div", { className: classes.calendarGrid, "aria-controls": (_b = (_a = HvCalendarHeader) == null ? void 0 : _a[0]) == null ? void 0 : _b.id, children: [
        /* @__PURE__ */ jsx(HvCalendarWeekLabel, { labels: listWeekdayNames }),
        calModel.dates.map(renderCalendarDate)
      ] })
    ] }),
    calViewMode === "monthly" && /* @__PURE__ */ jsx(HvMonthSelector, { id, locale, onChange: onVisibleDateChange, onViewModeChange: setCalViewMode, visibleMonth: visibleMonth || today.getMonth() + 1, rangeMode })
  ] }) });
};
export {
  HvSingleCalendar,
  staticClasses as singleCalendarClasses
};
//# sourceMappingURL=SingleCalendar.js.map
