{"version":3,"file":"CheckBox.js","sources":["../../../../src/components/CheckBox/CheckBox.tsx"],"sourcesContent":["import { useCallback, useState } from \"react\";\n\nimport { useDefaultProps } from \"@core/hooks/useDefaultProps\";\nimport { useUniqueId } from \"@core/hooks/useUniqueId\";\nimport { useControlled } from \"@core/hooks/useControlled\";\nimport { setId } from \"@core/utils/setId\";\nimport {\n  HvBaseCheckBox,\n  HvBaseCheckBoxProps,\n} from \"@core/components/BaseCheckBox\";\nimport {\n  HvLabelProps,\n  HvFormStatus,\n  HvWarningText,\n  isInvalid,\n  HvFormElement,\n  HvLabel,\n} from \"@core/components/Forms\";\nimport { ExtractNames } from \"@core/utils/classes\";\n\nimport { staticClasses, useClasses } from \"./CheckBox.styles\";\n\nexport { staticClasses as checkBoxClasses };\n\nexport type HvCheckBoxClasses = ExtractNames<typeof useClasses>;\n\nexport interface HvCheckBoxProps extends Omit<HvBaseCheckBoxProps, \"classes\"> {\n  /**\n   * The label of the form element.\n   *\n   * The form element must be labeled for accessibility reasons.\n   * If not provided, an aria-label or aria-labelledby must be inputted via inputProps.\n   */\n  label?: React.ReactNode;\n  /**\n   * Properties passed on to the label element.\n   */\n  labelProps?: HvLabelProps;\n  /**\n   * The status of the form element.\n   *\n   * Valid is correct, invalid is incorrect and standBy means no validations have run.\n   *\n   * When uncontrolled and unspecified it will default to \"standBy\" and change to either \"valid\"\n   * or \"invalid\" after any change to the state.\n   */\n  status?: HvFormStatus;\n  /**\n   * The error message to show when the validation status is \"invalid\".\n   *\n   * Defaults to \"Required\" when the status is uncontrolled and no `aria-errormessage` is provided.\n   */\n  statusMessage?: React.ReactNode;\n  /**\n   * A Jss Object used to override or extend the styles applied to the checkbox.\n   */\n  classes?: HvCheckBoxClasses;\n}\n\n/**\n * A Checkbox is a mechanism that allows the user to select one or more options.\n *\n * Usually used in a Checkbox Group to present the user with a range of options from\n * which the user <b>may select any number of options</b> to complete their task.\n *\n * It can also be used individually to represent the toggle of a single option, when\n * the Toggle Switch and Toggle Button aren't more appropriate.\n */\nexport const HvCheckBox = (props: HvCheckBoxProps) => {\n  const {\n    id,\n    classes: classesProp,\n    className,\n    name,\n    checked,\n    status,\n    indeterminate,\n    statusMessage,\n    label,\n    labelProps,\n    inputProps,\n    value = \"on\",\n    required = false,\n    readOnly = false,\n    disabled = false,\n    semantic = false,\n    defaultChecked = false,\n    \"aria-label\": ariaLabel,\n    \"aria-labelledby\": ariaLabelledBy,\n    \"aria-describedby\": ariaDescribedBy,\n    \"aria-errormessage\": ariaErrorMessage,\n    onChange,\n    onFocusVisible,\n    onBlur,\n    ...others\n  } = useDefaultProps(\"HvCheckBox\", props);\n\n  const { classes, cx } = useClasses(classesProp);\n\n  const elementId = useUniqueId(id, \"hvcheckbox\");\n\n  const [focusVisible, setFocusVisible] = useState<boolean>(false);\n\n  const [validationState, setValidationState] = useControlled(\n    status,\n    \"standBy\"\n  );\n\n  const [validationMessage] = useControlled(statusMessage, \"Required\");\n\n  const [isChecked, setIsChecked] = useControlled(\n    checked,\n    Boolean(defaultChecked)\n  );\n\n  const [isIndeterminate, setIsIndeterminate] = useControlled(\n    checked !== undefined ? indeterminate : undefined,\n    Boolean(indeterminate)\n  );\n\n  const isStateInvalid = isInvalid(validationState);\n\n  const onChangeCallback = useCallback<\n    NonNullable<HvBaseCheckBoxProps[\"onChange\"]>\n  >(\n    (event, newChecked) => {\n      setIsChecked(() => {\n        // This will only run if uncontrolled\n        setIsIndeterminate(false);\n\n        if (required && !newChecked) {\n          setValidationState(\"invalid\");\n        } else {\n          setValidationState(\"valid\");\n        }\n\n        return newChecked;\n      });\n\n      onChange?.(event, newChecked, value);\n    },\n    [\n      onChange,\n      required,\n      setIsChecked,\n      setIsIndeterminate,\n      setValidationState,\n      value,\n    ]\n  );\n\n  const onFocusVisibleCallback: HvBaseCheckBoxProps[\"onBlur\"] = (event) => {\n    setFocusVisible(true);\n    onFocusVisible?.(event);\n  };\n\n  const onBlurCallback: HvBaseCheckBoxProps[\"onBlur\"] = (event) => {\n    setFocusVisible(false);\n    onBlur?.(event);\n  };\n\n  // The error message area will only be created if:\n  //   - an external element that provides an error message isn't identified via aria-errormessage AND\n  //   - both status and statusMessage properties are being controlled OR\n  //   - status is uncontrolled and required is true\n  const canShowError =\n    ariaErrorMessage == null &&\n    ((status !== undefined && statusMessage !== undefined) ||\n      (status === undefined && required));\n\n  const hasLabel = label != null;\n\n  let errorMessageId;\n  if (isStateInvalid) {\n    errorMessageId = canShowError\n      ? setId(elementId, \"error\")\n      : ariaErrorMessage;\n  }\n\n  const checkbox = (\n    <HvBaseCheckBox\n      id={hasLabel ? setId(elementId, \"input\") : setId(id, \"input\")}\n      name={name}\n      className={cx(classes.checkbox, {\n        [classes.invalidCheckbox]: isStateInvalid,\n      })}\n      disabled={disabled}\n      readOnly={readOnly}\n      required={required}\n      onChange={onChangeCallback}\n      value={value}\n      checked={isChecked}\n      indeterminate={isIndeterminate}\n      semantic={semantic}\n      inputProps={{\n        \"aria-invalid\": isStateInvalid ? true : undefined,\n        \"aria-errormessage\": errorMessageId,\n        \"aria-label\": ariaLabel,\n        \"aria-labelledby\": ariaLabelledBy,\n        \"aria-describedby\": ariaDescribedBy,\n        ...inputProps,\n      }}\n      onFocusVisible={onFocusVisibleCallback}\n      onBlur={onBlurCallback}\n      {...others}\n    />\n  );\n\n  return (\n    <HvFormElement\n      id={id}\n      name={name}\n      status={validationState}\n      disabled={disabled}\n      required={required}\n      readOnly={readOnly}\n      className={cx(\n        classes.root,\n        { [classes.focusVisible]: !!(focusVisible && label) },\n        className\n      )}\n    >\n      {hasLabel ? (\n        <div\n          className={cx(classes.container, {\n            [classes.disabled]: disabled,\n            [classes.invalidContainer]: isStateInvalid,\n          })}\n        >\n          {checkbox}\n          <HvLabel\n            id={setId(elementId, \"label\")}\n            htmlFor={setId(elementId, \"input\")}\n            label={label}\n            className={classes.label}\n            {...labelProps}\n          />\n        </div>\n      ) : (\n        checkbox\n      )}\n      {canShowError && (\n        <HvWarningText\n          id={setId(elementId, \"error\")}\n          disableAdornment={!hasLabel}\n          hideText={!hasLabel}\n          disableBorder\n        >\n          {validationMessage}\n        </HvWarningText>\n      )}\n    </HvFormElement>\n  );\n};\n"],"names":["HvCheckBox","props","id","classes","classesProp","className","name","checked","status","indeterminate","statusMessage","label","labelProps","inputProps","value","required","readOnly","disabled","semantic","defaultChecked","ariaLabel","ariaLabelledBy","ariaDescribedBy","ariaErrorMessage","onChange","onFocusVisible","onBlur","others","useDefaultProps","cx","useClasses","elementId","useUniqueId","focusVisible","setFocusVisible","useState","validationState","setValidationState","useControlled","validationMessage","isChecked","setIsChecked","Boolean","isIndeterminate","setIsIndeterminate","undefined","isStateInvalid","isInvalid","onChangeCallback","useCallback","event","newChecked","onFocusVisibleCallback","onBlurCallback","canShowError","hasLabel","errorMessageId","setId","checkbox","invalidCheckbox","root","container","invalidContainer"],"mappings":"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"}