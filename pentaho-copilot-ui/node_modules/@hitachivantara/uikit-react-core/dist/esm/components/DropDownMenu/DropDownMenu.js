import { jsx } from "@emotion/react/jsx-runtime";
import { useMemo } from "react";
import { useDefaultProps } from "../../hooks/useDefaultProps.js";
import { theme } from "@hitachivantara/uikit-styles";
import { MoreOptionsVertical } from "@hitachivantara/uikit-react-icons";
import { useUniqueId } from "../../hooks/useUniqueId.js";
import { useControlled } from "../../hooks/useControlled.js";
import { isKey } from "../../utils/keyboardUtils.js";
import { setId } from "../../utils/setId.js";
import { getPrevNextFocus } from "../../utils/focusableElementFinder.js";
import { useClasses } from "./DropDownMenu.styles.js";
import { staticClasses } from "./DropDownMenu.styles.js";
import { HvBaseDropdown } from "../BaseDropdown/BaseDropdown.js";
import { HvButton } from "../Button/Button.js";
import { HvPanel } from "../Panel/Panel.js";
import { HvList } from "../List/List.js";
const HvDropDownMenu = (props) => {
  const {
    id: idProp,
    classes: classesProp,
    className,
    icon,
    placement = "right",
    dataList,
    disablePortal = false,
    onToggle,
    onClick,
    keepOpened = true,
    disabled = false,
    expanded,
    defaultExpanded = false,
    category = "secondaryGhost",
    ...others
  } = useDefaultProps("HvDropDownMenu", props);
  const {
    classes,
    cx
  } = useClasses(classesProp);
  const [open, setOpen] = useControlled(expanded, Boolean(defaultExpanded));
  const id = useUniqueId(idProp, "dropdown-menu");
  const focusNodes = getPrevNextFocus(setId(id, "icon-button"));
  const listId = setId(id, "list");
  const handleClose = (event) => {
    setOpen(false);
    onToggle == null ? void 0 : onToggle(event, false);
  };
  const handleKeyDown = (event) => {
    if (isKey(event, "Tab")) {
      const node = event.shiftKey ? focusNodes.prevFocus : focusNodes.nextFocus;
      if (node)
        setTimeout(() => node.focus(), 0);
      handleClose(event);
    }
    event.preventDefault();
  };
  const setFocusToContent = (containerRef) => {
    var _a;
    (_a = containerRef == null ? void 0 : containerRef.getElementsByTagName("li")[0]) == null ? void 0 : _a.focus();
  };
  const condensed = useMemo(() => dataList.every((el) => !el.icon), [dataList]);
  const popperStyle = {
    style: {
      zIndex: theme.zIndices.tooltip,
      width: "auto",
      position: "relative"
    }
  };
  return /* @__PURE__ */ jsx(HvBaseDropdown, { id, className: cx(classes.container, className), classes: {
    root: classes.root,
    container: classes.baseContainer
  }, expanded: open && !disabled, component: /* @__PURE__ */ jsx(HvButton, { icon: true, variant: category, id: setId(id, "icon-button"), className: cx(classes.icon, {
    [classes.iconSelected]: open
  }), "aria-expanded": open, disabled, "aria-label": "Dropdown menu", "aria-haspopup": "menu", children: icon || /* @__PURE__ */ jsx(MoreOptionsVertical, { "aria-hidden": true, color: disabled ? "secondary_60" : void 0 }) }), placement, variableWidth: true, disablePortal, onToggle: (e, s) => {
    setOpen(s);
    onToggle == null ? void 0 : onToggle(e, s);
  }, disabled, onContainerCreation: setFocusToContent, popperProps: popperStyle, ...others, children: /* @__PURE__ */ jsx(HvPanel, { className: classes.menuListRoot, children: /* @__PURE__ */ jsx(HvList, { id: listId, values: dataList, selectable: false, condensed, onClick: (event, item) => {
    if (!keepOpened)
      handleClose(event);
    onClick == null ? void 0 : onClick(event, item);
  }, onKeyDown: handleKeyDown, classes: {
    root: classes.menuList
  } }) }) });
};
export {
  HvDropDownMenu,
  staticClasses as dropDownMenuClasses
};
//# sourceMappingURL=DropDownMenu.js.map
