import { jsx, jsxs } from "@emotion/react/jsx-runtime";
import MuiDialogTitle from "@mui/material/DialogTitle";
import { useDefaultProps } from "../../../hooks/useDefaultProps.js";
import { iconVariant } from "../../../utils/iconVariant.js";
import { useTheme } from "../../../hooks/useTheme.js";
import { useClasses } from "./Title.styles.js";
import { staticClasses } from "./Title.styles.js";
import { HvTypography } from "../../Typography/Typography.js";
const HvDialogTitle = (props) => {
  const {
    classes: classesProp,
    className,
    children,
    variant = "default",
    showIcon = true,
    customIcon = null,
    ...others
  } = useDefaultProps("HvDialogTitle", props);
  const {
    classes,
    css,
    cx
  } = useClasses(classesProp);
  const {
    activeTheme
  } = useTheme();
  const isString = typeof children === "string";
  const {
    fullscreen
  } = others;
  delete others.fullscreen;
  const icon = customIcon || showIcon && iconVariant(variant);
  return /* @__PURE__ */ jsx(MuiDialogTitle, { className: cx(!fullscreen && css({
    flex: 1
  }), classes.root, {
    [classes.fullscreen]: fullscreen
  }, className), ...others, children: /* @__PURE__ */ jsxs("div", { className: classes.messageContainer, children: [
    icon,
    /* @__PURE__ */ jsxs("div", { className: cx({
      [classes.textWithIcon]: !!icon
    }), children: [
      !isString && children,
      isString && /* @__PURE__ */ jsx(HvTypography, { variant: activeTheme == null ? void 0 : activeTheme.dialog.titleVariant, children })
    ] })
  ] }) });
};
export {
  HvDialogTitle,
  staticClasses as dialogTitleClasses
};
//# sourceMappingURL=Title.js.map
