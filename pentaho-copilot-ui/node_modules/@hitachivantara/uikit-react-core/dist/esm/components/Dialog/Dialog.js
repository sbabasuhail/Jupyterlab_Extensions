import { jsx, jsxs } from "@emotion/react/jsx-runtime";
import React__default, { useCallback, useMemo } from "react";
import { useDefaultProps } from "../../hooks/useDefaultProps.js";
import MuiDialog from "@mui/material/Dialog";
import MuiBackdrop from "@mui/material/Backdrop";
import { Close } from "@hitachivantara/uikit-react-icons";
import { theme } from "@hitachivantara/uikit-styles";
import { setId } from "../../utils/setId.js";
import { withTooltip } from "../../hocs/withTooltip.js";
import { useTheme } from "../../hooks/useTheme.js";
import { hexToRgbA } from "../../utils/hexToRgbA.js";
import { useClasses } from "./Dialog.styles.js";
import { staticClasses } from "./Dialog.styles.js";
import { HvButton } from "../Button/Button.js";
const HvDialog = (props) => {
  const {
    variant,
    classes: classesProp,
    className,
    id,
    children,
    open = false,
    onClose,
    firstFocusable,
    buttonTitle = "Close",
    fullscreen = false,
    disableBackdropClick = false,
    ...others
  } = useDefaultProps("HvDialog", props);
  const {
    classes,
    css,
    cx
  } = useClasses(classesProp);
  delete others.fullScreen;
  const {
    rootId,
    colors
  } = useTheme();
  const wrappedClose = useCallback((event, bypassValidation = false, reason) => {
    if (bypassValidation || !disableBackdropClick) {
      onClose == null ? void 0 : onClose(event, reason);
    }
  }, [onClose, disableBackdropClick]);
  const measuredRef = useCallback(() => {
    if (!firstFocusable)
      return;
    const element = document.getElementById(firstFocusable);
    element == null ? void 0 : element.focus();
  }, [firstFocusable]);
  const closeButtonDisplay = () => /* @__PURE__ */ jsx(Close, { role: "presentation" });
  const CloseButtonTooltipWrapper = buttonTitle ? withTooltip(closeButtonDisplay, buttonTitle, "top") : closeButtonDisplay;
  const slots = useMemo(() => ({
    backdrop: (backdropProps) => /* @__PURE__ */ jsx(MuiBackdrop, { open, onClick: wrappedClose, ...backdropProps })
  }), [open, wrappedClose]);
  return /* @__PURE__ */ jsxs(MuiDialog, { container: typeof window !== "undefined" ? (
    // TODO: review
    // eslint-disable-next-line ssr-friendly/no-dom-globals-in-react-fc
    document.getElementById(rootId || "") || document.body
  ) : void 0, className: cx(classes.root, className), classes: {
    container: css({
      position: "relative"
    })
  }, id, ref: measuredRef, open, fullScreen: fullscreen, onClose: (event, reason) => wrappedClose(event, void 0, reason), slots, slotProps: {
    backdrop: {
      classes: {
        root: cx(css({
          background: hexToRgbA((colors == null ? void 0 : colors.atmo4) || theme.colors.atmo4, 0.8)
        }), classes.background)
      }
    }
  }, PaperProps: {
    classes: {
      root: cx(css({
        position: "absolute"
      }), classes.paper, variant && cx(classes.statusBar, classes[variant]), {
        [classes.fullscreen]: fullscreen
      })
    }
  }, "aria-modal": true, ...others, children: [
    /* @__PURE__ */ jsx(HvButton, { id: setId(id, "close"), className: classes.closeButton, variant: "secondaryGhost", onClick: (event) => wrappedClose(event, true, void 0), "aria-label": buttonTitle, children: /* @__PURE__ */ jsx(CloseButtonTooltipWrapper, {}) }),
    children && typeof children === "object" ? React__default.Children.map(children, (c) => c && React__default.cloneElement(c, {
      fullscreen
    })) : children
  ] });
};
export {
  HvDialog,
  staticClasses as dialogClasses
};
//# sourceMappingURL=Dialog.js.map
