{"version":3,"file":"BannerContent.js","sources":["../../../../../src/components/Banner/BannerContent/BannerContent.tsx"],"sourcesContent":["import { forwardRef } from \"react\";\n\nimport SnackbarContent, {\n  SnackbarContentProps as MuiSnackbarContentProps,\n} from \"@mui/material/SnackbarContent\";\n\nimport { HvBaseProps } from \"@core/types/generic\";\nimport { iconVariant } from \"@core/utils/iconVariant\";\nimport { ExtractNames } from \"@core/utils/classes\";\nimport { HvActionGeneric } from \"@core/components/ActionsGeneric\";\n\nimport { HvBannerActionPosition, HvBannerVariant } from \"../types\";\nimport { HvActionContainer, HvActionContainerProps } from \"./ActionContainer\";\nimport { HvMessageContainer } from \"./MessageContainer\";\nimport { useClasses, staticClasses } from \"./BannerContent.styles\";\n\nexport { staticClasses as bannerContentClasses };\n\nexport type HvBannerContentClasses = ExtractNames<typeof useClasses>;\n\nexport interface HvBannerContentProps\n  extends Omit<MuiSnackbarContentProps, \"variant\" | \"classes\" | \"onClose\">,\n    HvBaseProps {\n  /** The message to display. */\n  content?: string;\n  /** Variant of the snackbar. */\n  variant?: HvBannerVariant;\n  /** Controls if the associated icon to the variant should be shown. */\n  showIcon?: boolean;\n  /** Custom icon to replace the variant default. */\n  customIcon?: React.ReactNode;\n  /** onClose function. */\n  onClose?: (event: React.MouseEvent<HTMLButtonElement>) => void;\n  /** Actions to display on the right side. */\n  actions?: React.ReactNode | HvActionGeneric[];\n  /**  The callback function ran when an action is triggered, receiving `action` as param */\n  actionsCallback?: (\n    event: React.SyntheticEvent,\n    id: string,\n    action: HvActionGeneric\n  ) => void;\n  /** The position property of the header. */\n  actionsPosition?: HvBannerActionPosition;\n  /** The props to pass down to the Action Container. */\n  actionProps?: HvActionContainerProps;\n  /** A Jss Object used to override or extend the styles applied to the component. */\n  classes?: HvBannerContentClasses;\n}\n\nexport const HvBannerContent = forwardRef<HTMLDivElement, HvBannerContentProps>(\n  (props, ref) => {\n    const {\n      id,\n      classes: classesProp,\n      showIcon = false,\n      customIcon,\n      variant = \"default\",\n      onClose,\n      actions,\n      actionsCallback,\n      actionsPosition = \"auto\",\n      content,\n      actionProps,\n      ...others\n    } = props;\n    const { classes, cx } = useClasses(classesProp);\n    const icon = customIcon || (showIcon && iconVariant(variant, \"base_dark\"));\n\n    // default to inline\n    // this might try to be more intelligent in the future,\n    // taking into account the content length, available space,\n    // number of actions, etc..\n    const effectiveActionsPosition =\n      actionsPosition === \"auto\" ? \"inline\" : actionsPosition;\n\n    return (\n      <div className={classes.outContainer}>\n        <SnackbarContent\n          ref={ref}\n          id={id}\n          classes={{\n            root: classes.root,\n            message: classes.message,\n            action: classes.action,\n          }}\n          className={cx(classes?.baseVariant, classes?.[variant])}\n          message={\n            <HvMessageContainer\n              id={id}\n              icon={icon}\n              {...(effectiveActionsPosition === \"inline\" && {\n                actionsOnMessage: actions,\n                actionsOnMessageCallback: actionsCallback,\n              })}\n              message={content}\n            />\n          }\n          action={\n            <HvActionContainer\n              id={id}\n              onClose={onClose}\n              {...(effectiveActionsPosition === \"bottom-right\" && {\n                action: actions,\n                actionCallback: actionsCallback,\n              })}\n              {...actionProps}\n            />\n          }\n          {...others}\n        />\n      </div>\n    );\n  }\n);\n"],"names":["HvBannerContent","forwardRef","props","ref","id","classes","classesProp","showIcon","customIcon","variant","onClose","actions","actionsCallback","actionsPosition","content","actionProps","others","cx","useClasses","icon","iconVariant","effectiveActionsPosition","outContainer","root","message","action","baseVariant","actionsOnMessage","actionsOnMessageCallback","actionCallback"],"mappings":";;;;;;;;AAiDO,MAAMA,kBAAkBC,WAC7B,CAACC,OAAOC,QAAQ;AACR,QAAA;AAAA,IACJC;AAAAA,IACAC,SAASC;AAAAA,IACTC,WAAW;AAAA,IACXC;AAAAA,IACAC,UAAU;AAAA,IACVC;AAAAA,IACAC;AAAAA,IACAC;AAAAA,IACAC,kBAAkB;AAAA,IAClBC;AAAAA,IACAC;AAAAA,IACA,GAAGC;AAAAA,EACDd,IAAAA;AACE,QAAA;AAAA,IAAEG;AAAAA,IAASY;AAAAA,EAAAA,IAAOC,WAAWZ,WAAW;AAC9C,QAAMa,OAAOX,cAAeD,YAAYa,YAAYX,SAAS,WAAW;AAMlEY,QAAAA,2BACJR,oBAAoB,SAAS,WAAWA;AAGxC,SAAA,oBAAC,SAAI,WAAWR,QAAQiB,cACtB,UAAC,oBAAA,iBAAA,EACC,KACA,IACA,SAAS;AAAA,IACPC,MAAMlB,QAAQkB;AAAAA,IACdC,SAASnB,QAAQmB;AAAAA,IACjBC,QAAQpB,QAAQoB;AAAAA,EAAAA,GAElB,WAAWR,GAAGZ,mCAASqB,aAAarB,mCAAUI,QAAQ,GACtD,6BACG,oBACC,EAAA,IACA,SACKY,6BAA6B,YAAY;AAAA,IAC5CM,kBAAkBhB;AAAAA,IAClBiB,0BAA0BhB;AAAAA,EAC5B,GACA,SAASE,SACT,GAEJ,QACG,oBAAA,mBAAA,EACC,IACA,SACA,GAAKO,6BAA6B,kBAAkB;AAAA,IAClDI,QAAQd;AAAAA,IACRkB,gBAAgBjB;AAAAA,EAAAA,GAElB,GAAIG,YAAAA,IAGJC,GAAAA,OAAO,CAAA,EAEf,CAAA;AAEJ,CACF;"}