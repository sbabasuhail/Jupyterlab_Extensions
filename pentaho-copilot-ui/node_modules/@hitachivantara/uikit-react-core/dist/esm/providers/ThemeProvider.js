import { jsx } from "@emotion/react/jsx-runtime";
import { useState, useEffect, useCallback, useMemo } from "react";
import { parseTheme } from "@hitachivantara/uikit-styles";
import { HvThemeContext, EmotionContext } from "@hitachivantara/uikit-react-shared";
import { EmotionContext as EmotionContext2, HvThemeContext as HvThemeContext2, defaultCacheKey, defaultEmotionCache } from "@hitachivantara/uikit-react-shared";
import { createTheme, ThemeProvider } from "@mui/material/styles";
import { setElementAttrs } from "../utils/theme.js";
const HvThemeProvider = ({
  children,
  themes: themesList,
  theme,
  emotionCache,
  colorMode,
  themeRootId: rootId
}) => {
  const initTheme = parseTheme(themesList, theme, colorMode);
  const [parsedTheme, setParsedTheme] = useState(initTheme);
  const [activeTheme, setActiveTheme] = useState(parsedTheme.theme);
  const [selectedTheme, setSelectedTheme] = useState(parsedTheme.selectedTheme);
  const [selectedMode, setThemeMode] = useState(parsedTheme.selectedMode);
  const [colorModes, setColorModes] = useState(parsedTheme.colorModes);
  const [themes, setThemes] = useState(themesList.map((t) => t.name));
  useEffect(() => {
    const pTheme = parseTheme(themesList, theme, colorMode);
    setThemes(themesList.map((t) => t.name));
    setParsedTheme(pTheme);
  }, [themesList, theme, colorMode]);
  useEffect(() => {
    setActiveTheme(parsedTheme.theme);
    setSelectedTheme(parsedTheme.selectedTheme);
    setThemeMode(parsedTheme.selectedMode);
    setColorModes(parsedTheme.colorModes);
    setElementAttrs(parsedTheme.selectedTheme, parsedTheme.selectedMode, parsedTheme.colorScheme, rootId);
  }, [parsedTheme, rootId]);
  const changeTheme = useCallback((newTheme = selectedTheme, newMode = selectedMode) => {
    const pTheme = parseTheme(themesList, newTheme, newMode);
    setParsedTheme(pTheme);
  }, [selectedMode, selectedTheme, themesList]);
  const value = useMemo(() => ({
    themes,
    colorModes,
    activeTheme,
    selectedTheme,
    selectedMode,
    changeTheme,
    rootId
  }), [themes, colorModes, activeTheme, selectedTheme, selectedMode, changeTheme, rootId]);
  const MuiTheme = createTheme({
    breakpoints: {
      values: {
        ...activeTheme.breakpoints.values
      }
    }
  });
  const emotionCacheValue = useMemo(() => ({
    cache: emotionCache
  }), [emotionCache]);
  return /* @__PURE__ */ jsx(ThemeProvider, { theme: MuiTheme, children: /* @__PURE__ */ jsx(HvThemeContext.Provider, { value, children: /* @__PURE__ */ jsx(EmotionContext.Provider, { value: emotionCacheValue, children }) }) });
};
export {
  EmotionContext2 as EmotionContext,
  HvThemeContext2 as HvThemeContext,
  HvThemeProvider,
  defaultCacheKey,
  defaultEmotionCache
};
//# sourceMappingURL=ThemeProvider.js.map
