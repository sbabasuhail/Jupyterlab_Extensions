import { jsx } from "@emotion/react/jsx-runtime";
import { useState } from "react";
import { HvTooltip } from "../components/Tooltip/Tooltip.js";
import { HvTypography } from "../components/Typography/Typography.js";
const styles = {
  truncate: {
    overflow: "hidden",
    textOverflow: "ellipsis",
    whiteSpace: "nowrap"
  }
};
const withTooltip = (Component, label = "", placement, hideTooltip, tooltipProps, tooltipContainerProps) => (props) => {
  const [isHoverDisabled, setIsHoverDisabled] = useState(false);
  const [open, setOpen] = useState(false);
  const title = /* @__PURE__ */ jsx(HvTypography, { children: label });
  const handleMouseEnter = (event) => {
    const isHidden = hideTooltip == null ? void 0 : hideTooltip(event);
    setIsHoverDisabled(isHidden);
    setOpen(!isHidden);
  };
  const handleMouseLeave = () => {
    setIsHoverDisabled(false);
    setOpen(false);
  };
  return /* @__PURE__ */ jsx(HvTooltip, { style: {
    ...styles.truncate
  }, disableHoverListener: isHoverDisabled, disableFocusListener: true, disableTouchListener: true, title, open, placement, ...tooltipProps, children: /* @__PURE__ */ jsx("div", { ...tooltipContainerProps, onMouseEnter: handleMouseEnter, onMouseLeave: handleMouseLeave, children: /* @__PURE__ */ jsx(Component, { ...props }) }) });
};
export {
  withTooltip
};
//# sourceMappingURL=withTooltip.js.map
