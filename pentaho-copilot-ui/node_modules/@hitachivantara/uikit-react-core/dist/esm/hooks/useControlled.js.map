{"version":3,"file":"useControlled.js","sources":["../../../src/hooks/useControlled.ts"],"sourcesContent":["// based in https://raw.githubusercontent.com/mui-org/material-ui/next/packages/material-ui/src/utils/useControlled.js\n// modifications:\n// 1. renamed default to initialState, to convey the same meaning of the useState hook.\n// 2. removed the console error when initialState changes; that is acceptable and just ignored, like in useState.\n// 3. the console error regarding switching from controlled to uncontrolled (or vice-versa) is sent synchronously\n//    so the stacktrace shows the caller\n// 4. given that, the hook signature was simplified, no need for metadata\n\nimport { useRef, useState, useCallback } from \"react\";\n\nexport const useControlled = (controlledProp, initialState) => {\n  const { current: isControlled } = useRef(controlledProp !== undefined);\n  const [valueState, setValue] = useState(initialState);\n  const value = isControlled ? controlledProp : valueState;\n\n  if (\n    process.env.NODE_ENV !== \"production\" &&\n    isControlled !== (controlledProp !== undefined)\n  ) {\n    // eslint-disable-next-line no-console\n    console.error(\n      [\n        `A component is changing the ${\n          isControlled ? \"\" : \"un\"\n        }controlled state to be ${isControlled ? \"un\" : \"\"}controlled.`,\n        \"Elements should not switch from uncontrolled to controlled (or vice versa).\",\n        \"Decide between using a controlled or uncontrolled element for the lifetime of the component.\",\n        \"The nature of the state is determined during the first render, it's considered controlled if the value is not `undefined`.\",\n      ].join(\"\\n\")\n    );\n  }\n\n  const setValueIfUncontrolled = useCallback(\n    (newValue) => {\n      if (!isControlled) {\n        setValue(newValue);\n      }\n    },\n    [isControlled]\n  );\n\n  return [value, setValueIfUncontrolled];\n};\n"],"names":["useControlled","controlledProp","initialState","current","isControlled","useRef","undefined","valueState","setValue","useState","value","process","env","NODE_ENV","console","error","join","setValueIfUncontrolled","useCallback","newValue"],"mappings":";AAUaA,MAAAA,gBAAgBA,CAACC,gBAAgBC,iBAAiB;AACvD,QAAA;AAAA,IAAEC,SAASC;AAAAA,EAAa,IAAIC,OAAOJ,mBAAmBK,MAAS;AACrE,QAAM,CAACC,YAAYC,QAAQ,IAAIC,SAASP,YAAY;AAC9CQ,QAAAA,QAAQN,eAAeH,iBAAiBM;AAE9C,MACEI,QAAQC,IAAIC,aAAa,gBACzBT,kBAAkBH,mBAAmBK,SACrC;AAEAQ,YAAQC,MACN,CACG,+BACCX,eAAe,KAAK,IACrB,0BAAyBA,eAAe,OAAO,EAAG,eACnD,+EACA,gGACA,4HAA4H,EAC5HY,KAAK,IAAI,CACb;AAAA,EACF;AAEMC,QAAAA,yBAAyBC,YAC5BC,CAAa,aAAA;AACZ,QAAI,CAACf,cAAc;AACjBI,eAASW,QAAQ;AAAA,IACnB;AAAA,EAAA,GAEF,CAACf,YAAY,CACf;AAEO,SAAA,CAACM,OAAOO,sBAAsB;AACvC;"}