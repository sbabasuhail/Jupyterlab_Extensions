{"version":3,"file":"config-utils.js","sourceRoot":"","sources":["../src/config-utils.ts"],"names":[],"mappings":"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","sourcesContent":["import fs from \"fs\";\nimport path from \"path\";\n\nimport { register, createEsmHooks } from \"ts-node\";\n\nimport type {\n  HvAppShellAppsConfig,\n  HvAppShellConfig\n} from \"@hitachivantara/app-shell-shared\";\n\nimport type { AppShellVitePluginOptions } from \"./vite-plugin.js\";\n\nimport { require } from \"./nodeModule.js\";\n\ncreateEsmHooks(\n  register({\n    transpileOnly: true,\n    moduleTypes: {\n      \"app-shell.config.ts\": \"cjs\"\n    }\n  })\n);\n\nexport interface ConfigReplacement {\n  token: string;\n  value: string;\n}\n\nexport type AppShellConfigFunction = (\n  pluginOptions: AppShellVitePluginOptions,\n  env: Record<string, string>\n) => HvAppShellConfig;\n\nexport const DEFAULT_CONFIG_FILES = [\n  \"app-shell.config.ts\",\n  \"app-shell.config.js\",\n  \"app-shell.config.json\"\n];\n\nexport function findAppShellConfigFile(root: string): string | undefined {\n  const filename = DEFAULT_CONFIG_FILES.find(file =>\n    fs.existsSync(path.resolve(root, file))\n  );\n\n  if (filename) {\n    return path.resolve(root, filename);\n  }\n\n  return undefined;\n}\n\nexport function loadConfigFile(\n  appShellConfigFile: string | undefined,\n  opts: AppShellVitePluginOptions,\n  env: Record<string, string> = {}\n): HvAppShellConfig {\n  if (!appShellConfigFile) {\n    // an empty configuration is actually valid\n    // and with the automatic views option, it can even make sense\n    return {};\n  }\n\n  if (appShellConfigFile.endsWith(\".json\")) {\n    let appShellConfigRaw = fs.readFileSync(appShellConfigFile, \"utf-8\");\n\n    // token replacement is only supported for json files\n    opts.configReplacements?.forEach(item => {\n      appShellConfigRaw = appShellConfigRaw.replaceAll(\n        `@@${item.token}@@`,\n        item.value\n      );\n    });\n\n    return JSON.parse(appShellConfigRaw) as HvAppShellConfig;\n  }\n\n  // using require instead of import to avoid using --experimental-loader ts-node/esm\n  // eslint-disable-next-line import/no-dynamic-require\n  const loadedAppShellConfig = require(appShellConfigFile).default as\n    | AppShellConfigFunction\n    | HvAppShellConfig;\n\n  if (typeof loadedAppShellConfig === \"function\") {\n    return loadedAppShellConfig(opts, env);\n  }\n\n  return loadedAppShellConfig;\n}\n\n/**\n * Return the main app (identified by @self)\n * @param appShellConfig The App shell configuration\n */\nexport const getMainApp = (\n  appShellConfig: HvAppShellConfig\n): HvAppShellAppsConfig | undefined => {\n  return appShellConfig.apps?.filter(app => app.id === \"@self\")[0];\n};\n\n/**\n * Return the public path to be use by vite to launch the application.\n * Value is obtained by returning the baseUrl value of the main app {@link #getMainApp}\n * @param appShellConfig The App shell configuration\n */\nexport const getPublicPath = (appShellConfig: HvAppShellConfig): string => {\n  const mainApp = getMainApp(appShellConfig);\n  if (!mainApp) {\n    return \"/\";\n  }\n  const url = mainApp.baseUrl;\n  try {\n    return new URL(url).pathname;\n  } catch {\n    return url;\n  }\n};\n\n/**\n *  Returns the modules to be created by the build of the app.\n *  The list of modules is defined by the app-shell-config.json file routes ( limited to the @self app)\n *  The bundles will be created following the original directories structure ( having the src folder path removed)\n *\n * @param root Project root directory.\n * @param appShellConfig The App Shell configuration.\n * @param selfAppName The name of the application bundle being built.\n */\nexport function getAppModules(\n  root: string,\n  appShellConfig: HvAppShellConfig,\n  selfAppName: string\n) {\n  const appModules: { [key: string]: string } = {};\n\n  const selfApp = getMainApp(appShellConfig);\n  if (selfApp != null) {\n    const selfViews =\n      selfApp.views?.map(view => {\n        const bundleName = view.bundle.replace(/^src\\//, \"\");\n        return {\n          ...view,\n          bundleName\n        };\n      }) ?? [];\n\n    selfViews.forEach(view => {\n      appModules[view.bundleName] = path.resolve(root, view.bundle);\n    });\n\n    const selfModules =\n      selfApp.modules?.map(module => {\n        const bundleName = module.bundle.replace(/^src\\//, \"\");\n        return {\n          ...module,\n          bundleName\n        };\n      }) ?? [];\n\n    selfModules.forEach(module => {\n      appModules[module.bundleName] = path.resolve(root, module.bundle);\n    });\n  }\n\n  const implicitThemeModules =\n    appShellConfig?.theming?.themes?.map(theme => {\n      if (\n        theme.startsWith(\"/src/\") ||\n        theme.startsWith(\"@self/\") ||\n        theme.startsWith(selfAppName)\n      ) {\n        const bundle = theme\n          .replace(/^@self\\//, \"\")\n          .replace(new RegExp(`^${selfAppName}/`), \"\");\n        const bundleName = bundle.replace(/^(\\/?)src\\//, \"\");\n        return {\n          bundle,\n          bundleName\n        };\n      }\n\n      return undefined;\n    }) ?? [];\n\n  implicitThemeModules.forEach(module => {\n    if (module != null && appModules[module.bundleName] == null) {\n      appModules[module.bundleName] = path.resolve(root, module.bundle);\n    }\n  });\n\n  return appModules;\n}\n"]}