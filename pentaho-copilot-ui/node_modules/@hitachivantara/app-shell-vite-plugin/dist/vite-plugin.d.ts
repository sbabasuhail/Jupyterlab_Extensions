import type { PluginOption } from "vite";
import { ConfigReplacement } from "./config-utils.js";
export declare enum ApplicationBundleType {
    APP = "app",
    BUNDLE = "bundle"
}
type ApplicationBundleTypeKey = `${ApplicationBundleType}`;
export interface AppShellVitePluginOptions {
    /**
     * Project root directory. Most likely the location of the vite config file.
     *
     * @default process.cwd()
     */
    root?: string;
    /**
     * Execution mode.
     */
    mode?: string;
    /**
     * Type of application bundle being built. Can be "app" or "bundle".
     *
     * - "app": The application bundle includes both the index.html entry point and the exported modules.
     * - "bundle": The application bundle will not include the index.html entry point.
     *
     * @default "app"
     */
    type?: ApplicationBundleTypeKey;
    /** Array of tokens that are replaced at app-shell.config.json during the build of the solution.
     * e.g.
     * {
     *    token: "USER_NOTIFICATIONS_URL",
     *    value: "http://localhost:8080"
     * }
     * Tokens used at config file must be wrapped (at the beginning and at the end) by @@ sequence
     * e.g.
     * {
     *   "id": "@hv/user-notifications-client",
     *   "baseUrl": "@@USER_NOTIFICATIONS_URL@@"
     * }
     */
    configReplacements?: ConfigReplacement[];
    /**
     * The folder containing Views to be shared as Shared Modules. Defaults to "src/pages".
     *
     * The folder path must be relative to the project root (e.g. "src/pages").
     */
    viewsFolder?: string;
    /**
     * If set, the plugin will search for Views at the folder specified by `viewsFolder` and will add them to the App Shell configuration as views.
     * The views' modules will be exported accordingly, and a route will be created from the folder structure.
     * Dynamic route parameters are supported by prefixing the folder name with a $ (e.g. "src/pages/List/$id/index.tsx" will be configured as "/list/:id").
     */
    autoViewsAndRoutes?: boolean;
    /**
     * If true, the plugin will try to automatically add the views to the menu.
     * This is only valid when running in dev mode and if the app-shell.config.json file does not contain any menu configuration already.
     */
    autoDevMenu?: boolean;
    /**
     * If true, the plugin will generate the importmap with an external js file instead of inline in the html.
     * The map will be saved at the root of the application destination dir and named as "importmap.js".
     *
     * This option is not for general use. It is only intended to be used for easing the automated testing of the App Shell.
     *
     * @default false
     * @private
     */
    externalImportMap?: boolean;
    /**
     * If true, the plugin will inline the app-shell.config.json file in a script tag of the index html.
     *
     * This option is not for general use. Its value will be automatically managed by the App Shell build process.
     *
     * @default false, true if generateEmptyShell is true
     * @private
     */
    inlineConfig?: boolean;
    /**
     * If true, the config file is ignored, only the App Shell is built and the generated index.html will contain a placeholders
     * for importmap (if externalImportMap is false), app shell config (if inlineConfig is true) and title.
     *
     * A bash script will also be added to the dist folder to replace the placeholders with the actual content,
     * when provided with a concrete configuration.
     *
     * This option is not for general use. It is used for generating the App Shell container image.
     *
     * @default false
     * @private
     */
    generateEmptyShell?: boolean;
}
/**
 * Vite plugin to support App Shell apps setup
 * @param opts Plugin options
 */
export declare function appShellVitePlugin(opts?: AppShellVitePluginOptions, env?: Record<string, string>): PluginOption;
export default appShellVitePlugin;
//# sourceMappingURL=vite-plugin.d.ts.map