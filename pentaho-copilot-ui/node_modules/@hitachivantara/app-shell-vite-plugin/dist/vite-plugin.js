import fs from "fs";
import path from "path";
import virtual from "@rollup/plugin-virtual";
import { viteStaticCopy } from "vite-plugin-static-copy";
import generateImportmap from "./vite-importmap-plugin.js";
import processConfiguration from "./vite-configuration-processor-plugin.js";
import generateBaseTag from "./vite-generate-base-plugin.js";
import injectMetadata from "./vite-metadata-plugin.js";
import serveAppShellConfig from "./vite-watch-config-plugin.js";
import generateBashScript from "./vite-generate-bash-script-plugin.js";
import { findAppShellConfigFile, loadConfigFile } from "./config-utils.js";
import { resolveModule, getModulePath } from "./nodeModule.js";
import { applyAutomaticMenu, applyAutomaticViewsAndRoutes } from "./automatic-utils.js";
import getVirtualEntrypoints from "./virtual-entrypoints.js";
import SHARED_DEPENDENCIES from "./shared-dependencies.js";
var ViteBuildMode;
(function (ViteBuildMode) {
    ViteBuildMode["PRODUCTION"] = "production";
    ViteBuildMode["DEVELOPMENT"] = "development";
})(ViteBuildMode || (ViteBuildMode = {}));
export var ApplicationBundleType;
(function (ApplicationBundleType) {
    ApplicationBundleType["APP"] = "app";
    ApplicationBundleType["BUNDLE"] = "bundle";
})(ApplicationBundleType || (ApplicationBundleType = {}));
/**
 * Vite plugin to support App Shell apps setup
 * @param opts Plugin options
 */
export function appShellVitePlugin(opts = {}, env = {}) {
    const { root = process.cwd(), mode = ViteBuildMode.PRODUCTION, externalImportMap = false, type = ApplicationBundleType.APP, viewsFolder = "src/pages", autoViewsAndRoutes = false, autoDevMenu = false, inlineConfig = opts.generateEmptyShell ?? false, generateEmptyShell = false } = opts;
    console.info(`Vite running in mode: ${mode}`);
    const devMode = mode === ViteBuildMode.DEVELOPMENT;
    const buildEntryPoint = type !== ApplicationBundleType.BUNDLE;
    const packageJsonRaw = fs.readFileSync(path.resolve(root, "package.json"), "utf-8");
    const packageJson = JSON.parse(packageJsonRaw);
    const appShellConfigFile = !generateEmptyShell
        ? findAppShellConfigFile(root)
        : undefined;
    const appShellConfiguration = loadConfigFile(appShellConfigFile, opts, env);
    if (!generateEmptyShell) {
        if (autoViewsAndRoutes) {
            applyAutomaticViewsAndRoutes(appShellConfiguration, root, viewsFolder);
        }
        if (devMode && autoDevMenu) {
            applyAutomaticMenu(appShellConfiguration);
        }
    }
    return [
        // copy the shared dependencies js bundles to the "bundles" folder
        (buildEntryPoint || devMode) &&
            viteStaticCopy({
                targets: [
                    {
                        src: getModulePath("es-module-shims", "dist/*"),
                        dest: "bundles"
                    },
                    // copy the ui kit icons' sprites to the "icons" folder
                    {
                        src: [
                            getModulePath("@hitachivantara/uikit-react-icons", "dist/sprites/*.svg")
                        ],
                        dest: "icons"
                    },
                    ...(!devMode && buildEntryPoint
                        ? [
                            {
                                src: SHARED_DEPENDENCIES.flatMap(dep => [
                                    resolveModule(dep.bundleSrc),
                                    resolveModule(`${dep.bundleSrc}.map`)
                                ]),
                                dest: "bundles"
                            }
                        ]
                        : [])
                ]
            }),
        // create virtual endpoints for shell code and for shared dependencies
        virtual({
            ...getVirtualEntrypoints(inlineConfig),
            ...SHARED_DEPENDENCIES.reduce((acc, dep) => {
                acc[`/bundles/${dep.bundle}`] = dep.virtualSrc;
                return acc;
            }, {})
        }),
        // generate the importmap for shared dependencies and for apps referenced in the config file
        generateImportmap({
            ...SHARED_DEPENDENCIES.reduce((acc, dep) => {
                acc[dep.moduleId] = `./bundles/${dep.bundle}`;
                return acc;
            }, {}),
            "@hv/uikit-icons/": "./icons/",
            ...appShellConfiguration?.apps?.reduce((acc, app) => {
                if (app.id === "@self") {
                    acc[`${packageJson.name}/`] = app.baseUrl;
                    if (devMode) {
                        acc[`${app.id}/`] = app.baseUrl;
                    }
                }
                else {
                    acc[`${app.id}/`] = app.baseUrl;
                }
                return acc;
            }, {})
        }, [
            ...SHARED_DEPENDENCIES.map(dep => dep.moduleId),
            "@self",
            packageJson.name
        ], externalImportMap && buildEntryPoint, generateEmptyShell),
        // inject version metadata in the index.html
        buildEntryPoint && injectMetadata(),
        // set the base tag and replace the title in the index.html
        buildEntryPoint &&
            generateBaseTag(appShellConfiguration, generateEmptyShell),
        // configure the build process based on the config file
        processConfiguration(root, appShellConfiguration, packageJson.name, buildEntryPoint, inlineConfig, generateEmptyShell),
        // serve the app shell config file as json and watch for changes
        serveAppShellConfig(appShellConfiguration, root, appShellConfigFile, autoViewsAndRoutes ? viewsFolder : undefined),
        // generate the shell script to replace the placeholders in the index.html
        generateEmptyShell && generateBashScript(externalImportMap, inlineConfig)
    ];
}
export default appShellVitePlugin;
//# sourceMappingURL=vite-plugin.js.map