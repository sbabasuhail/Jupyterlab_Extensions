{"version":3,"file":"automatic-utils.js","sourceRoot":"","sources":["../src/automatic-utils.ts"],"names":[],"mappings":"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","sourcesContent":["import fs from \"fs\";\nimport path from \"path\";\n\nimport type {\n  HvAppShellConfig,\n  HvAppShellViewsConfig\n} from \"@hitachivantara/app-shell-shared\";\n\nimport { getMainApp } from \"./config-utils.js\";\n\nexport function findIndexFiles(dir: string): string[] {\n  const files: string[] = [];\n\n  fs.readdirSync(dir).forEach(file => {\n    const filePath = path.join(dir, file);\n    const stat = fs.statSync(filePath);\n\n    if (stat.isDirectory()) {\n      files.push(...findIndexFiles(filePath));\n    } else if (file.match(/^index\\.[tj]sx?$/)) {\n      files.push(filePath);\n    }\n  });\n\n  return files;\n}\n\nexport function mapIndexFilesToRoutes(\n  files: string[],\n  folder: string\n): HvAppShellViewsConfig[] {\n  const routes: HvAppShellViewsConfig[] = [];\n\n  files.forEach(filePath => {\n    const bundle = filePath.substring(\n      filePath.lastIndexOf(`/${folder.replace(/^\\/|\\/$/g, \"\")}/`) + 1,\n      filePath.lastIndexOf(\"/\")\n    );\n    const route = bundle\n      .replace(new RegExp(`^${folder}`), \"\")\n      .replace(/index\\.[t|j]sx?$/, \"\")\n      .replaceAll(/\\$/g, \":\")\n      .toLowerCase();\n    routes.push({ bundle, route });\n  });\n\n  return routes;\n}\n\nexport function applyAutomaticViewsAndRoutes(\n  config: HvAppShellConfig,\n  root: string,\n  viewsFolder: string\n) {\n  const appShellConfiguration = config;\n  let selfApp = getMainApp(appShellConfiguration);\n\n  const folder = path.resolve(root, viewsFolder);\n  if (fs.existsSync(folder)) {\n    const views = mapIndexFilesToRoutes(findIndexFiles(folder), viewsFolder);\n\n    if (views.length > 0) {\n      if (selfApp == null) {\n        selfApp = {\n          id: \"@self\",\n          baseUrl: \"/\"\n        };\n        if (appShellConfiguration.apps == null) {\n          appShellConfiguration.apps = [];\n        }\n        appShellConfiguration.apps.push(selfApp);\n      }\n\n      if (selfApp.views != null && selfApp.views.length > 0) {\n        const nowOverlappingViews = views.filter(view => {\n          const exists = selfApp!.views!.some(\n            existingView =>\n              existingView.bundle === view.bundle ||\n              existingView.route === view.route\n          );\n          return !exists;\n        });\n\n        selfApp.views.push(...nowOverlappingViews);\n      } else {\n        selfApp.views = views;\n      }\n    }\n  }\n}\n\nexport function applyAutomaticMenu(config: HvAppShellConfig) {\n  const appShellConfiguration = config;\n  const selfApp = getMainApp(appShellConfiguration);\n\n  if (selfApp?.views != null && selfApp.views.length > 0) {\n    const menu: HvAppShellConfig[\"menu\"] = [];\n\n    for (let i = 0; i !== selfApp.views.length; i += 1) {\n      const view = selfApp.views[i];\n\n      // skip dynamic routes (e.g. /list/:id))\n      if (view.route.indexOf(\":\") === -1) {\n        let currentMenu = menu;\n        const bundleParts = view.bundle.split(\"/\");\n        const numberOfParts = view.route\n          .split(\"/\")\n          .filter(part => part !== \"\").length;\n        const srcFolderParts = bundleParts.length - numberOfParts;\n        if (bundleParts.length > srcFolderParts) {\n          for (let j = srcFolderParts; j !== bundleParts.length - 1; j += 1) {\n            const part = bundleParts[j];\n            let submenu = currentMenu.find(item => item.label === part);\n            if (submenu == null) {\n              submenu = {\n                label: part,\n                submenus: []\n              };\n              currentMenu.push(submenu);\n            }\n            currentMenu = submenu.submenus!;\n          }\n\n          const label = bundleParts[bundleParts.length - 1];\n          let menuitem = currentMenu.find(item => item.label === label);\n          if (menuitem == null) {\n            menuitem = {\n              label\n            };\n            currentMenu.push(menuitem);\n          }\n          menuitem.target = view.route;\n        }\n      }\n    }\n\n    appShellConfiguration.menu = menu;\n  }\n}\n"]}