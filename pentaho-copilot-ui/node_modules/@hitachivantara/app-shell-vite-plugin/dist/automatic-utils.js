import fs from "fs";
import path from "path";
import { getMainApp } from "./config-utils.js";
export function findIndexFiles(dir) {
    const files = [];
    fs.readdirSync(dir).forEach(file => {
        const filePath = path.join(dir, file);
        const stat = fs.statSync(filePath);
        if (stat.isDirectory()) {
            files.push(...findIndexFiles(filePath));
        }
        else if (file.match(/^index\.[tj]sx?$/)) {
            files.push(filePath);
        }
    });
    return files;
}
export function mapIndexFilesToRoutes(files, folder) {
    const routes = [];
    files.forEach(filePath => {
        const bundle = filePath.substring(filePath.lastIndexOf(`/${folder.replace(/^\/|\/$/g, "")}/`) + 1, filePath.lastIndexOf("/"));
        const route = bundle
            .replace(new RegExp(`^${folder}`), "")
            .replace(/index\.[t|j]sx?$/, "")
            .replaceAll(/\$/g, ":")
            .toLowerCase();
        routes.push({ bundle, route });
    });
    return routes;
}
export function applyAutomaticViewsAndRoutes(config, root, viewsFolder) {
    const appShellConfiguration = config;
    let selfApp = getMainApp(appShellConfiguration);
    const folder = path.resolve(root, viewsFolder);
    if (fs.existsSync(folder)) {
        const views = mapIndexFilesToRoutes(findIndexFiles(folder), viewsFolder);
        if (views.length > 0) {
            if (selfApp == null) {
                selfApp = {
                    id: "@self",
                    baseUrl: "/"
                };
                if (appShellConfiguration.apps == null) {
                    appShellConfiguration.apps = [];
                }
                appShellConfiguration.apps.push(selfApp);
            }
            if (selfApp.views != null && selfApp.views.length > 0) {
                const nowOverlappingViews = views.filter(view => {
                    const exists = selfApp.views.some(existingView => existingView.bundle === view.bundle ||
                        existingView.route === view.route);
                    return !exists;
                });
                selfApp.views.push(...nowOverlappingViews);
            }
            else {
                selfApp.views = views;
            }
        }
    }
}
export function applyAutomaticMenu(config) {
    const appShellConfiguration = config;
    const selfApp = getMainApp(appShellConfiguration);
    if (selfApp?.views != null && selfApp.views.length > 0) {
        const menu = [];
        for (let i = 0; i !== selfApp.views.length; i += 1) {
            const view = selfApp.views[i];
            // skip dynamic routes (e.g. /list/:id))
            if (view.route.indexOf(":") === -1) {
                let currentMenu = menu;
                const bundleParts = view.bundle.split("/");
                const numberOfParts = view.route
                    .split("/")
                    .filter(part => part !== "").length;
                const srcFolderParts = bundleParts.length - numberOfParts;
                if (bundleParts.length > srcFolderParts) {
                    for (let j = srcFolderParts; j !== bundleParts.length - 1; j += 1) {
                        const part = bundleParts[j];
                        let submenu = currentMenu.find(item => item.label === part);
                        if (submenu == null) {
                            submenu = {
                                label: part,
                                submenus: []
                            };
                            currentMenu.push(submenu);
                        }
                        currentMenu = submenu.submenus;
                    }
                    const label = bundleParts[bundleParts.length - 1];
                    let menuitem = currentMenu.find(item => item.label === label);
                    if (menuitem == null) {
                        menuitem = {
                            label
                        };
                        currentMenu.push(menuitem);
                    }
                    menuitem.target = view.route;
                }
            }
        }
        appShellConfiguration.menu = menu;
    }
}
//# sourceMappingURL=automatic-utils.js.map