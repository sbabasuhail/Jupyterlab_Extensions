{"version":3,"file":"vite-generate-bash-script-plugin.js","sourceRoot":"","sources":["../src/vite-generate-bash-script-plugin.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,MAAM,IAAI,CAAC;AACpB,OAAO,IAAI,MAAM,MAAM,CAAC;AAIxB,OAAO,mBAAmB,MAAM,0BAA0B,CAAC;AAE3D,MAAM,CAAC,OAAO,UAAU,kBAAkB,CACxC,iBAA0B,EAC1B,YAAqB;IAErB,IAAI,MAAsB,CAAC;IAC3B,IAAI,SAA6B,CAAC;IAElC,OAAO;QACL,IAAI,EAAE,kCAAkC;QACxC,KAAK,EAAE,OAAO;QAEd,cAAc,CAAC,cAAc;YAC3B,MAAM,GAAG,cAAc,CAAC;YACxB,SAAS,GAAG,IAAI,CAAC,OAAO,CAAC,cAAc,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;YAEzD,IAAI,CAAC,SAAS,EAAE;gBACd,MAAM,IAAI,KAAK,CACb,2EAA2E,CAC5E,CAAC;aACH;YAED,4CAA4C;YAC5C,IAAI,CAAC,EAAE,CAAC,UAAU,CAAC,SAAS,CAAC,EAAE;gBAC7B,EAAE,CAAC,SAAS,CAAC,SAAS,EAAE,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,CAAC;aAC9C;QACH,CAAC;QACD,WAAW;YACT,IAAI,MAAM,CAAC,OAAO,KAAK,OAAO,EAAE;gBAC9B,OAAO;aACR;YAED,MAAM,MAAM,GAAG;;;;;;;;;EAUnB,iBAAiB;gBACf,CAAC,CAAC,mDAAmD;gBACrD,CAAC,CAAC,8GACN;EAEE,YAAY;gBACV,CAAC,CAAC,6GAA6G;gBAC/G,CAAC,CAAC,sDACN;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6BAoD6B,mBAAmB,CAAC,GAAG,CAC5C,CAAC,EAAE,QAAQ,EAAE,MAAM,EAAE,EAAE,EAAE,CAAC,MAAM,QAAQ,oBAAoB,MAAM,MAAM,CACzE,CAAC,IAAI,CAAC,EAAE,CAAC;;;;;;;;EASd,iBAAiB;gBACf,CAAC,CAAC;mKAC6J;gBAC/J,CAAC,CAAC;iGAEN;;EAGE,YAAY;gBACV,CAAC,CAAC;;;;;4BAKsB;gBACxB,CAAC,CAAC;;GAGN;CACC,CAAC;YAEI,EAAE,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,SAAU,EAAE,cAAc,CAAC,EAAE,MAAM,EAAE;gBAC9D,QAAQ,EAAE,OAAO;aAClB,CAAC,CAAC;QACL,CAAC;KACF,CAAC;AACJ,CAAC","sourcesContent":["import fs from \"fs\";\nimport path from \"path\";\n\nimport type { PluginOption, ResolvedConfig } from \"vite\";\n\nimport SHARED_DEPENDENCIES from \"./shared-dependencies.js\";\n\nexport default function generateBashScript(\n  externalImportMap: boolean,\n  inlineConfig: boolean\n): PluginOption {\n  let config: ResolvedConfig;\n  let targetDir: string | undefined;\n\n  return {\n    name: \"vite-plugin-generate-bash-script\",\n    apply: \"build\",\n\n    configResolved(resolvedConfig) {\n      config = resolvedConfig;\n      targetDir = path.resolve(resolvedConfig.root, \"scripts\");\n\n      if (!targetDir) {\n        throw new Error(\n          \"Please set outputPath, so we can know where to place the bash script file\"\n        );\n      }\n\n      // create the targetDir if it does not exist\n      if (!fs.existsSync(targetDir)) {\n        fs.mkdirSync(targetDir, { recursive: true });\n      }\n    },\n    closeBundle() {\n      if (config.command === \"serve\") {\n        return;\n      }\n\n      const script = `#!/bin/bash\nset -e\nset -o pipefail\n\n# This script is generated by @hitachivantara/app-shell-vite-plugin.\n# Do not edit this file directly.\n\n# This script will read the app-shell.config.json file and generate the importmap.\n\n${\n  externalImportMap\n    ? \"# The script will generate the importmap.js file.\"\n    : \"# The importmap will be inlined in the index.html file, by replacing the %%APPSHELL_IMPORTMAP%% placeholder.\"\n}\n${\n  inlineConfig\n    ? \"# The config file will be inlined in the index.html file, by replacing the %%APPSHELL_CONFIG%% placeholder.\"\n    : \"# The config will be saved as app-shell.config.json.\"\n}\n\n# Check if the index.html file exists in the current directory, otherwise exit:\nif [ ! -f index.html ]; then\n  echo \"index.html file not found. Are you running this script in the correct directory?\" >&2\n  exit 1\nfi\n\nCONFIG_FILE=\\${1:-app-shell.config.json}\n\n# Check if the config file exists, otherwise exit:\nif [ ! -f \"\\${CONFIG_FILE}\" ]; then\n  echo \"Config file not found: \\${CONFIG_FILE}\" >&2\n  exit 1\nfi\n\nSCRIPT_DIR=\"$(cd \"$(dirname \"\\${BASH_SOURCE[0]}\")\" && pwd)\"\nINDEX_HTML_ORIGINAL=\"\\${SCRIPT_DIR}/index.html.original\"\n\n# If the index.html doesn't contain any %%APPSHELL_*%% placeholders, copy the index.html.original at the script location:\nif ! grep -q \"%%APPSHELL_\" index.html; then\n  if [ -f \"\\${INDEX_HTML_ORIGINAL}\" ]; then\n    cp \"\\${INDEX_HTML_ORIGINAL}\" index.html\n  fi\nelse\n  # Backup the index.html file to index.html.original, in the current script folder:\n  cp index.html \"\\${INDEX_HTML_ORIGINAL}\"\nfi\n\n# Reading the app-shell.config.json file:\nCONFIG=$(cat \"\\${CONFIG_FILE}\")\n\n# Getting the title from the config \"name\" property:\nTITLE=$(echo \"\\${CONFIG}\" | jq -r '.name')\nif [ -z \"\\${TITLE}\" ] || [ \"\\${TITLE}\" = \"null\" ] || [ \"\\${TITLE}\" = \"undefined\" ]; then\n  TITLE=\"Hitachi Vantara\"\nfi\n\n# Replacing the title placeholder in the index.html file:\nsed -i.bak \"s/%%APPSHELL_TITLE%%/\\${TITLE//\\\\//\\\\\\\\/}/g\" index.html && rm index.html.bak\n\n# Search for \"@self\" app and get its baseUrl:\nSELF_BASEURL=$(echo \"\\${CONFIG}\" | jq -r '.apps[] | select(.id == \"@self\") | .baseUrl')\nif [ -z \"\\${SELF_BASEURL}\" ] || [ \"\\${SELF_BASEURL}\" = \"null\" ] || [ \"\\${SELF_BASEURL}\" = \"undefined\" ]; then\n  SELF_BASEURL=\"/\"\nfi\n\n# Replace the base placeholder in the index.html file:\nsed -i.bak \"s/%%APPSHELL_BASE%%/\\${SELF_BASEURL//\\\\//\\\\\\\\/}/g\" index.html && rm index.html.bak\n\n# Generating the importmap:\n# for each app, we add a mapping from the app id to the app url\nIMPORTMAP=\"{\\\\\"imports\\\\\":{${SHARED_DEPENDENCIES.map(\n        ({ moduleId, bundle }) => `\\\\\"${moduleId}\\\\\":\\\\\"./bundles/${bundle}\\\\\",`\n      ).join(\"\")}\"\nwhile IFS= read -r line; do\n  id=$(echo \"$line\" | jq -r '.id')\n  baseUrl=$(echo \"$line\" | jq -r '.baseUrl')\n  IMPORTMAP=\"\\${IMPORTMAP}\\\\\"\\${id}/\\\\\":\\\\\"\\${baseUrl}\\\\\",\"\ndone < <(echo \"\\${CONFIG}\" | jq -c '.apps[]')\nIMPORTMAP=\"\\${IMPORTMAP%?},  \\\\\"@hv/uikit-icons/\\\\\": \\\\\"./icons/\\\\\" }}\"\n\n${\n  externalImportMap\n    ? `# Generating the importmap.js file:\necho \"const im = document.createElement('script'); im.type = 'importmap'; im.textContent = \\\\\\`\\${IMPORTMAP}\\\\\\`; document.currentScript.after(im);\" >importmap.js`\n    : `# Inlining the importmap in the index.html file:\nsed -i.bak \"s/%%APPSHELL_IMPORTMAP%%/\\${IMPORTMAP//\\\\//\\\\\\\\/}/g\" index.html && rm index.html.bak`\n}\n\n${\n  inlineConfig\n    ? `# Inlining the config in the index.html file:\nCONFIG=$(echo \"\\${CONFIG}\" | tr -d '\\\\n')\nsed -i.bak \"s/%%APPSHELL_CONFIG%%/\\${CONFIG//\\\\//\\\\\\\\/}/g\" index.html && rm index.html.bak\n\n# Removing the config file, just in case:\nrm -f app-shell.config.json`\n    : `if [ \"\\${CONFIG_FILE}\" != \"app-shell.config.json\" ]; then\n  echo \"\\${CONFIG}\" >app-shell.config.json\nfi`\n}\n`;\n\n      fs.writeFileSync(path.join(targetDir!, \"app-shell.sh\"), script, {\n        encoding: \"utf-8\"\n      });\n    }\n  };\n}\n"]}