{"version":3,"file":"vite-plugin.js","sourceRoot":"","sources":["../src/vite-plugin.ts"],"names":[],"mappings":"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","sourcesContent":["import fs from \"fs\";\nimport path from \"path\";\n\nimport virtual from \"@rollup/plugin-virtual\";\nimport { viteStaticCopy } from \"vite-plugin-static-copy\";\n\nimport type { PluginOption } from \"vite\";\n\nimport type { HvAppShellConfig } from \"@hitachivantara/app-shell-shared\";\n\nimport generateImportmap from \"./vite-importmap-plugin.js\";\nimport processConfiguration from \"./vite-configuration-processor-plugin.js\";\nimport generateBaseTag from \"./vite-generate-base-plugin.js\";\nimport injectMetadata from \"./vite-metadata-plugin.js\";\nimport serveAppShellConfig from \"./vite-watch-config-plugin.js\";\nimport generateBashScript from \"./vite-generate-bash-script-plugin.js\";\n\nimport {\n  ConfigReplacement,\n  findAppShellConfigFile,\n  loadConfigFile\n} from \"./config-utils.js\";\nimport { resolveModule, getModulePath } from \"./nodeModule.js\";\nimport {\n  applyAutomaticMenu,\n  applyAutomaticViewsAndRoutes\n} from \"./automatic-utils.js\";\nimport getVirtualEntrypoints from \"./virtual-entrypoints.js\";\nimport SHARED_DEPENDENCIES from \"./shared-dependencies.js\";\n\nenum ViteBuildMode {\n  PRODUCTION = \"production\",\n  DEVELOPMENT = \"development\"\n}\n\nexport enum ApplicationBundleType {\n  APP = \"app\",\n  BUNDLE = \"bundle\"\n}\n\ntype ApplicationBundleTypeKey = `${ApplicationBundleType}`;\n\nexport interface AppShellVitePluginOptions {\n  /**\n   * Project root directory. Most likely the location of the vite config file.\n   *\n   * @default process.cwd()\n   */\n  root?: string;\n  /**\n   * Execution mode.\n   */\n  mode?: string;\n\n  /**\n   * Type of application bundle being built. Can be \"app\" or \"bundle\".\n   *\n   * - \"app\": The application bundle includes both the index.html entry point and the exported modules.\n   * - \"bundle\": The application bundle will not include the index.html entry point.\n   *\n   * @default \"app\"\n   */\n  type?: ApplicationBundleTypeKey;\n\n  /** Array of tokens that are replaced at app-shell.config.json during the build of the solution.\n   * e.g.\n   * {\n   *    token: \"USER_NOTIFICATIONS_URL\",\n   *    value: \"http://localhost:8080\"\n   * }\n   * Tokens used at config file must be wrapped (at the beginning and at the end) by @@ sequence\n   * e.g.\n   * {\n   *   \"id\": \"@hv/user-notifications-client\",\n   *   \"baseUrl\": \"@@USER_NOTIFICATIONS_URL@@\"\n   * }\n   */\n  configReplacements?: ConfigReplacement[];\n\n  /**\n   * The folder containing Views to be shared as Shared Modules. Defaults to \"src/pages\".\n   *\n   * The folder path must be relative to the project root (e.g. \"src/pages\").\n   */\n  viewsFolder?: string;\n  /**\n   * If set, the plugin will search for Views at the folder specified by `viewsFolder` and will add them to the App Shell configuration as views.\n   * The views' modules will be exported accordingly, and a route will be created from the folder structure.\n   * Dynamic route parameters are supported by prefixing the folder name with a $ (e.g. \"src/pages/List/$id/index.tsx\" will be configured as \"/list/:id\").\n   */\n  autoViewsAndRoutes?: boolean;\n  /**\n   * If true, the plugin will try to automatically add the views to the menu.\n   * This is only valid when running in dev mode and if the app-shell.config.json file does not contain any menu configuration already.\n   */\n  autoDevMenu?: boolean;\n\n  /**\n   * If true, the plugin will generate the importmap with an external js file instead of inline in the html.\n   * The map will be saved at the root of the application destination dir and named as \"importmap.js\".\n   *\n   * This option is not for general use. It is only intended to be used for easing the automated testing of the App Shell.\n   *\n   * @default false\n   * @private\n   */\n  externalImportMap?: boolean;\n  /**\n   * If true, the plugin will inline the app-shell.config.json file in a script tag of the index html.\n   *\n   * This option is not for general use. Its value will be automatically managed by the App Shell build process.\n   *\n   * @default false, true if generateEmptyShell is true\n   * @private\n   */\n  inlineConfig?: boolean;\n  /**\n   * If true, the config file is ignored, only the App Shell is built and the generated index.html will contain a placeholders\n   * for importmap (if externalImportMap is false), app shell config (if inlineConfig is true) and title.\n   *\n   * A bash script will also be added to the dist folder to replace the placeholders with the actual content,\n   * when provided with a concrete configuration.\n   *\n   * This option is not for general use. It is used for generating the App Shell container image.\n   *\n   * @default false\n   * @private\n   */\n  generateEmptyShell?: boolean;\n}\n\n/**\n * Vite plugin to support App Shell apps setup\n * @param opts Plugin options\n */\nexport function appShellVitePlugin(\n  opts: AppShellVitePluginOptions = {},\n  env: Record<string, string> = {}\n): PluginOption {\n  const {\n    root = process.cwd(),\n    mode = ViteBuildMode.PRODUCTION,\n    externalImportMap = false,\n    type = ApplicationBundleType.APP,\n    viewsFolder = \"src/pages\",\n    autoViewsAndRoutes = false,\n    autoDevMenu = false,\n    inlineConfig = opts.generateEmptyShell ?? false,\n    generateEmptyShell = false\n  } = opts;\n\n  console.info(`Vite running in mode: ${mode}`);\n\n  const devMode = mode === ViteBuildMode.DEVELOPMENT;\n  const buildEntryPoint = type !== ApplicationBundleType.BUNDLE;\n\n  const packageJsonRaw = fs.readFileSync(\n    path.resolve(root, \"package.json\"),\n    \"utf-8\"\n  );\n  const packageJson = JSON.parse(packageJsonRaw);\n\n  const appShellConfigFile = !generateEmptyShell\n    ? findAppShellConfigFile(root)\n    : undefined;\n  const appShellConfiguration: HvAppShellConfig = loadConfigFile(\n    appShellConfigFile,\n    opts,\n    env\n  );\n\n  if (!generateEmptyShell) {\n    if (autoViewsAndRoutes) {\n      applyAutomaticViewsAndRoutes(appShellConfiguration, root, viewsFolder);\n    }\n\n    if (devMode && autoDevMenu) {\n      applyAutomaticMenu(appShellConfiguration);\n    }\n  }\n\n  return [\n    // copy the shared dependencies js bundles to the \"bundles\" folder\n    (buildEntryPoint || devMode) &&\n      viteStaticCopy({\n        targets: [\n          {\n            src: getModulePath(\"es-module-shims\", \"dist/*\"),\n            dest: \"bundles\"\n          },\n          // copy the ui kit icons' sprites to the \"icons\" folder\n          {\n            src: [\n              getModulePath(\n                \"@hitachivantara/uikit-react-icons\",\n                \"dist/sprites/*.svg\"\n              )\n            ],\n            dest: \"icons\"\n          },\n          ...(!devMode && buildEntryPoint\n            ? [\n                {\n                  src: SHARED_DEPENDENCIES.flatMap(dep => [\n                    resolveModule(dep.bundleSrc),\n                    resolveModule(`${dep.bundleSrc}.map`)\n                  ]),\n                  dest: \"bundles\"\n                }\n              ]\n            : [])\n        ]\n      }),\n\n    // create virtual endpoints for shell code and for shared dependencies\n    virtual({\n      ...getVirtualEntrypoints(inlineConfig),\n\n      ...SHARED_DEPENDENCIES.reduce((acc, dep) => {\n        acc[`/bundles/${dep.bundle}`] = dep.virtualSrc;\n        return acc;\n      }, {} as Record<string, string>)\n    }),\n\n    // generate the importmap for shared dependencies and for apps referenced in the config file\n    generateImportmap(\n      {\n        ...SHARED_DEPENDENCIES.reduce((acc, dep) => {\n          acc[dep.moduleId] = `./bundles/${dep.bundle}`;\n          return acc;\n        }, {} as Record<string, string>),\n\n        \"@hv/uikit-icons/\": \"./icons/\",\n\n        ...appShellConfiguration?.apps?.reduce((acc, app) => {\n          if (app.id === \"@self\") {\n            acc[`${packageJson.name}/`] = app.baseUrl;\n            if (devMode) {\n              acc[`${app.id}/`] = app.baseUrl;\n            }\n          } else {\n            acc[`${app.id}/`] = app.baseUrl;\n          }\n          return acc;\n        }, {} as Record<string, string>)\n      },\n      [\n        ...SHARED_DEPENDENCIES.map(dep => dep.moduleId),\n        \"@self\",\n        packageJson.name\n      ],\n      externalImportMap && buildEntryPoint,\n      generateEmptyShell\n    ),\n\n    // inject version metadata in the index.html\n    buildEntryPoint && injectMetadata(),\n\n    // set the base tag and replace the title in the index.html\n    buildEntryPoint &&\n      generateBaseTag(appShellConfiguration, generateEmptyShell),\n\n    // configure the build process based on the config file\n    processConfiguration(\n      root,\n      appShellConfiguration,\n      packageJson.name,\n      buildEntryPoint,\n      inlineConfig,\n      generateEmptyShell\n    ),\n\n    // serve the app shell config file as json and watch for changes\n    serveAppShellConfig(\n      appShellConfiguration,\n      root,\n      appShellConfigFile,\n      autoViewsAndRoutes ? viewsFolder : undefined\n    ),\n\n    // generate the shell script to replace the placeholders in the index.html\n    generateEmptyShell && generateBashScript(externalImportMap, inlineConfig)\n  ];\n}\n\nexport default appShellVitePlugin;\n"]}