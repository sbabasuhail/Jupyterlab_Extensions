{"version":3,"file":"vite-configuration-processor-plugin.js","sourceRoot":"","sources":["../src/vite-configuration-processor-plugin.ts"],"names":[],"mappings":"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","sourcesContent":["import fs from \"fs\";\nimport path from \"path\";\n\nimport type { PluginOption, UserConfig } from \"vite\";\nimport type { NormalizedOutputOptions, OutputBundle } from \"rollup\";\n\nimport type { HvAppShellConfig } from \"@hitachivantara/app-shell-shared\";\n\nimport { getAppModules, getMainApp, getPublicPath } from \"./config-utils.js\";\n\nenum ViteCommand {\n  BUILD = \"build\",\n  SERVE = \"serve\"\n}\n\n/**\n * Process configuration, executing several tasks:\n *  - Create rollup configuration to support module creation\n *  - Generates final transformed configuration json\n *  - \"base\" value is always \"./\" for build, and main app baseUrl for preview or dev\n * @param root Project root directory.\n * @param appShellConfig The original App Shell configuration json.\n * @param selfAppName The name of the application bundle being built.\n * @param buildEntryPoint If true, the index.html entry point will be added to the bundle.\n */\nexport default function processConfiguration(\n  root: string,\n  appShellConfig: HvAppShellConfig,\n  selfAppName: string,\n  buildEntryPoint: boolean,\n  inlineConfig: boolean,\n  generateEmptyShell: boolean\n): PluginOption {\n  const selfApp = getMainApp(appShellConfig);\n  let finalAppShellConfig: HvAppShellConfig;\n\n  return {\n    name: \"vite-plugin-appShell-configuration-processor\",\n\n    config(config: UserConfig, { command }) {\n      const projectRoot = root ?? config.root;\n\n      const publicPath = getPublicPath(appShellConfig);\n      let appModules = {};\n      if (!generateEmptyShell) {\n        appModules = getAppModules(projectRoot, appShellConfig, selfAppName);\n        console.info(\"Modules exported by the application bundle:\", appModules);\n      }\n\n      return {\n        build: {\n          rollupOptions: {\n            preserveEntrySignatures: \"strict\",\n            input: {\n              ...(buildEntryPoint &&\n              fs.existsSync(path.resolve(projectRoot, \"index.html\"))\n                ? { main: path.resolve(projectRoot, \"index.html\") }\n                : {}),\n              ...appModules\n            },\n            output: {\n              entryFileNames: \"[name].js\"\n            }\n          }\n        },\n        // if serve (preview/dev) it uses the baseUrl. Otherwise(build), use ./\n        base: command === ViteCommand.SERVE ? publicPath : \"./\"\n      };\n    },\n\n    /**\n     * Rollup hook with the info for bundle generation\n     * It will be used to create a new configuration with:\n     *  - bundles replace with the final location (e.g. -> \"bundle\": \"src/pages/Main\" transformed to \"bundle\": \"pages/Main.js\",\n     * @param options build options\n     * @param bundle bundles information\n     */\n    async generateBundle(\n      options: NormalizedOutputOptions,\n      bundle: OutputBundle\n    ) {\n      if (generateEmptyShell) {\n        return;\n      }\n\n      // obtain the directory (dist) where the new config file will be placed\n      let targetDir: string | undefined;\n      if (options.dir) {\n        targetDir = options.dir;\n      } else if (options.file) {\n        targetDir = path.dirname(options.file);\n      }\n\n      if (!targetDir) {\n        throw new Error(\n          \"Please set outputPath, so we can know where to place the json file\"\n        );\n      }\n\n      // create the targetDir if it does not exist\n      if (!fs.existsSync(targetDir)) {\n        fs.mkdirSync(targetDir, { recursive: true });\n      }\n\n      /**\n       * Creating a map with each chunk and the final name. Only the bundles with type=chunk are important\n       * Filename do not include the src path at the value\n       */\n      const chunks: Record<string, string> = {};\n\n      Object.keys(bundle).forEach(key => {\n        const chunk = bundle[key];\n        if (chunk.type === \"chunk\") {\n          const outputChunk = chunk;\n          if (outputChunk.isEntry) {\n            const { fileName } = outputChunk;\n            const { name } = outputChunk;\n\n            chunks[name] = fileName;\n          }\n        }\n      });\n\n      if (selfApp) {\n        selfApp.views = selfApp.views?.map(view => {\n          const bundleName = view.bundle\n            .replace(/^src\\//, \"\")\n            .replaceAll(/\\$/g, \"_\");\n          return {\n            ...view,\n            bundle: chunks[bundleName]\n          };\n        });\n        selfApp.modules = selfApp.modules?.map(module => {\n          const bundleName = module.bundle.replace(/^src\\//, \"\");\n          return {\n            ...module,\n            bundle: chunks[bundleName]\n          };\n        });\n\n        // replace references to @self with the name of this application bundle\n        selfApp.id = selfAppName;\n\n        // also replace implicit references to selfApp in other parts of the configuration\n        const { theming } = appShellConfig;\n        if (theming != null) {\n          theming.themes = theming.themes?.map(theme => {\n            if (\n              theme.startsWith(\"@self/\") ||\n              theme.startsWith(selfAppName) ||\n              theme.startsWith(\"/src/\")\n            ) {\n              const bundleName = theme\n                .replace(/^@self\\//, \"\")\n                .replace(new RegExp(`^${selfAppName}/`), \"\")\n                .replace(/^(\\/?)src\\//, \"\");\n              return `${selfAppName}/${chunks[bundleName]}`;\n            }\n\n            return theme;\n          });\n        }\n      }\n\n      finalAppShellConfig = buildEntryPoint\n        ? { ...appShellConfig }\n        : {\n            name: appShellConfig.name,\n            apps: selfApp != null ? [selfApp] : undefined\n          };\n\n      if (!inlineConfig) {\n        fs.writeFileSync(\n          path.resolve(targetDir, \"app-shell.config.json\"),\n          JSON.stringify(finalAppShellConfig)\n        );\n      }\n    },\n\n    transformIndexHtml: {\n      transform: html => {\n        if (!inlineConfig) {\n          return undefined;\n        }\n\n        return {\n          html,\n\n          tags: [\n            {\n              tag: \"script\",\n              injectTo: \"head-prepend\",\n              children: `globalThis.__appshell_config__ = ${\n                generateEmptyShell\n                  ? \"%%APPSHELL_CONFIG%%\"\n                  : JSON.stringify(finalAppShellConfig ?? appShellConfig)\n              };`\n            }\n          ]\n        };\n      }\n    }\n  };\n}\n"]}