import * as CSS_2 from 'csstype';

declare const accentLight: {
    secondary: string;
    primary: string;
    primary_80: string;
    primary_20: string;
    brand: string;
    secondary_80: string;
    secondary_60: string;
};

declare const atmosphereLight: {
    atmo1: string;
    atmo2: string;
    atmo3: string;
    atmo4: string;
};

declare const base: {
    base_light: string;
    base_dark: string;
};

export declare const breakpoints: {
    unit: string;
    step: number;
    values: {
        xs: number;
        sm: number;
        md: number;
        lg: number;
        xl: number;
    };
};

declare const categorical: {
    cat1_180: string;
    cat1_160: string;
    cat1_140: string;
    cat1_120: string;
    cat1: string;
    cat1_80: string;
    cat1_60: string;
    cat1_40: string;
    cat1_20: string;
    cat2_180: string;
    cat2_160: string;
    cat2_140: string;
    cat2_120: string;
    cat2: string;
    cat2_80: string;
    cat2_60: string;
    cat2_40: string;
    cat2_20: string;
    cat3_180: string;
    cat3_160: string;
    cat3_140: string;
    cat3_120: string;
    cat3: string;
    cat3_80: string;
    cat3_60: string;
    cat3_40: string;
    cat3_20: string;
    cat4_180: string;
    cat4_160: string;
    cat4_140: string;
    cat4_120: string;
    cat4: string;
    cat4_80: string;
    cat4_60: string;
    cat4_40: string;
    cat4_20: string;
    cat5_180: string;
    cat5_160: string;
    cat5_140: string;
    cat5_120: string;
    cat5: string;
    cat5_80: string;
    cat5_60: string;
    cat5_40: string;
    cat5_20: string;
    cat6_180: string;
    cat6_160: string;
    cat6_140: string;
    cat6_120: string;
    cat6: string;
    cat6_80: string;
    cat6_60: string;
    cat6_40: string;
    cat6_20: string;
    cat7_180: string;
    cat7_160: string;
    cat7_140: string;
    cat7_120: string;
    cat7: string;
    cat7_80: string;
    cat7_60: string;
    cat7_40: string;
    cat7_20: string;
    cat8_180: string;
    cat8_160: string;
    cat8_140: string;
    cat8_120: string;
    cat8: string;
    cat8_80: string;
    cat8_60: string;
    cat8_40: string;
    cat8_20: string;
    cat9_180: string;
    cat9_160: string;
    cat9_140: string;
    cat9_120: string;
    cat9: string;
    cat9_80: string;
    cat9_60: string;
    cat9_40: string;
    cat9_20: string;
    cat10_180: string;
    cat10_160: string;
    cat10_140: string;
    cat10_120: string;
    cat10: string;
    cat10_80: string;
    cat10_60: string;
    cat10_40: string;
    cat10_20: string;
    cat11_180: string;
    cat11_160: string;
    cat11_140: string;
    cat11_120: string;
    cat11: string;
    cat11_80: string;
    cat11_60: string;
    cat11_40: string;
    cat11_20: string;
    cat12_180: string;
    cat12_160: string;
    cat12_140: string;
    cat12_120: string;
    cat12: string;
    cat12_80: string;
    cat12_60: string;
    cat12_40: string;
    cat12_20: string;
    cat13: string;
    cat14: string;
    cat15: string;
    cat16: string;
    cat17: string;
    cat18: string;
    cat19: string;
    cat20: string;
    cat21: string;
    cat22: string;
    cat23: string;
    cat24: string;
    cat25: string;
    cat26: string;
    cat27: string;
    cat28: string;
};

export declare const colors: {
    common: {
        cat1_180: string;
        cat1_160: string;
        cat1_140: string;
        cat1_120: string;
        cat1: string;
        cat1_80: string;
        cat1_60: string;
        cat1_40: string;
        cat1_20: string;
        cat2_180: string;
        cat2_160: string;
        cat2_140: string;
        cat2_120: string;
        cat2: string;
        cat2_80: string;
        cat2_60: string;
        cat2_40: string;
        cat2_20: string;
        cat3_180: string;
        cat3_160: string;
        cat3_140: string;
        cat3_120: string;
        cat3: string;
        cat3_80: string;
        cat3_60: string;
        cat3_40: string;
        cat3_20: string;
        cat4_180: string;
        cat4_160: string;
        cat4_140: string;
        cat4_120: string;
        cat4: string;
        cat4_80: string;
        cat4_60: string;
        cat4_40: string;
        cat4_20: string;
        cat5_180: string;
        cat5_160: string;
        cat5_140: string;
        cat5_120: string;
        cat5: string;
        cat5_80: string;
        cat5_60: string;
        cat5_40: string;
        cat5_20: string;
        cat6_180: string;
        cat6_160: string;
        cat6_140: string;
        cat6_120: string;
        cat6: string;
        cat6_80: string;
        cat6_60: string;
        cat6_40: string;
        cat6_20: string;
        cat7_180: string;
        cat7_160: string;
        cat7_140: string;
        cat7_120: string;
        cat7: string;
        cat7_80: string;
        cat7_60: string;
        cat7_40: string;
        cat7_20: string;
        cat8_180: string;
        cat8_160: string;
        cat8_140: string;
        cat8_120: string;
        cat8: string;
        cat8_80: string;
        cat8_60: string;
        cat8_40: string;
        cat8_20: string;
        cat9_180: string;
        cat9_160: string;
        cat9_140: string;
        cat9_120: string;
        cat9: string;
        cat9_80: string;
        cat9_60: string;
        cat9_40: string;
        cat9_20: string;
        cat10_180: string;
        cat10_160: string;
        cat10_140: string;
        cat10_120: string;
        cat10: string;
        cat10_80: string;
        cat10_60: string;
        cat10_40: string;
        cat10_20: string;
        cat11_180: string;
        cat11_160: string;
        cat11_140: string;
        cat11_120: string;
        cat11: string;
        cat11_80: string;
        cat11_60: string;
        cat11_40: string;
        cat11_20: string;
        cat12_180: string;
        cat12_160: string;
        cat12_140: string;
        cat12_120: string;
        cat12: string;
        cat12_80: string;
        cat12_60: string;
        cat12_40: string;
        cat12_20: string;
        cat13: string;
        cat14: string;
        cat15: string;
        cat16: string;
        cat17: string;
        cat18: string;
        cat19: string;
        cat20: string;
        cat21: string;
        cat22: string;
        cat23: string;
        cat24: string;
        cat25: string;
        cat26: string;
        cat27: string;
        cat28: string;
        base_light: string;
        base_dark: string;
    };
    light: {
        shad1: string;
        shadow: string;
        supp1: string;
        supp2: string;
        supp3: string;
        supp4: string;
        supp5: string;
        positive: string;
        positive_80: string;
        positive_120: string;
        neutral: string;
        warning: string;
        warning_120: string;
        warning_140: string;
        negative: string;
        negative_80: string;
        negative_120: string;
        catastrophic: string;
        sema6: string;
        neutral_20: string;
        positive_20: string;
        negative_20: string;
        sema10: string;
        sema11: string;
        sema12: string;
        sema13: string;
        sema14: string;
        sema15: string;
        sema16: string;
        sema17: string;
        sema18: string;
        sema19: string;
        warning_20: string;
        atmo1: string;
        atmo2: string;
        atmo3: string;
        atmo4: string;
        secondary: string;
        primary: string;
        primary_80: string;
        primary_20: string;
        brand: string;
        secondary_80: string;
        secondary_60: string;
    };
    dark: {
        shad1: string;
        shadow: string;
        supp2: string;
        supp3: string;
        supp4: string;
        supp5: string;
        supp1: string;
        positive: string;
        positive_80: string;
        positive_120: string;
        neutral: string;
        warning: string;
        warning_120: string;
        warning_140: string;
        negative: string;
        negative_80: string;
        negative_120: string;
        catastrophic: string;
        sema6: string;
        neutral_20: string;
        positive_20: string;
        negative_20: string;
        sema10: string;
        sema11: string;
        sema12: string;
        sema13: string;
        sema14: string;
        sema15: string;
        sema16: string;
        sema17: string;
        sema18: string;
        sema19: string;
        warning_20: string;
        atmo1: string;
        atmo2: string;
        atmo3: string;
        atmo4: string;
        secondary: string;
        primary: string;
        primary_80: string;
        primary_20: string;
        brand: string;
        secondary_80: string;
        secondary_60: string;
    };
};

export declare const CssBaseline: {
    readonly "input[type=search]::-ms-clear": {
        readonly display: "none";
        readonly width: 0;
        readonly height: 0;
    };
    readonly "input[type=search]::-ms-reveal": {
        readonly display: "none";
        readonly width: 0;
        readonly height: 0;
    };
    readonly 'input[type="search"]::-webkit-search-decoration': {
        readonly display: "none";
    };
    readonly 'input[type="search"]::-webkit-search-cancel-button': {
        readonly display: "none";
    };
    readonly 'input[type="search"]::-webkit-search-results-button': {
        readonly display: "none";
    };
    readonly 'input[type="search"]::-webkit-search-results-decoration': {
        readonly display: "none";
    };
    readonly "*, ::before, ::after": {
        readonly boxSizing: "border-box";
        readonly borderWidth: "0";
        readonly borderStyle: "solid";
    };
    readonly "*": {
        readonly margin: 0;
    };
    readonly "h1, h2, h3, h4, h5, h6": {
        readonly fontSize: "inherit";
        readonly fontWeight: "inherit";
    };
    readonly "p, h1, h2, h3, h4, h5, h6": {
        readonly overflowWrap: "break-word";
    };
    readonly "img, picture, video, canvas, svg": {
        readonly display: "block";
        readonly maxWidth: "100%";
    };
    readonly "button, input, textarea, select, optgroup": {
        readonly fontFamily: "inherit";
        readonly fontSize: "100%";
    };
    readonly select: {
        readonly width: "100%";
        readonly height: "100%";
        readonly cursor: "pointer";
        readonly background: "transparent";
    };
    readonly "button:focus-visible": {
        readonly outline: "#52A8EC solid 0px";
        readonly outlineOffset: "-1px";
    };
    readonly fieldset: {
        readonly margin: 0;
        readonly padding: 0;
    };
    readonly "ol, ul": {
        readonly margin: 0;
        readonly padding: 0;
    };
    readonly a: {
        readonly backgroundColor: "transparent";
        readonly color: "inherit";
        readonly textDecoration: "inherit";
    };
    readonly "html, body": {
        readonly height: "100%";
    };
    readonly html: {
        readonly fontFamily: "'Open Sans', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen-Sans, Ubuntu, Cantarell, 'Helvetica Neue', sans-serif";
    };
    readonly body: {
        readonly fontFamily: "inherit";
        readonly lineHeight: "inherit";
        readonly WebkitFontSmoothing: "antialiased";
        readonly MozOsxFontSmoothing: "grayscale";
    };
};

declare interface CSSProperties extends CSS_2.Properties<string | number> {
}

export declare const CssScopedBaseline: {
    readonly "input[type=search]::-ms-clear": {
        readonly display: "none";
        readonly width: 0;
        readonly height: 0;
    };
    readonly "input[type=search]::-ms-reveal": {
        readonly display: "none";
        readonly width: 0;
        readonly height: 0;
    };
    readonly 'input[type="search"]::-webkit-search-decoration': {
        readonly display: "none";
    };
    readonly 'input[type="search"]::-webkit-search-cancel-button': {
        readonly display: "none";
    };
    readonly 'input[type="search"]::-webkit-search-results-button': {
        readonly display: "none";
    };
    readonly 'input[type="search"]::-webkit-search-results-decoration': {
        readonly display: "none";
    };
    readonly "*, ::before, ::after": {
        readonly boxSizing: "border-box";
        readonly borderWidth: "0";
        readonly borderStyle: "solid";
    };
    readonly "*": {
        readonly margin: 0;
    };
    readonly "h1, h2, h3, h4, h5, h6": {
        readonly fontSize: "inherit";
        readonly fontWeight: "inherit";
    };
    readonly "p, h1, h2, h3, h4, h5, h6": {
        readonly overflowWrap: "break-word";
    };
    readonly "img, picture, video, canvas, svg": {
        readonly display: "block";
        readonly maxWidth: "100%";
    };
    readonly "button, input, textarea, select, optgroup": {
        readonly fontFamily: "inherit";
        readonly fontSize: "100%";
    };
    readonly select: {
        readonly width: "100%";
        readonly height: "100%";
        readonly cursor: "pointer";
        readonly background: "transparent";
    };
    readonly "button:focus-visible": {
        readonly outline: "#52A8EC solid 0px";
        readonly outlineOffset: "-1px";
    };
    readonly fieldset: {
        readonly margin: 0;
        readonly padding: 0;
    };
    readonly "ol, ul": {
        readonly margin: 0;
        readonly padding: 0;
    };
    readonly a: {
        readonly backgroundColor: "transparent";
        readonly color: "inherit";
        readonly textDecoration: "inherit";
    };
    readonly height: "100%";
    readonly fontFamily: "inherit";
    readonly lineHeight: "inherit";
    readonly WebkitFontSmoothing: "antialiased";
    readonly MozOsxFontSmoothing: "grayscale";
};

export declare type DeepString<T> = {
    [P in keyof T]: T[P] extends object ? DeepString<T[P]> : string;
};

export declare const ds3: HvThemeStructure;

export declare const ds5: HvThemeStructure;

declare const flattenTokens: {
    colors: {
        shad1: string;
        shadow: string;
        supp1: string;
        supp2: string;
        supp3: string;
        supp4: string;
        supp5: string;
        positive: string;
        positive_80: string;
        positive_120: string;
        neutral: string;
        warning: string;
        warning_120: string;
        warning_140: string;
        negative: string;
        negative_80: string;
        negative_120: string;
        catastrophic: string;
        sema6: string;
        neutral_20: string;
        positive_20: string;
        negative_20: string;
        sema10: string;
        sema11: string;
        sema12: string;
        sema13: string;
        sema14: string;
        sema15: string;
        sema16: string;
        sema17: string;
        sema18: string;
        sema19: string;
        warning_20: string;
        atmo1: string;
        atmo2: string;
        atmo3: string;
        atmo4: string;
        secondary: string;
        primary: string;
        primary_80: string;
        primary_20: string;
        brand: string;
        secondary_80: string;
        secondary_60: string;
        cat1_180: string;
        cat1_160: string;
        cat1_140: string;
        cat1_120: string;
        cat1: string;
        cat1_80: string;
        cat1_60: string;
        cat1_40: string;
        cat1_20: string;
        cat2_180: string;
        cat2_160: string;
        cat2_140: string;
        cat2_120: string;
        cat2: string;
        cat2_80: string;
        cat2_60: string;
        cat2_40: string;
        cat2_20: string;
        cat3_180: string;
        cat3_160: string;
        cat3_140: string;
        cat3_120: string;
        /** Component properties to override */
        cat3: string;
        cat3_80: string;
        cat3_60: string;
        cat3_40: string;
        cat3_20: string;
        cat4_180: string;
        cat4_160: string;
        cat4_140: string;
        cat4_120: string;
        cat4: string;
        cat4_80: string;
        cat4_60: string;
        cat4_40: string;
        cat4_20: string;
        cat5_180: string;
        cat5_160: string;
        cat5_140: string;
        cat5_120: string;
        cat5: string;
        cat5_80: string;
        cat5_60: string;
        cat5_40: string;
        cat5_20: string;
        cat6_180: string;
        cat6_160: string;
        cat6_140: string;
        cat6_120: string;
        cat6: string;
        cat6_80: string;
        cat6_60: string;
        cat6_40: string;
        cat6_20: string;
        cat7_180: string;
        cat7_160: string;
        cat7_140: string;
        cat7_120: string;
        cat7: string;
        cat7_80: string;
        cat7_60: string;
        cat7_40: string;
        cat7_20: string;
        cat8_180: string;
        cat8_160: string;
        cat8_140: string;
        cat8_120: string;
        cat8: string;
        cat8_80: string;
        cat8_60: string;
        cat8_40: string;
        cat8_20: string;
        cat9_180: string;
        cat9_160: string;
        cat9_140: string;
        cat9_120: string;
        cat9: string;
        cat9_80: string;
        cat9_60: string;
        cat9_40: string;
        cat9_20: string;
        cat10_180: string;
        cat10_160: string;
        cat10_140: string;
        cat10_120: string;
        cat10: string;
        cat10_80: string;
        cat10_60: string;
        cat10_40: string;
        cat10_20: string;
        cat11_180: string;
        cat11_160: string;
        cat11_140: string;
        cat11_120: string;
        cat11: string;
        cat11_80: string;
        cat11_60: string;
        cat11_40: string;
        cat11_20: string;
        cat12_180: string;
        cat12_160: string;
        cat12_140: string;
        cat12_120: string;
        cat12: string;
        cat12_80: string;
        cat12_60: string;
        cat12_40: string;
        cat12_20: string;
        cat13: string;
        cat14: string;
        cat15: string;
        cat16: string;
        cat17: string;
        cat18: string;
        cat19: string;
        cat20: string;
        cat21: string;
        cat22: string;
        cat23: string;
        cat24: string;
        cat25: string;
        cat26: string;
        cat27: string;
        cat28: string;
        base_light: string;
        base_dark: string;
        type: string;
        backgroundColor: string;
    };
    breakpoints: {
        unit: string;
        step: number;
        values: {
            xs: number;
            sm: number;
            md: number;
            lg: number;
            xl: number;
        };
    };
    radii: {
        none: string;
        base: string;
        round: string;
        circle: string;
        full: string;
    };
    space: {
        base: number;
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
    };
    sizes: {
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
    };
    fontFamily: {
        body: string;
    };
    fontSizes: {
        xs: string;
        sm: string;
        base: string;
        lg: string;
        xl: string;
        xl2: string;
        xl3: string;
        xl4: string;
    };
    fontWeights: {
        hairline: string;
        thin: string;
        light: string;
        normal: string;
        medium: string;
        semibold: string;
        bold: string;
        extrabold: string;
        black: string;
    };
    lineHeights: {
        none: string;
        xs: string;
        sm: string;
        base: string;
        lg: string;
        xl: string;
        xl2: string;
        xl3: string;
        xl4: string; /** Component properties to override */
    };
    zIndices: {
        hide: number;
        base: number;
        docked: number;
        sticky: number;
        fab: number;
        banner: number;
        overlay: number;
        modal: number;
        dropdown: number;
        popover: number;
        tooltip: number;
        skipLink: number;
        toast: number;
    };
};

export declare const fontFamily: {
    body: string;
};

export declare const fontSizes: {
    xs: string;
    sm: string;
    base: string;
    lg: string;
    xl: string;
    xl2: string;
    xl3: string;
    xl4: string;
};

export declare const fontWeights: {
    hairline: string;
    thin: string;
    light: string;
    normal: string;
    medium: string;
    semibold: string;
    bold: string;
    extrabold: string;
    black: string;
};

/** Get a `color` from the theme palette, or `fallbackColor` if not found */
export declare const getColor: (color: HvColorAny | undefined, fallbackColor?: HvColorAny) => string | undefined;

export declare const getThemesList: (themes: object) => {};

export declare const getThemesVars: (themes: HvThemeStructure[]) => {};

export declare const hasMultipleArgs: <T extends unknown>(args: T[] | [T[]]) => args is T[];

export declare type HvAccentColor = keyof typeof accentLight;

export declare type HvAtmosphereColor = keyof typeof atmosphereLight;

export declare type HvBaseColor = keyof typeof base;

export declare type HvBaseTheme = "ds3" | "ds5";

export declare type HvBreakpoints = keyof typeof breakpoints.values;

export declare type HvCategoricalColor = keyof typeof categorical;

/** A type with all the accepted colors from the color palette */
export declare type HvColor = keyof typeof colors.common | keyof typeof colors.light;

/**
 * A type representing an `HvColor` from the palette or any other color string
 * @example "secondary" "brand" "atmo2" "#FF0000" "purple" "inherit"
 * */
export declare type HvColorAny = HvColor | (string & {});

export declare type HvCustomTheme = {
    name: string;
} & HvThemeComponents & HvThemeComponentsProps & HvThemeTypography & Partial<Omit<HvThemeTokens, "colors">> & {
    colors: {
        modes: {
            [key: string]: Partial<HvThemeColorModeStructure>;
        };
    };
};

export declare type HvSemanticColor = keyof typeof semanticLight;

export declare type HvSize = keyof typeof sizes;

export declare type HvSupportColor = keyof typeof supportLight;

export declare type HvTheme = HvThemeVars & HvThemeUtils;

export declare type HvThemeBreakpoint = Exclude<keyof typeof tokens.space, "base">;

export declare type HvThemeColorMode = "dawn" | "wicked";

export declare type HvThemeColorModeStructure = HvThemeColors & {
    backgroundColor: string;
    type: HvThemeColorModeType;
};

export declare type HvThemeColorModeType = "light" | "dark";

export declare type HvThemeColors = typeof colors.common & typeof colors.light;

/** Theme components */
export declare type HvThemeComponents = {
    actionBar: {
        borderTop: string;
    };
    dropdown: {
        borderRadius: string;
        disabledColor: string;
        readOnlyBorder: string;
        readOnlyBackgroundColor: string;
        placeholderColor: string;
        dropdownHeaderInvalidBorder: string;
        listContainerPadding: string;
        searchContainerMargin: string;
    };
    button: {
        borderRadius: string;
        padding: string;
        marginIconRight: string;
        marginIconLeft: string;
        semanticColor: string;
        semanticColorDisabled: string;
        hoverColor: string;
        secondaryBackgroundColor: string;
        secondarySubtleBorderColor: string;
    };
    header: {
        color: string;
        brandColor: string;
        height: string;
        backgroundColor: string;
        secondLevelBackgroundColor: string;
        secondLevelHeight: string;
        hoverColor: string;
        borderTopThickness: string;
        borderTopColor: string;
        selectedItemColor: string;
        selectedItemBackgroundColor: string;
        selectedItemBorderTopColor: string;
        selectedItemBorderTopThickness: string;
        selectedItemBorderBottomColor: string;
        selectedItemBorderBottomThickness: string;
        shadow: string;
        secondLevelSelectedItemBorderTopColor: string;
        secondLevelSelectedItemBorderTopThickness: string;
        secondLevelSelectedItemBorderBottomColor: string;
        secondLevelSelectedItemBorderBottomThickness: string;
        secondLevelItemColor: string;
        secondLevelSelectedItemColor: string;
        secondLevelSelectedItemBackgroundColor: string;
        selectedItemBorderRadius: string;
        secondLevelSelectedItemBorderRadius: string;
        itemPadding: string;
        secondLevelItemPadding: string;
    };
    card: {
        iconMargin: string;
        outline: string;
        borderRadius: string;
        hoverColor: string;
        backgroundColor: string;
        titleVariant: keyof HvThemeTypography["typography"];
        subheaderVariant: keyof HvThemeTypography["typography"];
        subheaderColor: string;
    };
    tab: {
        padding: string;
        hoverBackgroundColor: string;
        hoverBackgroundBorderRadius: string;
        hoverUnderlineBackgroundColor: string;
    };
    list: {
        hoverColor: string;
        disabledBackgroundColor: string;
        selectedBackgroundColor: string;
    };
    dialog: {
        borderRadius: string;
        margin: string;
        titleVariant: keyof HvThemeTypography["typography"];
    };
    baseCheckBox: {
        hoverColor: string;
        borderRadius: string;
    };
    checkbox: {
        hoverColor: string;
        borderRadius: string;
    };
    baseDropdown: {
        shadow: string;
        placeholderColor: string;
        borderColor: string;
        hoverBorderColor: string;
        disabledBorderColor: string;
        disabledBackgroundColor: string;
        readOnlyBorder: string;
        readOnlyBackgroundColor: string;
        openBorderColor: string;
    };
    baseRadio: {
        hoverColor: string;
        hoverBorderRadius: string;
    };
    baseSwitch: {
        padding: number;
        height: string;
        width: string;
        track: {
            opacity: number;
            borderRadius: string;
            height: string;
            width: string;
            border: string;
            backgroundColor: string;
            hoverBackgroundColor: string;
        };
        thumb: {
            width: string;
            height: string;
            left: string;
            border: string;
            backgroundColor: string;
            marginLeft: string;
            marginTop: number;
            boxShadow: string;
        };
        disabled: {
            thumbBackgroundColor: string;
            thumbBorder: string;
            trackBackgroundColor: string;
            trackBorder: string;
            trackOpacity: number;
        };
        checkedTrackBackgroundColor: string;
        hoverBackgroundColor: string;
        hoverBaseBackgroundColor: string;
        checkedOpacity: number;
        borderRadius: string;
        focusBorderRadius: string;
    };
    baseInput: {
        underlineHeight: string;
        placeholderColor: string;
        borderColor: string;
        hoverColor: string;
        disabledBorderColor: string;
        disabledTextColor: string;
        disabledBackgroundColor: string;
        readOnlyBorderColor: string;
        readOnlyTextColor: string;
        readOnlyBackgroundColor: string;
        multilineBorderColor: string;
        multilineDisabledBorderColor: string;
    };
    radio: {
        hoverColor: string;
        borderRadius: string;
    };
    tagsInput: {
        borderColor: string;
        disabledBackgroundColor: string;
        readOnlyBackgroundColor: string;
        hoverColor: string;
        readOnlyBorderColor: string;
    };
    switch: {
        invalidPaddingBottom: string;
    };
    fileUploader: {
        dropZone: {
            borderColor: string;
            backgroundColor: string;
            borderRadius: string;
            borderColorDrag: string;
            borderColorDisabled: string;
            borderType: string;
        };
        fileList: {
            itemBorder: string;
            itemBorderRadius: string;
        };
        file: {
            progressHeight: string;
            borderWidth: string;
            previewContainerSize: string;
            imageSize: string;
        };
        preview: {
            buttonSize: string;
            overlayColor: string;
            overlayOpacity: string;
            overlayBorderRadius: string;
        };
    };
    dropDownMenu: {
        borderRadius: string;
        hoverColor: string;
        borderOpened: string;
        borderClosed: string;
        extensionHeight: string;
        extensionBorderColor: string;
    };
    pagination: {
        pageSizeBorderColor: string;
        pageSizeHoverBorderColor: string;
    };
    actionsGeneric: {};
    bulkActions: {
        separatorDisplay: string;
        border: string;
        backgroundColor: string;
        padding: string;
        anySelectedBackgroundColor: string;
        actionButtonVariant: string;
        semanticColor: string;
    };
    table: {
        headerHoverColor: string;
        headerBorderTopColor: string;
        selectedRowBackgroundColor: string;
        rowBorderColor: string;
        rowBackgroundColor: string;
        rowBorderRadius: string;
        rowListBackgroundColor: string;
        rowListBorderRadius: string;
        rowListBorderColor: string;
        rowStripedBackgroundColorEven: string;
        rowStripedBackgroundColorOdd: string;
        rowExpandBackgroundColor: string;
        rowHoverColor: string;
        rowHoverBorderColor: string;
        rowSortedColor: string;
        rowSortedColorAlpha: string;
        cellPaddingTop: string;
        cellPaddingBottom: string;
        cellListBorder: string;
        cellBorder: string;
        sortButtonHoverColor: string;
    };
    calendar: {
        border: string;
        borderRadius: string;
        cellHoverColor: string;
        headerInputBorderBottom: string;
        headerInputBorderTop: string;
        headerInputBorderLeft: string;
        headerInputBorderRight: string;
        headerInputFontColor: string;
        headerInputFontSize: string;
        headerInputFontLetterSpacing: string;
        headerInputFontLineHeight: string;
        headerInputFontWeight: string;
    };
    globalActions: {
        sectionVariant: keyof HvThemeTypography["typography"];
        border: string;
        borderRadius: string;
        sectionBackgroundColor: string;
        sectionPaddingLeft: string;
    };
    emptyState: {
        titleVariant: keyof HvThemeTypography["typography"];
        titleMarginTop: string;
    };
    tooltip: {
        borderRadius: string;
    };
    verticalNavigation: {
        justifyContent: string;
        hoverColor: string;
        activeBorderLeft: string;
        inactiveBorderLeft: string;
        actionsMarginTop: string;
    };
    slider: {
        dragBarColor: string;
        ringColor: string;
        ringOpacity: string;
    };
    stepNavigation: {
        separatorMargin: string;
        defaultSeparatorHeight: number;
        simpleSeparatorHeight: number;
    };
    filterGroup: {
        applyButtonVariant: string;
        cancelButtonVariant: string;
        applyButtonMarginRight: string;
        rightPanelBorderLeft: string;
        rightPanelShadow: string;
        partialCounterFontWeight: string;
    };
    multiButton: {
        disabledBackgroundColor: string;
    };
    datePicker: {
        dropdownPlaceholderColor: string;
        placeholderVariant: keyof HvThemeTypography["typography"];
    };
    scrollTo: {
        horizontal: {
            dotDisplay: string;
            buttonHeight: string;
            buttonHoverBackgroundColor: string;
            buttonBottomBorder: string;
            selectedButtonBottomBorder: string;
            textPadding: string;
            textMaxWidth: string;
        };
        dotRootSize: string;
        dotRootRadius: string;
        dotHoverBackgroundColor: string;
        dotHoverColor: string;
        dotHoverSize: string;
        dotNotSelectedColor: string;
        dotNotSelectedSize: string;
        dotSelectedSize: number;
        backgroundColorOpacity: number;
        backgroundColorBlur: string;
    };
    inlineEditor: {
        hoverBorderColor: string;
        activeBorderColor: string;
        borderWidth: string;
    };
    queryBuilder: {
        ruleSubGroupLeftConnectorPosition: string;
        ruleSubGroupContainerLeftConnectorPosition: string;
        ruleLeftConnectorPosition: string;
        ruleConnectorHorizontalSize: string;
        ruleConnectorHeight: string;
        actionsContainerMarginTop: string;
        topActionButtonContainerBottom: string;
        topActionButtonContainerRight: string;
        topGroupPaddingBottom: string;
        border: string;
    };
    colorPicker: {
        inputValueVariant: keyof HvThemeTypography["typography"];
        panelMinWidth: string;
        panelPadding: string;
        pickersFlexDirection: CSSProperties["flexDirection"];
        hueHeight: string;
        hueWidth: string;
        hueDirection: "horizontal" | "vertical";
        hueMarginTop: string;
        hueBorderRadius: string;
        hueSliderWidth: string;
        hueSliderHeight: string;
        hueSliderBorderRadius: string;
        hueSliderBackground: string;
        hueSliderBorder: string;
        hueSliderMarginLeft: string;
        saturationWidth: string;
        saturationHeight: string;
        saturationMarginRight: string;
        saturationBorderRadius: string;
        saturationPointerWidth: string;
        saturationPointerHeight: string;
        colorPickerWidth: string;
        recommendedColorsRootWidth: string;
        recommendedColorsWidth: string;
        recommendedColorsMargin: string;
        recommendedColorsBottomPadding: string;
        recommendedColorsSwatchWidth: string;
        recommendedColorsSwatchHeight: string;
        recommendedColorsSwatchMargin: string;
        recommendedColorsSwatchBorderRadius: string;
        fieldsPaddingTop: string;
        fieldsMarginRight: string;
        fieldsHexPaddingRight: string;
        fieldsRgbPaddingLeft: string;
        fieldsHexWidth: string;
        fieldsRgbWidth: string;
        addSavedColorButtonMargin: string;
        addSavedColorButtonWidth: string;
        addSavedColorButtonHeight: string;
        savedColorsWidth: string;
        savedColorsMargin: string;
        savedColorsSwatchWidth: string;
        savedColorsSwatchHeight: string;
        savedColorsSwatchMargin: string;
        savedColorsSwatchBorderRadius: string;
    };
    carousel: {
        xsControlsDisplay: CSSProperties["display"];
        counterContainerDisplay: CSSProperties["display"];
        mainContainerFlexDirection: CSSProperties["flexDirection"];
        controlsBorder: CSSProperties["border"];
        controlsJustifyContent: CSSProperties["justifyContent"];
        controlsBackgroundColor: CSSProperties["backgroundColor"];
        thumbnailBorderRadius: CSSProperties["borderRadius"];
        thumbnailSelectedBorder: CSSProperties["border"];
    };
    drawer: {
        backDropBackgroundColor: CSSProperties["backgroundColor"];
    };
    forms: {
        infoMessage: {
            textColor: string;
        };
        label: {
            fontWeight: string;
        };
    };
    snackbar: {
        actionButtonVariant: string;
        actionMarginLeft: CSSProperties["marginLeft"];
    };
};

/** Theme components props */
export declare type HvThemeComponentsProps<ComponentNames extends string = string> = {
    /** Component properties to override */
    components?: Record<ComponentNames, Record<string, any>>;
};

export declare type HvThemeStructure = {
    name: string;
    base?: HvBaseTheme;
} & HvThemeComponents & HvThemeComponentsProps & HvThemeTypography & Omit<HvThemeTokens, "colors"> & {
    colors: {
        modes: {
            [key: string]: HvThemeColorModeStructure;
        };
    };
};

export declare type HvThemeTokens = typeof flattenTokens;

export declare type HvThemeTypography = {
    typography: {
        display: HvThemeTypographyProps;
        title1: HvThemeTypographyProps;
        title2: HvThemeTypographyProps;
        title3: HvThemeTypographyProps;
        title4: HvThemeTypographyProps;
        label: HvThemeTypographyProps;
        body: HvThemeTypographyProps;
        caption1: HvThemeTypographyProps;
        caption2: HvThemeTypographyProps;
        ["5xlTitle"]: HvThemeTypographyProps;
        ["4xlTitle"]: HvThemeTypographyProps;
        xxlTitle: HvThemeTypographyProps;
        lTitle: HvThemeTypographyProps;
        sTitle: HvThemeTypographyProps;
        xxsTitle: HvThemeTypographyProps;
        sectionTitle: HvThemeTypographyProps;
        placeholderText: HvThemeTypographyProps;
        link: HvThemeTypographyProps;
        disabledText: HvThemeTypographyProps;
        selectedNavText: HvThemeTypographyProps;
        vizTextDisabled: HvThemeTypographyProps;
        xsInlineLink: HvThemeTypographyProps;
    };
};

export declare type HvThemeTypographyProps = Pick<CSSProperties, "color" | "fontSize" | "letterSpacing" | "lineHeight" | "fontWeight" | "textDecoration">;

export declare type HvThemeUtils = {
    /**
     * Utility function to generate spacing values from the theme.
     *
     * @example
     * theme.spacing(2) // 16px (2*8px)
     * theme.spacing("md", "inherit", "42px") // 24px inherit 42px
     */
    spacing: (...args: [SpacingValue[]] | SpacingValue[]) => string;
};

export declare type HvThemeVars = DeepString<HvThemeTokens> & DeepString<HvThemeComponents> & DeepString<HvThemeTypography>;

export declare const lineHeights: {
    none: string;
    xs: string;
    sm: string;
    base: string;
    lg: string;
    xl: string;
    xl2: string;
    xl3: string;
    xl4: string;
};

/**
 * Generate a theme base on the options received.
 * Takes an incomplete theme object and adds the missing parts.
 *
 * @param options The options to generate the theme
 * @returns The generated theme
 */
export declare const makeTheme: (options: HvCustomTheme | ((theme: HvTheme) => HvCustomTheme)) => HvThemeStructure;

export declare const mapCSSVars: <T extends object>(obj: T, prefix?: string) => DeepString<T>;

export declare const mergeTheme: (...objects: any[]) => any;

export declare const parseTheme: (themes: HvThemeStructure[], theme?: string, colorMode?: string) => {
    theme: HvThemeStructure;
    selectedTheme: string;
    selectedMode: string;
    colorModes: string[];
    colorScheme: string;
};

export declare const radii: {
    none: string;
    base: string;
    round: string;
    circle: string;
    full: string;
};

declare const semanticLight: {
    positive: string;
    positive_80: string;
    positive_120: string;
    neutral: string;
    warning: string;
    warning_120: string;
    warning_140: string;
    negative: string;
    negative_80: string;
    negative_120: string;
    catastrophic: string;
    sema6: string;
    neutral_20: string;
    positive_20: string;
    negative_20: string;
    sema10: string;
    sema11: string;
    sema12: string;
    sema13: string;
    sema14: string;
    sema15: string;
    sema16: string;
    sema17: string;
    sema18: string;
    sema19: string;
    warning_20: string;
};

export declare const sizes: {
    xs: string;
    sm: string;
    md: string;
    lg: string;
    xl: string;
};

export declare const space: {
    base: number;
    xs: string;
    sm: string;
    md: string;
    lg: string;
    xl: string;
};

export declare const spacingUtil: (value: SpacingValue) => string;

export declare const spacingUtilOld: (value: SpacingValue) => string;

export declare type SpacingValue = number | HvThemeBreakpoint | (string & {});

declare const supportLight: {
    supp1: string;
    supp2: string;
    supp3: string;
    supp4: string;
    supp5: string;
};

export declare const theme: HvTheme;

declare namespace themes {
    export {
        ds3,
        ds5
    }
}
export { themes }

declare namespace tokens {
    export {
        breakpoints,
        HvBreakpoints,
        colors,
        HvAccentColor,
        HvAtmosphereColor,
        HvBaseColor,
        HvSemanticColor,
        HvSupportColor,
        HvCategoricalColor,
        HvColor,
        HvColorAny,
        radii,
        space,
        sizes,
        HvSize,
        fontFamily,
        fontSizes,
        fontWeights,
        lineHeights,
        zIndices
    }
}

export declare const zIndices: {
    hide: number;
    base: number;
    docked: number;
    sticky: number;
    fab: number;
    banner: number;
    overlay: number;
    modal: number;
    dropdown: number;
    popover: number;
    tooltip: number;
    skipLink: number;
    toast: number;
};

export { }
