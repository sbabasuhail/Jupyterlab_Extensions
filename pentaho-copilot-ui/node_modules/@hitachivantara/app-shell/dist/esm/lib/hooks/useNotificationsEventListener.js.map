{"version":3,"file":"useNotificationsEventListener.js","sources":["../../../../src/lib/hooks/useNotificationsEventListener.ts"],"sourcesContent":["import { useHvSnackbar } from \"@hitachivantara/uikit-react-core\";\n\nimport useBannerContext from \"../../providers/hooks/useBannerContext\";\nimport NOTIFICATION_TYPE, { NotificationDetail } from \"../types/notifications\";\n\nconst useNotificationsEventListener = () => {\n  const { enqueueSnackbar } = useHvSnackbar();\n  const { show } = useBannerContext();\n\n  const handleCustomEventSnackbar = (notification: NotificationDetail) => {\n    const snackbarContentProps = notification.actions\n      ? {\n          action: Array.isArray(notification.actions)\n            ? notification.actions[0]\n            : notification.actions,\n          actionCallback: notification.actionsCallback\n        }\n      : undefined;\n\n    if (notification.message) {\n      enqueueSnackbar(notification.message, {\n        variant: notification.variant || \"default\",\n        snackbarContentProps\n      });\n    }\n  };\n\n  const handleCustomEventBanner = (notification: NotificationDetail) => {\n    if (notification.message) {\n      show(notification);\n    }\n  };\n\n  const handleNotificationEvent = (event: CustomEvent) => {\n    const type = event.detail?.type.toUpperCase();\n    if (type === NOTIFICATION_TYPE.SNACKBAR) {\n      handleCustomEventSnackbar(event.detail as NotificationDetail);\n    } else if (type === NOTIFICATION_TYPE.BANNER) {\n      handleCustomEventBanner(event.detail as NotificationDetail);\n    } else {\n      console.warn(\"Invalid notification type\", type);\n    }\n  };\n\n  return { handleNotificationEvent };\n};\n\nexport default useNotificationsEventListener;\n"],"names":["useNotificationsEventListener","enqueueSnackbar","useHvSnackbar","show","useBannerContext","handleCustomEventSnackbar","notification","snackbarContentProps","actions","action","Array","isArray","actionCallback","actionsCallback","undefined","message","variant","handleCustomEventBanner","handleNotificationEvent","event","type","detail","toUpperCase","NOTIFICATION_TYPE","SNACKBAR","BANNER","warn","useNotificationsEventListener$1"],"mappings":";;;AAKA,MAAMA,IAAgCA,MAAM;AACpC,QAAA;AAAA,IAAEC,iBAAAA;AAAAA,MAAoBC,EAAc,GACpC;AAAA,IAAEC,MAAAA;AAAAA,MAASC,EAAiB,GAE5BC,IAA4BA,CAACC,MAAqC;AAChEC,UAAAA,IAAuBD,EAAaE,UACtC;AAAA,MACEC,QAAQC,MAAMC,QAAQL,EAAaE,OAAO,IACtCF,EAAaE,QAAQ,CAAC,IACtBF,EAAaE;AAAAA,MACjBI,gBAAgBN,EAAaO;AAAAA,IAE/BC,IAAAA;AAEJ,IAAIR,EAAaS,WACfd,EAAgBK,EAAaS,SAAS;AAAA,MACpCC,SAASV,EAAaU,WAAW;AAAA,MACjCT,sBAAAA;AAAAA,IAAAA,CACD;AAAA,EACH,GAGIU,IAA0BA,CAACX,MAAqC;AACpE,IAAIA,EAAaS,WACfZ,EAAKG,CAAY;AAAA,EACnB;AAcK,SAAA;AAAA,IAAEY,yBAXuBA,CAACC,MAAuB;;AACtD,YAAMC,KAAOD,IAAAA,EAAME,WAANF,gBAAAA,EAAcC,KAAKE;AAC5BF,MAAAA,MAASG,EAAkBC,WAC7BnB,EAA0Bc,EAAME,MAA6B,IACpDD,MAASG,EAAkBE,SACpCR,EAAwBE,EAAME,MAA6B,IAEnDK,QAAAA,KAAK,6BAA6BN,CAAI;AAAA,IAChD;AAAA,EAGOF;AACX,GAEAS,IAAe3B;"}