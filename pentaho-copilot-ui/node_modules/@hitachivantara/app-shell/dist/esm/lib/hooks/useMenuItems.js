import { useContext as h, useMemo as f, useState as p, useEffect as v } from "react";
import { useLocation as S } from "react-router-dom";
import { HvAppShellRuntimeContext as A } from "@hitachivantara/app-shell-shared";
import { createMenuItems as C, getRootIdFromItemId as l, findItemById as N, findFirstLeafItem as _, searchHrefInMenuItems as x } from "../utils/navigationUtil.js";
import E from "./useAppShellConfig.js";
import O from "./useNavigation.js";
import { CONFIG_TRANSLATIONS_NAMESPACE as T } from "../i18n/index.js";
const F = 2, L = () => {
  const {
    pathname: i,
    search: u,
    state: n
  } = S(), m = E(), {
    navigate: I
  } = O(), {
    i18n: s
  } = h(A) ?? {}, c = f(() => (s == null ? void 0 : s.getFixedT(s.language, T)) ?? // should not happen, but fallback if the i18n instance is not available
  ((o) => o), [s]), e = f(() => {
    const o = m.navigationMode === "ONLY_TOP" ? F : void 0;
    return C(c, m.menu, o);
  }, [m, c]), [M, r] = p(void 0), [g, d] = p(void 0);
  return v(() => {
    if (!e.length)
      return;
    if (n && n.selectedItemId) {
      d(l(n.selectedItemId));
      const t = N(e, n.selectedItemId);
      if (t != null && t.data && t.data.length > 0) {
        const a = _(t.data);
        r(a == null ? void 0 : a.id);
      } else
        r(t == null ? void 0 : t.id);
      return;
    }
    const o = x(e, i, u);
    if (o) {
      d(l(o)), r(o);
      return;
    }
    if (i === "/" && e[0].href) {
      I(e[0].href, {
        state: {
          selectedItemId: e[0].id
        }
      });
      return;
    }
    d(void 0), r(void 0);
  }, [i, u, n, e, I]), {
    items: e,
    selectedMenuItemId: M,
    rootMenuItemId: g
  };
}, U = L;
export {
  U as default
};
//# sourceMappingURL=useMenuItems.js.map
