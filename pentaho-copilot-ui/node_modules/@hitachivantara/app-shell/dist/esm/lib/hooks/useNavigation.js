import { useContext as S, useCallback as d } from "react";
import { useNavigate as w } from "react-router-dom";
import { HvAppShellViewContext as y } from "@hitachivantara/app-shell-shared";
import { compileHref as b } from "../utils/navigationUtil.js";
import R from "./useAppShellConfig.js";
const N = (u) => u.viewBundle !== void 0, j = () => {
  const u = R(), s = S(y), c = w(), f = d((e) => {
    var $, v;
    let t, r, l, g;
    N(e) ? {
      viewBundle: t,
      pathParams: r,
      search: l,
      hash: g
    } = e : t = e;
    const o = t.replace(/\$/, "_");
    let p, n;
    if (o.startsWith("/"))
      p = s == null ? void 0 : s.id, n = o.substring(1);
    else {
      const a = o.split("/");
      a[0].startsWith("@") ? (p = `${a[0]}/${a[1]}`, a.splice(0, 2), n = a.join("/")) : ([p] = a, a.splice(0, 1), n = a.join("/"));
    }
    const m = ($ = u.apps) == null ? void 0 : $.find((a) => a.id === p);
    if (m == null)
      return;
    const i = (v = m.views) == null ? void 0 : v.find((a) => a.bundle === n || a.bundle === `${n}.js` || a.bundle === `src/${n}`);
    return i != null && i.route ? `${b(i == null ? void 0 : i.route, r)}${l ?? ""}${g ?? ""}` : void 0;
  }, [u, s == null ? void 0 : s.id]), h = d((e, t) => {
    if (!e) {
      console.warn("Navigate request to an empty path. Skipping");
      return;
    }
    if (!t) {
      c(e);
      return;
    }
    t != null && t.replace ? c(e, {
      replace: !0,
      state: t.state
    }) : c(e, {
      state: t == null ? void 0 : t.state
    });
  }, [c]), k = d((e, t) => {
    let r;
    if (typeof e == "string") {
      if (!e) {
        console.warn("Navigate request to an empty path. Skipping");
        return;
      }
      r = e;
    } else if (N(e)) {
      const l = f(e.viewBundle);
      if (!l) {
        console.warn(`Navigate request to a non existing path [${e.viewBundle}]. Skipping`);
        return;
      }
      r = `${b(l, e.pathParams)}${e.search ?? ""}${e.hash ?? ""}`;
    } else
      r = `${e.pathname}${e.search ?? ""}${e.hash ?? ""}`;
    h(r, t);
  }, [f, h]);
  return {
    getViewRoute: f,
    navigate: k
  };
}, W = j;
export {
  W as default
};
//# sourceMappingURL=useNavigation.js.map
