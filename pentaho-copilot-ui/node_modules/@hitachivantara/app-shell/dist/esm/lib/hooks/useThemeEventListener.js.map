{"version":3,"file":"useThemeEventListener.js","sources":["../../../../src/lib/hooks/useThemeEventListener.ts"],"sourcesContent":["import { useTheme } from \"@hitachivantara/uikit-react-core\";\n\nimport { ThemingDetails } from \"../types/theming\";\nimport useLocalStorage, { LOCAL_STORAGE_KEYS } from \"./useLocalStorage\";\n\nconst useThemeEventListener = () => {\n  const { selectedTheme, changeTheme, selectedMode, colorModes } = useTheme();\n  const { setStoredValue } = useLocalStorage(LOCAL_STORAGE_KEYS.COLOR_MODE);\n\n  const getNextColorMode = () => {\n    const index = colorModes.indexOf(selectedMode);\n\n    const nextIndex = (index + 1) % colorModes.length;\n    return colorModes[nextIndex];\n  };\n\n  const handleThemeEvent = (event: CustomEvent) => {\n    const { colorMode } = event.detail as ThemingDetails;\n    const newColorMode =\n      colorModes.indexOf(colorMode) !== -1 ? colorMode : getNextColorMode();\n\n    // For now we only want to change the colorMode\n    changeTheme(selectedTheme, newColorMode);\n    setStoredValue(newColorMode);\n  };\n\n  return { handleThemeEvent };\n};\n\nexport default useThemeEventListener;\n"],"names":["useThemeEventListener","selectedTheme","changeTheme","selectedMode","colorModes","useTheme","setStoredValue","useLocalStorage","LOCAL_STORAGE_KEYS","COLOR_MODE","getNextColorMode","nextIndex","indexOf","length","handleThemeEvent","event","colorMode","detail","newColorMode","useThemeEventListener$1"],"mappings":";;AAKA,MAAMA,IAAwBA,MAAM;AAC5B,QAAA;AAAA,IAAEC,eAAAA;AAAAA,IAAeC,aAAAA;AAAAA,IAAaC,cAAAA;AAAAA,IAAcC,YAAAA;AAAAA,MAAeC,EAAS,GACpE;AAAA,IAAEC,gBAAAA;AAAAA,EAAAA,IAAmBC,EAAgBC,EAAmBC,UAAU,GAElEC,IAAmBA,MAAM;AAGvBC,UAAAA,KAFQP,EAAWQ,QAAQT,CAAY,IAElB,KAAKC,EAAWS;AAC3C,WAAOT,EAAWO,CAAS;AAAA,EAAA;AAatB,SAAA;AAAA,IAAEG,kBAVgBA,CAACC,MAAuB;AACzC,YAAA;AAAA,QAAEC,WAAAA;AAAAA,MAAAA,IAAcD,EAAME,QACtBC,IACJd,EAAWQ,QAAQI,CAAS,MAAM,KAAKA,IAAYN;AAGrDR,MAAAA,EAAYD,GAAeiB,CAAY,GACvCZ,EAAeY,CAAY;AAAA,IAAA;AAAA,EAGpBJ;AACX,GAEAK,IAAenB;"}