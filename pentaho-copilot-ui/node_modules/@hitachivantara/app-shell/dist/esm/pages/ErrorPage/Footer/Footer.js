import { jsx as e } from "@emotion/react/jsx-runtime";
import { useTranslation as f, Trans as u } from "react-i18next";
import { useErrorBoundary as d } from "react-error-boundary";
import { HvTypography as n } from "@hitachivantara/uikit-react-core";
import g from "../../../providers/hooks/useNavigationContext.js";
import h from "../../../lib/hooks/useNavigation.js";
import v from "../../../lib/hooks/useAppShellConfig.js";
import y from "./styles.js";
const F = () => {
  const {
    t: a
  } = f(), {
    navigate: i
  } = h(), {
    navigationMode: l
  } = v(), {
    resetBoundary: s
  } = d(), {
    items: o,
    verticalNavigationItems: r,
    isCompactMode: m
  } = g(), t = (() => !m && l !== "ONLY_LEFT" ? o.length > 0 ? o[0] : null : r.length > 0 ? r[0] : null)(), c = (p) => {
    p.preventDefault(), t != null && t.href && (s(), i(t.href, {
      state: {
        selectedItemId: t.id
      }
    }));
  };
  return t && /* @__PURE__ */ e(y, { children: /* @__PURE__ */ e(n, { variant: "body", children: /* @__PURE__ */ e(u, { t: a, i18nKey: "errors.footer", values: {
    label: t.label
  }, components: {
    navigate: /* @__PURE__ */ e(n, { link: !0, component: "a", href: t.href, variant: "label", onClick: c, children: t.label })
  } }) }) });
}, E = F;
export {
  E as default
};
//# sourceMappingURL=Footer.js.map
