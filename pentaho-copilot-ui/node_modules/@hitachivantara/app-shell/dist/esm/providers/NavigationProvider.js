import { jsx as I } from "@emotion/react/jsx-runtime";
import C, { useState as v, useMemo as s, useEffect as N, useCallback as L } from "react";
import { useTheme as P, useMediaQuery as p } from "@mui/material";
import O from "../lib/hooks/useAppShellConfig.js";
import S from "../lib/hooks/useMenuItems.js";
import { removeHrefFromMenuItemsWithChildren as M, findItemById as A } from "../lib/utils/navigationUtil.js";
const w = C.createContext({
  selectedMenuItemId: void 0,
  rootMenuItemId: void 0,
  items: [],
  verticalNavigationItems: [],
  hasVerticalNavigation: !1,
  showHeaderSubMenu: !1,
  isCompactMode: !1,
  verticalNavigationMode: "EXPANDED",
  switchVerticalNavigationMode: () => {
  }
}), T = ({
  children: E
}) => {
  const {
    navigationMode: i
  } = O(), {
    items: t,
    selectedMenuItemId: u,
    rootMenuItemId: r
  } = S(), g = P(), e = p(g.breakpoints.down("md")), [c, n] = v(e ? "CLOSED" : "EXPANDED"), [m, D] = v(!1), a = s(() => {
    var f;
    if (e)
      return t;
    if (i === "ONLY_LEFT")
      return M(t);
    const o = r && ((f = A(t, r)) == null ? void 0 : f.data) || [];
    return M(o);
  }, [t, i, r, e]), d = s(() => e ? !0 : i === "ONLY_TOP" ? !1 : a && a.length > 0, [i, a, e]);
  N(() => {
    n(e ? "CLOSED" : "EXPANDED");
  }, [e]), N(() => {
    D(i === "ONLY_TOP" && t.some((o) => o.data && o.data.length > 0));
  }, [i, t]);
  const l = L(() => {
    n((o) => e ? o === "CLOSED" ? "EXPANDED" : "CLOSED" : o === "COLLAPSED" ? "EXPANDED" : "COLLAPSED");
  }, [e]), h = s(() => ({
    selectedMenuItemId: u,
    rootMenuItemId: r,
    items: t,
    verticalNavigationItems: a,
    hasVerticalNavigation: d,
    showHeaderSubMenu: m,
    isCompactMode: e,
    verticalNavigationMode: c,
    switchVerticalNavigationMode: l
  }), [u, r, t, a, d, m, e, c, l]);
  return /* @__PURE__ */ I(w.Provider, { value: h, children: E });
}, _ = T;
export {
  w as NavigationContext,
  _ as default
};
//# sourceMappingURL=NavigationProvider.js.map
