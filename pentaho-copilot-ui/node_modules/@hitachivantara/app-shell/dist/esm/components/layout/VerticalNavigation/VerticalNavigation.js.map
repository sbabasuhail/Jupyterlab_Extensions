{"version":3,"file":"VerticalNavigation.js","sources":["../../../../../src/components/layout/VerticalNavigation/VerticalNavigation.tsx"],"sourcesContent":["import { useTranslation } from \"react-i18next\";\n\nimport {\n  HvVerticalNavigationHeader,\n  HvVerticalNavigationTree,\n  HvVerticalNavigationActions\n} from \"@hitachivantara/uikit-react-core\";\n\nimport { useEffect, useRef } from \"react\";\nimport { useNavigation } from \"../../../lib/hooks\";\nimport { MenuItem } from \"../../../lib/types\";\nimport useNavigationContext from \"../../../providers/hooks/useNavigationContext\";\nimport { StyledHvVerticalNavigation, navigationPopupStyles } from \"./styles\";\n\nimport withClickAwayListener from \"../../hoc/withClickAwayListener\";\nimport useLayoutContext from \"../../../providers/hooks/useLayoutContext\";\n\nconst VerticalNavigation = () => {\n  const { t } = useTranslation();\n  const {\n    selectedMenuItemId,\n    rootMenuItemId,\n    verticalNavigationItems,\n    isCompactMode,\n    verticalNavigationMode,\n    switchVerticalNavigationMode\n  } = useNavigationContext();\n  const { setVerticalNavigationWidth } = useLayoutContext();\n  const { navigate } = useNavigation();\n  const verticalNavigationRef = useRef<HTMLDivElement>(null);\n  const isVerticalNavigationExpanded = verticalNavigationMode === \"EXPANDED\";\n\n  const changeHandler = (\n    event: React.SyntheticEvent<Element, Event>,\n    selectedItem: MenuItem\n  ) => {\n    // Due to the change from buttons to links on the navigation tree, we need to prevent the default behaviour of\n    // the event to avoid full refreshes when clicking on the links.\n    event.preventDefault();\n\n    if (selectedItem.href) {\n      navigate(selectedItem.href, {\n        state: { selectedItemId: selectedItem.id }\n      });\n\n      if (isCompactMode) {\n        switchVerticalNavigationMode();\n      }\n    }\n  };\n\n  const closePanelHandler = () => {\n    switchVerticalNavigationMode();\n  };\n\n  useEffect(() => {\n    const { current } = verticalNavigationRef;\n    const firstChild = current?.childNodes[0] as HTMLElement;\n    if (firstChild && !isCompactMode) {\n      setVerticalNavigationWidth(firstChild.offsetWidth);\n    } else {\n      setVerticalNavigationWidth(0);\n    }\n\n    return () => setVerticalNavigationWidth(0);\n  }, [verticalNavigationMode, isCompactMode, setVerticalNavigationWidth]);\n\n  const collapseButtonAriaLabel = isVerticalNavigationExpanded\n    ? t(\"verticalNavigation.ariaLabelCollapse\")\n    : t(\"verticalNavigation.ariaLabelExpand\");\n\n  return (\n    <div ref={verticalNavigationRef}>\n      <StyledHvVerticalNavigation\n        isCompactMode={isCompactMode}\n        open={isVerticalNavigationExpanded}\n        useIcons\n        slider={isCompactMode}>\n        <HvVerticalNavigationHeader\n          title={t(\"verticalNavigation.title\") ?? \"\"}\n          onCollapseButtonClick={!isCompactMode ? closePanelHandler : undefined}\n          collapseButtonProps={{\n            \"aria-label\": collapseButtonAriaLabel,\n            \"aria-expanded\": isVerticalNavigationExpanded\n          }}\n          backButtonProps={{\n            \"aria-label\":\n              t(\"verticalNavigation.ariaLabelHeaderBackButton\") ?? \"\"\n          }}\n        />\n\n        <HvVerticalNavigationTree\n          key={rootMenuItemId}\n          mode=\"navigation\"\n          collapsible\n          aria-label={t(\"verticalNavigation.ariaLabelNavigationTree\") ?? \"\"}\n          selected={selectedMenuItemId ?? \"\"}\n          onChange={changeHandler}\n          data={verticalNavigationItems}\n          classes={{ navigationPopup: navigationPopupStyles }}\n          sliderForwardButtonAriaLabel={\n            t(\"verticalNavigation.ariaLabelSliderForwardButton\") ?? \"\"\n          }\n        />\n\n        <HvVerticalNavigationActions />\n      </StyledHvVerticalNavigation>\n    </div>\n  );\n};\n\nexport default withClickAwayListener(VerticalNavigation);\n"],"names":["VerticalNavigation","t","useTranslation","selectedMenuItemId","rootMenuItemId","verticalNavigationItems","isCompactMode","verticalNavigationMode","switchVerticalNavigationMode","useNavigationContext","setVerticalNavigationWidth","useLayoutContext","navigate","useNavigation","verticalNavigationRef","useRef","isVerticalNavigationExpanded","changeHandler","event","selectedItem","preventDefault","href","state","selectedItemId","id","closePanelHandler","useEffect","current","firstChild","childNodes","offsetWidth","collapseButtonAriaLabel","jsx","jsxs","StyledHvVerticalNavigation","HvVerticalNavigationHeader","undefined","HvVerticalNavigationTree","navigationPopup","navigationPopupStyles","HvVerticalNavigationActions","withClickAwayListener"],"mappings":";;;;;;;;;AAiBA,MAAMA,IAAqBA,MAAM;AACzB,QAAA;AAAA,IAAEC,GAAAA;AAAAA,MAAMC,EAAe,GACvB;AAAA,IACJC,oBAAAA;AAAAA,IACAC,gBAAAA;AAAAA,IACAC,yBAAAA;AAAAA,IACAC,eAAAA;AAAAA,IACAC,wBAAAA;AAAAA,IACAC,8BAAAA;AAAAA,MACEC,EAAqB,GACnB;AAAA,IAAEC,4BAAAA;AAAAA,MAA+BC,EAAiB,GAClD;AAAA,IAAEC,UAAAA;AAAAA,MAAaC,EAAc,GAC7BC,IAAwBC,EAAuB,IAAI,GACnDC,IAA+BT,MAA2B,YAE1DU,IAAgBA,CACpBC,GACAC,MACG;AAGHD,IAAAA,EAAME,eAAe,GAEjBD,EAAaE,SACfT,EAASO,EAAaE,MAAM;AAAA,MAC1BC,OAAO;AAAA,QAAEC,gBAAgBJ,EAAaK;AAAAA,MAAG;AAAA,IAAA,CAC1C,GAEGlB,KAC2BE;EAEjC,GAGIiB,IAAoBA,MAAM;AACD,IAAAjB;EAAA;AAG/BkB,EAAAA,EAAU,MAAM;AACR,UAAA;AAAA,MAAEC,SAAAA;AAAAA,IAAYb,IAAAA,GACdc,IAAaD,KAAAA,gBAAAA,EAASE,WAAW;AACnCD,WACFlB,EADEkB,KAAc,CAACtB,IACUsB,EAAWE,cAEX,CAFsB,GAK5C,MAAMpB,EAA2B,CAAC;AAAA,EACxC,GAAA,CAACH,GAAwBD,GAAeI,CAA0B,CAAC;AAEtE,QAAMqB,IACF9B,EAD4Be,IAC1B,yCACA,oCADsC;AAG5C,SACG,gBAAAgB,EAAA,OAAA,EAAI,KAAKlB,GACR,UAAC,gBAAAmB,EAAAC,GAAA,EACC,eAAA5B,GACA,MAAMU,GACN,UAAQ,IACR,QAAQV,GACR,UAAA;AAAA,IAAC,gBAAA0B,EAAAG,GAAA,EACC,OAAOlC,EAAE,0BAA0B,KAAK,IACxC,uBAAwBK,IAAoC8B,SAApBX,GACxC,qBAAqB;AAAA,MACnB,cAAcM;AAAAA,MACd,iBAAiBf;AAAAA,OAEnB,iBAAiB;AAAA,MACf,cACEf,EAAE,8CAA8C,KAAK;AAAA,IAAA,GACvD;AAAA,sBAGHoC,GAEC,EAAA,MAAK,cACL,aAAW,IACX,cAAYpC,EAAE,4CAA4C,KAAK,IAC/D,UAAUE,KAAsB,IAChC,UAAUc,GACV,MAAMZ,GACN,SAAS;AAAA,MAAEiC,iBAAiBC;AAAAA,IAAAA,GAC5B,8BACEtC,EAAE,iDAAiD,KAAK,MATrDG,CAUJ;AAAA,sBAGFoC,GAA2B,EAAA;AAAA,EAAA,EAC9B,CAAA,EACF,CAAA;AAEJ,GAEeC,IAAAA,EAAsBzC,CAAkB;"}