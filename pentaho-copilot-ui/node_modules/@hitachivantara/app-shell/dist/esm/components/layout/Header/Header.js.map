{"version":3,"file":"Header.js","sources":["../../../../../src/components/layout/Header/Header.tsx"],"sourcesContent":["import { Helmet } from \"react-helmet-async\";\nimport { useTranslation } from \"react-i18next\";\n\nimport {\n  HvHeader,\n  HvHeaderBrand,\n  HvHeaderNavigation,\n  HvHeaderNavigationItemProp\n} from \"@hitachivantara/uikit-react-core\";\n\nimport BrandLogo from \"./BrandLogo\";\nimport StyledIconWrapper from \"./styles\";\nimport useAppShellConfig from \"../../../lib/hooks/useAppShellConfig\";\nimport useNavigation from \"../../../lib/hooks/useNavigation\";\n\nimport useNavigationContext from \"../../../providers/hooks/useNavigationContext\";\n\nimport { CONFIG_TRANSLATIONS_NAMESPACE } from \"../../../lib/i18n\";\n\nimport HeaderActions from \"./HeaderActions\";\n\nconst Header = () => {\n  const { t: tConfig } = useTranslation(CONFIG_TRANSLATIONS_NAMESPACE);\n  const appShellConfig = useAppShellConfig();\n  const { items, selectedMenuItemId, rootMenuItemId, isCompactMode } =\n    useNavigationContext();\n  const { navigate } = useNavigation();\n\n  const isOnlyTopMode = appShellConfig.navigationMode === \"ONLY_TOP\";\n  const showNavigation =\n    !isCompactMode &&\n    appShellConfig.navigationMode !== \"ONLY_LEFT\" &&\n    items.length > 0;\n\n  const handleNavigationChange = (\n    event: React.MouseEvent<Element, MouseEvent>,\n    selectedItem: HvHeaderNavigationItemProp\n  ) => {\n    if (selectedItem.href) {\n      navigate(selectedItem.href, {\n        state: { selectedItemId: selectedItem.id }\n      });\n    }\n  };\n\n  const name = appShellConfig.name ? tConfig(appShellConfig.name) : \"\";\n\n  return (\n    <HvHeader position=\"fixed\">\n      <Helmet>\n        <title>{name}</title>\n      </Helmet>\n\n      <HvHeaderBrand\n        logo={\n          <StyledIconWrapper>\n            <BrandLogo logo={appShellConfig.logo} />\n          </StyledIconWrapper>\n        }\n        name={name}\n      />\n      {showNavigation && (\n        <HvHeaderNavigation\n          data={items}\n          selected={isOnlyTopMode ? selectedMenuItemId : rootMenuItemId}\n          onClick={handleNavigationChange}\n          levels={isOnlyTopMode ? 2 : 1}\n        />\n      )}\n\n      <HeaderActions />\n    </HvHeader>\n  );\n};\n\nexport default Header;\n"],"names":["Header","t","tConfig","useTranslation","CONFIG_TRANSLATIONS_NAMESPACE","appShellConfig","useAppShellConfig","items","selectedMenuItemId","rootMenuItemId","isCompactMode","useNavigationContext","navigate","useNavigation","isOnlyTopMode","navigationMode","showNavigation","length","handleNavigationChange","event","selectedItem","href","state","selectedItemId","id","name","jsxs","HvHeader","jsx","Helmet","HvHeaderBrand","StyledIconWrapper","BrandLogo","logo","HvHeaderNavigation","HeaderActions","Header$1"],"mappings":";;;;;;;;;;;AAqBA,MAAMA,IAASA,MAAM;AACb,QAAA;AAAA,IAAEC,GAAGC;AAAAA,EAAAA,IAAYC,EAAeC,CAA6B,GAC7DC,IAAiBC,KACjB;AAAA,IAAEC,OAAAA;AAAAA,IAAOC,oBAAAA;AAAAA,IAAoBC,gBAAAA;AAAAA,IAAgBC,eAAAA;AAAAA,MACjDC,EAAqB,GACjB;AAAA,IAAEC,UAAAA;AAAAA,MAAaC,EAAc,GAE7BC,IAAgBT,EAAeU,mBAAmB,YAClDC,IACJ,CAACN,KACDL,EAAeU,mBAAmB,eAClCR,EAAMU,SAAS,GAEXC,IAAyBA,CAC7BC,GACAC,MACG;AACH,IAAIA,EAAaC,QACfT,EAASQ,EAAaC,MAAM;AAAA,MAC1BC,OAAO;AAAA,QAAEC,gBAAgBH,EAAaI;AAAAA,MAAG;AAAA,IAAA,CAC1C;AAAA,EACH,GAGIC,IAAOpB,EAAeoB,OAAOvB,EAAQG,EAAeoB,IAAI,IAAI;AAGhE,SAAA,gBAAAC,EAACC,GAAS,EAAA,UAAS,SACjB,UAAA;AAAA,IAAA,gBAAAC,EAACC,GACC,EAAA,UAAA,gBAAAD,EAAC,SAAOH,EAAAA,UAAAA,EAAK,CAAA,GACf;AAAA,IAEC,gBAAAG,EAAAE,GAAA,EACC,MACE,gBAAAF,EAACG,GACC,EAAA,UAAA,gBAAAH,EAACI,GAAU,EAAA,MAAM3B,EAAe4B,KAAK,CAAA,EACvC,CAAA,GAEF,MAAAR,GAAW;AAAA,IAEZT,KACC,gBAAAY,EAACM,GACC,EAAA,MAAM3B,GACN,UAAUO,IAAgBN,IAAqBC,GAC/C,SAASS,GACT,QAAQJ,IAAgB,IAAI,GAE/B;AAAA,sBAEAqB,GAAa,EAAA;AAAA,EAChB,EAAA,CAAA;AAEJ,GAEAC,IAAepC;"}