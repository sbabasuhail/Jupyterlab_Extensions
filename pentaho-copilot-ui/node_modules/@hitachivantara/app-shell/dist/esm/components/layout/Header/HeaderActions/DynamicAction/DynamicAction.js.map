{"version":3,"file":"DynamicAction.js","sources":["../../../../../../../src/components/layout/Header/HeaderActions/DynamicAction/DynamicAction.tsx"],"sourcesContent":["import { Suspense, lazy, memo, useEffect, useState } from \"react\";\n\nexport interface DynamicActionProps {\n  bundle: string;\n}\n\nconst DynamicAction = ({ bundle, ...others }: DynamicActionProps) => {\n  // Create a state to keep track of errors for each component\n  const [loadError, setLoadError] = useState(null);\n\n  useEffect(() => {\n    setLoadError(null);\n  }, [bundle]);\n\n  const Action = lazy(() =>\n    import(/* @vite-ignore */ bundle).catch(error => {\n      console.error(error);\n      // Update the state to track the error for this component\n      setLoadError(error);\n      return { default: () => null };\n    })\n  );\n\n  return (\n    <Suspense fallback={null}>\n      {/* Render the component only if there was no error while loading it */}\n      {!loadError && <Action {...others} />}\n    </Suspense>\n  );\n};\n\nexport default memo(DynamicAction);\n"],"names":["DynamicAction","bundle","others","loadError","setLoadError","useState","useEffect","Action","lazy","catch","error","console","default","jsx","Suspense","memo"],"mappings":";;AAMA,MAAMA,IAAgBA,CAAC;AAAA,EAAEC,QAAAA;AAAAA,EAAQ,GAAGC;AAA2B,MAAM;AAEnE,QAAM,CAACC,GAAWC,CAAY,IAAIC,EAAS,IAAI;AAE/CC,EAAAA,EAAU,MAAM;AACdF,IAAAA,EAAa,IAAI;AAAA,EAAA,GAChB,CAACH,CAAM,CAAC;AAELM,QAAAA,IAASC,EAAK,MAClB;AAAA;AAAA,IAA0BP;AAAAA,IAAQQ,MAAMC,CAASA,OAC/CC,QAAQD,MAAMA,CAAK,GAEnBN,EAAaM,CAAK,GACX;AAAA,IAAEE,SAASA,MAAM;AAAA,EAAA,EACzB,CACH;AAGE,SAAA,gBAAAC,EAACC,GAAS,EAAA,UAAU,MAEjB,UAAA,CAACX,KAAc,gBAAAU,EAAAN,GAAA,EAAO,GAAIL,EAAU,CAAA,EACvC,CAAA;AAEJ,GAEea,IAAAA,EAAKf,CAAa;"}