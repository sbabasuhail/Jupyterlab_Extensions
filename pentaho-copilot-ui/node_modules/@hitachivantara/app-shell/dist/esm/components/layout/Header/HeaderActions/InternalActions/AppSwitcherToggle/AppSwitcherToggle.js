import { jsx as r, jsxs as u } from "@emotion/react/jsx-runtime";
import { useState as g } from "react";
import { useTranslation as m } from "react-i18next";
import { createPortal as w } from "react-dom";
import { v4 as C } from "uuid";
import { ClickAwayListener as P } from "@mui/material";
import { HvButton as k, HvAppSwitcher as v, HvTypography as y } from "@hitachivantara/uikit-react-core";
import b from "./styles.js";
import d from "../../../../../IconUiKit/index.js";
import { CONFIG_TRANSLATIONS_NAMESPACE as T } from "../../../../../../lib/i18n/index.js";
import x from "../../../../../../lib/utils/textUtil.js";
import I from "../../../../../../lib/utils/documentUtil.js";
const E = ({
  title: o,
  apps: t
}) => {
  const {
    t: l
  } = m(), {
    t: i
  } = m(T), [n, a] = g(!1), h = () => t ? t.map((e) => ({
    name: i(e.label),
    description: e.description ? i(e.description).toString() : void 0,
    url: x(e.url, ":") ? e.url : i(e.url).toString(),
    target: e.target === "NEW" ? "_blank" : "_top",
    iconElement: e.icon && /* @__PURE__ */ r(d, { name: e.icon.name })
  })) : [], c = () => {
    a(!1);
  }, S = () => {
    c();
  }, f = () => {
    a(!n);
  };
  if (!t || t.length === 0)
    return null;
  const s = o ? i(o) : l("header.appSwitcher.title"), p = `appSwitcherPanel-${C()}`, A = {
    ...n ? {
      "aria-controls": p
    } : {}
  };
  return /* @__PURE__ */ r(P, { onClickAway: c, children: /* @__PURE__ */ u("div", { style: {
    display: "flex",
    margin: 0
  }, children: [
    /* @__PURE__ */ r(k, { icon: !0, onClick: f, variant: "secondaryGhost", "aria-label": s, "aria-expanded": n, ...A, children: /* @__PURE__ */ r(d, { name: "AppSwitcher" }) }),
    n && w(/* @__PURE__ */ r(b, { id: p, role: "region", "aria-label": l("header.appSwitcher.ariaLabel") ?? "", children: /* @__PURE__ */ r(v, { applications: h(), onActionClickedCallback: S, header: /* @__PURE__ */ r(y, { variant: "label", children: s }) }) }), I())
  ] }) });
}, M = E;
export {
  M as default
};
//# sourceMappingURL=AppSwitcherToggle.js.map
