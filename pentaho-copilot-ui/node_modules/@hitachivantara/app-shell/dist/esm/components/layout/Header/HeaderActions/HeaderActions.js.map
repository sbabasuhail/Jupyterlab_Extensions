{"version":3,"file":"HeaderActions.js","sources":["../../../../../../src/components/layout/Header/HeaderActions/HeaderActions.tsx"],"sourcesContent":["import { useTranslation } from \"react-i18next\";\n\nimport { HvButton, HvHeaderActions } from \"@hitachivantara/uikit-react-core\";\n\nimport { HvAppShellHeaderAction } from \"@hitachivantara/app-shell-shared\";\n\nimport useAppShellConfig from \"../../../../lib/hooks/useAppShellConfig\";\nimport useNavigationContext from \"../../../../providers/hooks/useNavigationContext\";\nimport IconUiKit from \"../../../IconUiKit\";\nimport DynamicAction from \"./DynamicAction\";\nimport InternalAction, {\n  internalActions\n} from \"./InternalActions/InternalAction/InternalAction\";\n\nconst HeaderActions = () => {\n  const { t } = useTranslation();\n  const appShellConfig = useAppShellConfig();\n  const {\n    isCompactMode,\n    switchVerticalNavigationMode,\n    verticalNavigationMode,\n    verticalNavigationItems\n  } = useNavigationContext();\n\n  const isVerticalNavigationClosed = verticalNavigationMode === \"CLOSED\";\n  const showVerticalNavigationButton =\n    isCompactMode && verticalNavigationItems.length > 0;\n\n  return (\n    <HvHeaderActions>\n      {appShellConfig?.header?.actions.map(\n        (action: HvAppShellHeaderAction, index: number) => {\n          const headerActionKey = `headerAction_${index}`;\n          if (\n            !internalActions.find(\n              internalAction => internalAction.bundle === action.bundle\n            )\n          ) {\n            return (\n              <DynamicAction\n                key={headerActionKey}\n                bundle={action.bundle}\n                {...action.config}\n              />\n            );\n          }\n          return (\n            <InternalAction\n              key={headerActionKey}\n              bundle={action.bundle}\n              {...action.config}\n            />\n          );\n        }\n      )}\n\n      {showVerticalNavigationButton && (\n        <HvButton\n          icon\n          onClick={() => switchVerticalNavigationMode()}\n          variant=\"secondaryGhost\"\n          aria-label={\n            isVerticalNavigationClosed\n              ? t(\"header.navigation.openNavigationPanel\") ?? \"\"\n              : t(\"header.navigation.closeNavigationPanel\") ?? \"\"\n          }\n          aria-expanded={!isVerticalNavigationClosed}>\n          <IconUiKit name={isVerticalNavigationClosed ? \"Menu\" : \"Close\"} />\n        </HvButton>\n      )}\n    </HvHeaderActions>\n  );\n};\n\nexport default HeaderActions;\n"],"names":["HeaderActions","t","useTranslation","appShellConfig","useAppShellConfig","isCompactMode","switchVerticalNavigationMode","verticalNavigationMode","verticalNavigationItems","useNavigationContext","isVerticalNavigationClosed","showVerticalNavigationButton","length","HvHeaderActions","header","actions","map","action","index","headerActionKey","internalActions","find","internalAction","bundle","jsx","InternalAction","config","DynamicAction","HvButton","IconUiKit","HeaderActions$1"],"mappings":";;;;;;;;AAcA,MAAMA,IAAgBA,MAAM;;AACpB,QAAA;AAAA,IAAEC,GAAAA;AAAAA,MAAMC,EAAe,GACvBC,IAAiBC,KACjB;AAAA,IACJC,eAAAA;AAAAA,IACAC,8BAAAA;AAAAA,IACAC,wBAAAA;AAAAA,IACAC,yBAAAA;AAAAA,MACEC,EAAqB,GAEnBC,IAA6BH,MAA2B,UACxDI,IACJN,KAAiBG,EAAwBI,SAAS;AAEpD,2BACGC,GACEV,EAAAA,UAAAA;AAAAA,KAAAA,IAAAA,KAAAA,gBAAAA,EAAgBW,WAAhBX,gBAAAA,EAAwBY,QAAQC,IAC/B,CAACC,GAAgCC,MAAkB;AAC3CC,YAAAA,IAAmB,gBAAeD,CAAM;AAE5C,aAACE,EAAgBC,KACfC,CAAAA,MAAkBA,EAAeC,WAAWN,EAAOM,MACrD,IAWA,gBAAAC,EAACC,KAEC,QAAQR,EAAOM,WACXN,EAAOS,UAFNP,CAGL,IAZA,gBAAAK,EAACG,KAEC,QAAQV,EAAOM,WACXN,EAAOS,UAFNP,CAGL;AAAA,IAQF;AAAA,IAKPR,KACC,gBAAAa,EAACI,GACC,EAAA,MAAI,IACJ,SAAS,MAAMtB,EAAAA,GACf,SAAQ,kBACR,cACEI,IACIT,EAAE,uCAAuC,KAAK,KAC9CA,EAAE,wCAAwC,KAAK,IAErD,iBAAe,CAACS,GAChB,UAAA,gBAAAc,EAACK,GAAU,EAAA,MAAMnB,IAA6B,SAAS,QAAQ,CAAA,GACjE;AAAA,EAEJ,EAAA,CAAA;AAEJ,GAEAoB,IAAe9B;"}