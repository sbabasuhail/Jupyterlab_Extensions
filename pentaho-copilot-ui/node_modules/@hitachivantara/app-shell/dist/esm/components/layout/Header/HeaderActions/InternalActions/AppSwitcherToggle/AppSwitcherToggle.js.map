{"version":3,"file":"AppSwitcherToggle.js","sources":["../../../../../../../../src/components/layout/Header/HeaderActions/InternalActions/AppSwitcherToggle/AppSwitcherToggle.tsx"],"sourcesContent":["import { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { createPortal } from \"react-dom\";\nimport { v4 as uuid } from \"uuid\";\nimport { ClickAwayListener } from \"@mui/material\";\n\nimport {\n  HvAppSwitcherActionApplication,\n  HvAppSwitcher,\n  HvButton,\n  HvTypography\n} from \"@hitachivantara/uikit-react-core\";\n\nimport {\n  HvAppShellAppSwitcherConfig,\n  HvAppShellAppSwitcherItemConfig\n} from \"@hitachivantara/app-shell-shared\";\n\nimport StyledAppShellPanelWrapper from \"./styles\";\nimport IconUiKit from \"../../../../../IconUiKit\";\nimport { CONFIG_TRANSLATIONS_NAMESPACE } from \"../../../../../../lib/i18n\";\nimport includesString from \"../../../../../../lib/utils/textUtil\";\nimport createAppContainerElement from \"../../../../../../lib/utils/documentUtil\";\n\nconst AppSwitcherToggle = ({ title, apps }: HvAppShellAppSwitcherConfig) => {\n  const { t } = useTranslation();\n  const { t: tConfig } = useTranslation(CONFIG_TRANSLATIONS_NAMESPACE);\n  const [isPanelOpen, setIsPanelOpen] = useState(false);\n\n  /**\n   * Creates the apps list to be sent to the HvAppSwitcherPanel.\n   *\n   * @memberof AppSwitcherToggle\n   */\n  const createAppsList = (): HvAppSwitcherActionApplication[] => {\n    return apps\n      ? apps.map((app: HvAppShellAppSwitcherItemConfig) => ({\n          name: tConfig(app.label),\n          description: app.description\n            ? tConfig(app.description).toString()\n            : undefined,\n          url: includesString(app.url, \":\")\n            ? app.url\n            : tConfig(app.url).toString(),\n          target: app.target === \"NEW\" ? \"_blank\" : \"_top\",\n          iconElement: app.icon && <IconUiKit name={app.icon.name} />\n        }))\n      : [];\n  };\n\n  /**\n   * Closes the apps panel.\n   *\n   * @memberof AppSwitcherToggle\n   */\n  const closeAppSwitcherPanel = () => {\n    setIsPanelOpen(false);\n  };\n\n  /**\n   * Handles action clicked event from the AppSwitcherPanel items\n   *\n   * @memberof AppSwitcherToggle\n   */\n  const handleAppSwitcherPanelItemClicked = () => {\n    closeAppSwitcherPanel();\n  };\n\n  /**\n   * Handles the click on the AppSwitcher button.\n   *\n   * @memberof AppSwitcherToggle\n   */\n  const handleAppSwitcherButtonClick = () => {\n    setIsPanelOpen(!isPanelOpen);\n  };\n\n  if (!apps || apps.length === 0) {\n    return null;\n  }\n\n  const finalTitle: string = title\n    ? tConfig(title)\n    : t(\"header.appSwitcher.title\");\n\n  const appSwitcherPanelId = `appSwitcherPanel-${uuid()}`;\n  const extraProps = {\n    ...(isPanelOpen ? { \"aria-controls\": appSwitcherPanelId } : {})\n  };\n\n  return (\n    <ClickAwayListener onClickAway={closeAppSwitcherPanel}>\n      <div style={{ display: \"flex\", margin: 0 }}>\n        <HvButton\n          icon\n          onClick={handleAppSwitcherButtonClick}\n          variant=\"secondaryGhost\"\n          aria-label={finalTitle}\n          aria-expanded={isPanelOpen}\n          {...extraProps}>\n          <IconUiKit name=\"AppSwitcher\" />\n        </HvButton>\n        {isPanelOpen &&\n          createPortal(\n            <StyledAppShellPanelWrapper\n              id={appSwitcherPanelId}\n              role=\"region\"\n              aria-label={t(\"header.appSwitcher.ariaLabel\") ?? \"\"}>\n              <HvAppSwitcher\n                applications={createAppsList()}\n                onActionClickedCallback={handleAppSwitcherPanelItemClicked}\n                header={\n                  <HvTypography variant=\"label\">{finalTitle}</HvTypography>\n                }\n              />\n            </StyledAppShellPanelWrapper>,\n            createAppContainerElement()\n          )}\n      </div>\n    </ClickAwayListener>\n  );\n};\n\nexport default AppSwitcherToggle;\n"],"names":["AppSwitcherToggle","title","apps","t","useTranslation","tConfig","CONFIG_TRANSLATIONS_NAMESPACE","isPanelOpen","setIsPanelOpen","useState","createAppsList","map","app","name","label","description","toString","undefined","url","includesString","target","iconElement","icon","jsx","IconUiKit","closeAppSwitcherPanel","handleAppSwitcherPanelItemClicked","handleAppSwitcherButtonClick","length","finalTitle","appSwitcherPanelId","uuid","extraProps","ClickAwayListener","jsxs","display","margin","HvButton","createPortal","StyledAppShellPanelWrapper","HvAppSwitcher","HvTypography","createAppContainerElement","AppSwitcherToggle$1"],"mappings":";;;;;;;;;;;;AAwBA,MAAMA,IAAoBA,CAAC;AAAA,EAAEC,OAAAA;AAAAA,EAAOC,MAAAA;AAAkC,MAAM;AACpE,QAAA;AAAA,IAAEC,GAAAA;AAAAA,MAAMC,EAAe,GACvB;AAAA,IAAED,GAAGE;AAAAA,EAAAA,IAAYD,EAAeE,CAA6B,GAC7D,CAACC,GAAaC,CAAc,IAAIC,EAAS,EAAK,GAO9CC,IAAiBA,MACdR,IACHA,EAAKS,IAAI,CAACC,OAA0C;AAAA,IAClDC,MAAMR,EAAQO,EAAIE,KAAK;AAAA,IACvBC,aAAaH,EAAIG,cACbV,EAAQO,EAAIG,WAAW,EAAEC,SACzBC,IAAAA;AAAAA,IACJC,KAAKC,EAAeP,EAAIM,KAAK,GAAG,IAC5BN,EAAIM,MACJb,EAAQO,EAAIM,GAAG,EAAEF,SAAS;AAAA,IAC9BI,QAAQR,EAAIQ,WAAW,QAAQ,WAAW;AAAA,IAC1CC,aAAaT,EAAIU,QAAQ,gBAAAC,EAACC,KAAU,MAAMZ,EAAIU,KAAKT,MAAK;AAAA,EAAA,EACxD,IACF,CAAA,GAQAY,IAAwBA,MAAM;AAClCjB,IAAAA,EAAe,EAAK;AAAA,EAAA,GAQhBkB,IAAoCA,MAAM;AACxB,IAAAD;EAAA,GAQlBE,IAA+BA,MAAM;AACzCnB,IAAAA,EAAe,CAACD,CAAW;AAAA,EAAA;AAG7B,MAAI,CAACL,KAAQA,EAAK0B,WAAW;AACpB,WAAA;AAGT,QAAMC,IAAqB5B,IACvBI,EAAQJ,CAAK,IACbE,EAAE,0BAA0B,GAE1B2B,IAAsB,oBAAmBC,EAAAA,CAAO,IAChDC,IAAa;AAAA,IACjB,GAAIzB,IAAc;AAAA,MAAE,iBAAiBuB;AAAAA,IAAAA,IAAuB,CAAC;AAAA,EAAA;AAG/D,2BACGG,GAAkB,EAAA,aAAaR,GAC9B,UAAA,gBAAAS,EAAC,SAAI,OAAO;AAAA,IAAEC,SAAS;AAAA,IAAQC,QAAQ;AAAA,EACrC,GAAA,UAAA;AAAA,IAAA,gBAAAb,EAACc,KACC,MAAI,IACJ,SAASV,GACT,SAAQ,kBACR,cAAYE,GACZ,iBAAetB,GACf,GAAIyB,GACJ,4BAACR,GAAU,EAAA,MAAK,cAAa,CAAA,GAC/B;AAAA,IACCjB,KACC+B,EACG,gBAAAf,EAAAgB,GAAA,EACC,IAAIT,GACJ,MAAK,UACL,cAAY3B,EAAE,8BAA8B,KAAK,IACjD,UAAC,gBAAAoB,EAAAiB,GAAA,EACC,cAAc9B,EACd,GAAA,yBAAyBgB,GACzB,QACG,gBAAAH,EAAAkB,GAAA,EAAa,SAAQ,SAASZ,UAAWA,EAAA,CAAA,EAC3C,CAAA,EAEL,CAAA,GACAa,GACF;AAAA,EAAA,EACJ,CAAA,EACF,CAAA;AAEJ,GAEAC,IAAe3C;"}