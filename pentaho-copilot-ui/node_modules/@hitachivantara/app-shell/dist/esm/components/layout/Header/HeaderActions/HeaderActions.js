import { jsxs as f, jsx as o } from "@emotion/react/jsx-runtime";
import { useTranslation as g } from "react-i18next";
import { HvHeaderActions as p, HvButton as h } from "@hitachivantara/uikit-react-core";
import A from "../../../../lib/hooks/useAppShellConfig.js";
import N from "../../../../providers/hooks/useNavigationContext.js";
import b from "../../../IconUiKit/index.js";
import C from "./DynamicAction/DynamicAction.js";
import x, { internalActions as H } from "./InternalActions/InternalAction/InternalAction.js";
const M = () => {
  var a;
  const {
    t: i
  } = g(), e = A(), {
    isCompactMode: s,
    switchVerticalNavigationMode: c,
    verticalNavigationMode: l,
    verticalNavigationItems: d
  } = N(), t = l === "CLOSED", m = s && d.length > 0;
  return /* @__PURE__ */ f(p, { children: [
    (a = e == null ? void 0 : e.header) == null ? void 0 : a.actions.map((n, u) => {
      const r = `headerAction_${u}`;
      return H.find((v) => v.bundle === n.bundle) ? /* @__PURE__ */ o(x, { bundle: n.bundle, ...n.config }, r) : /* @__PURE__ */ o(C, { bundle: n.bundle, ...n.config }, r);
    }),
    m && /* @__PURE__ */ o(h, { icon: !0, onClick: () => c(), variant: "secondaryGhost", "aria-label": t ? i("header.navigation.openNavigationPanel") ?? "" : i("header.navigation.closeNavigationPanel") ?? "", "aria-expanded": !t, children: /* @__PURE__ */ o(b, { name: t ? "Menu" : "Close" }) })
  ] });
}, P = M;
export {
  P as default
};
//# sourceMappingURL=HeaderActions.js.map
