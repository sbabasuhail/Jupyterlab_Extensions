{"version":3,"file":"AppShellRoutes.js","sources":["../../../../src/components/AppShellRoutes/AppShellRoutes.tsx"],"sourcesContent":["import { lazy, Suspense } from \"react\";\nimport { Route, Routes } from \"react-router-dom\";\nimport { ErrorBoundary } from \"react-error-boundary\";\n\nimport useAppShellConfig from \"../../lib/hooks/useAppShellConfig\";\nimport AppShellViewProvider from \"../AppShellViewProvider\";\nimport GenericError from \"../../pages/GenericError\";\nimport { getBundleUrl } from \"../../lib/utils/navigationUtil\";\nimport LoadingPage from \"../../pages/LoadingPage\";\n\nconst NotFound = lazy(() => import(\"../../pages/NotFound\"));\n\nconst AppShellRoutes = () => {\n  const config = useAppShellConfig();\n\n  if (!config || !config.apps) {\n    return null;\n  }\n\n  const views = config.apps.flatMap(\n    app =>\n      app.views?.map(view => ({\n        id: app.id,\n        bundle: getBundleUrl(app.id, view.bundle),\n        route: view.route\n      })) ?? []\n  );\n\n  return (\n    <Suspense fallback={<LoadingPage />}>\n      <Routes>\n        {views.map(view => {\n          const RouteComponent = lazy(\n            () => import(/* @vite-ignore */ view.bundle)\n          );\n\n          return (\n            <Route\n              key={view.route}\n              path={view.route}\n              element={\n                <AppShellViewProvider id={view.id}>\n                  <ErrorBoundary\n                    key={view.route}\n                    fallback={<GenericError fullPage={false} />}>\n                    <RouteComponent />\n                  </ErrorBoundary>\n                </AppShellViewProvider>\n              }\n            />\n          );\n        })}\n        <Route path=\"*\" key=\"notFound\" element={<NotFound />} />\n      </Routes>\n    </Suspense>\n  );\n};\n\nexport default AppShellRoutes;\n"],"names":["NotFound","lazy","AppShellRoutes","config","useAppShellConfig","apps","views","flatMap","app","map","view","id","bundle","getBundleUrl","route","Suspense","LoadingPage","Routes","RouteComponent","jsx","Route","AppShellViewProvider","ErrorBoundary","GenericError","AppShellRoutes$1"],"mappings":";;;;;;;;;AAUA,MAAMA,IAAWC,EAAK,MAAM,OAAO,+BAAsB,CAAC,GAEpDC,IAAiBA,MAAM;AAC3B,QAAMC,IAASC;AAEf,MAAI,CAACD,KAAU,CAACA,EAAOE;AACd,WAAA;AAGHC,QAAAA,IAAQH,EAAOE,KAAKE,QACxBC,OACEA;;AAAAA,aAAAA,IAAAA,EAAIF,UAAJE,gBAAAA,EAAWC,IAAIC,CAASA,OAAA;AAAA,MACtBC,IAAIH,EAAIG;AAAAA,MACRC,QAAQC,EAAaL,EAAIG,IAAID,EAAKE,MAAM;AAAA,MACxCE,OAAOJ,EAAKI;AAAAA,IAAAA,QACP,CAAA;AAAA,GACX;AAEA,2BACGC,GAAS,EAAA,4BAAWC,GAAW,CAAA,CAAA,GAC9B,4BAACC,GACEX,EAAAA,UAAAA;AAAAA,IAAAA,EAAMG,IAAIC,CAAQA,MAAA;AACXQ,YAAAA,IAAiBjB,EACrB,MAAM;AAAA;AAAA,QAA0BS,EAAKE;AAAAA,OACvC;AAGE,aAAA,gBAAAO,EAACC,GAEC,EAAA,MAAMV,EAAKI,OACX,SACE,gBAAAK,EAACE,GAAqB,EAAA,IAAIX,EAAKC,IAC7B,UAAC,gBAAAQ,EAAAG,GAAA,EAEC,UAAU,gBAAAH,EAACI,GAAa,EAAA,UAAU,GAAM,CAAA,GACxC,UAAC,gBAAAJ,EAAAD,GAAA,CAAc,CAAA,EAFVR,GAAAA,EAAKI,KAGZ,EAAA,CACF,EATGJ,GAAAA,EAAKI,KAWV;AAAA,IAAA,CAEL;AAAA,IACD,gBAAAK,EAACC,KAAM,MAAK,KAAmB,SAAU,gBAAAD,EAAAnB,GAAA,CAAA,MAArB,UAAiC;AAAA,EAAA,EACvD,CAAA,EACF,CAAA;AAEJ,GAEAwB,IAAetB;"}