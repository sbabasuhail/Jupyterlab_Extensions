import { jsx as r, jsxs as u } from "@emotion/react/jsx-runtime";
import { lazy as p, Suspense as i } from "react";
import { Routes as s, Route as n } from "react-router-dom";
import { ErrorBoundary as d } from "react-error-boundary";
import a from "../../lib/hooks/useAppShellConfig.js";
import { getBundleUrl as f } from "../../lib/utils/navigationUtil.js";
import c from "../../pages/LoadingPage/LoadingPage.js";
import h from "../AppShellViewProvider/AppShellViewProvider.js";
import g from "../../pages/GenericError/GenericError.js";
const b = p(() => import("../../pages/NotFound/index.js")), R = () => {
  const t = a();
  if (!t || !t.apps)
    return null;
  const m = t.apps.flatMap((o) => {
    var e;
    return ((e = o.views) == null ? void 0 : e.map((l) => ({
      id: o.id,
      bundle: f(o.id, l.bundle),
      route: l.route
    }))) ?? [];
  });
  return /* @__PURE__ */ r(i, { fallback: /* @__PURE__ */ r(c, {}), children: /* @__PURE__ */ u(s, { children: [
    m.map((o) => {
      const e = p(() => import(
        /* @vite-ignore */
        o.bundle
      ));
      return /* @__PURE__ */ r(n, { path: o.route, element: /* @__PURE__ */ r(h, { id: o.id, children: /* @__PURE__ */ r(d, { fallback: /* @__PURE__ */ r(g, { fullPage: !1 }), children: /* @__PURE__ */ r(e, {}) }, o.route) }) }, o.route);
    }),
    /* @__PURE__ */ r(n, { path: "*", element: /* @__PURE__ */ r(b, {}) }, "notFound")
  ] }) });
}, E = R;
export {
  E as default
};
//# sourceMappingURL=AppShellRoutes.js.map
