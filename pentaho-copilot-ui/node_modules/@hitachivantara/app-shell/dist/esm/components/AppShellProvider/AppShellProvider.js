import { jsx as h } from "@emotion/react/jsx-runtime";
import { useContext as R, useState as f, useEffect as g, useMemo as E } from "react";
import { HvAppShellContext as _, HvAppShellRuntimeContext as T } from "@hitachivantara/app-shell-shared";
import { BrowserRouter as $ } from "react-router-dom";
import { I18nContext as w } from "react-i18next";
import { themes as N, HvProvider as H } from "@hitachivantara/uikit-react-core";
import B from "../../lib/hooks/useAppShellConfig.js";
import b from "../../lib/utils/basePathUtils.js";
import { addResourceBundles as j, CONFIG_TRANSLATIONS_NAMESPACE as y } from "../../lib/i18n/index.js";
import D, { LOCAL_STORAGE_KEYS as F } from "../../lib/hooks/useLocalStorage.js";
function P(a, ...i) {
  return i.reduce((o, n) => n === void 0 ? o : o === void 0 ? n : {
    ...o,
    ...n
  }, a);
}
const G = ({
  children: a,
  config: i,
  configUrl: o
}) => {
  var c, v, A, C;
  const n = B(), {
    i18n: l
  } = R(w), {
    value: x
  } = D(F.COLOR_MODE), [p, u] = f(void 0), [O, I] = f(!1);
  g(() => {
    o && fetch(new URL(o)).then((r) => r.json()).then((r) => u(r)).catch((r) => {
      console.error(`It was not possible to obtain the context from: ${o}`, r), u(void 0), I(!0);
    });
  }, [o]);
  const m = E(() => P(p, i, n), [p, i, n]);
  if (O)
    throw Error("It was not possible to obtain the configuration");
  const e = P({
    apps: [],
    menu: [],
    navigationMode: "TOP_AND_LEFT"
  }, m);
  e.translations && j(l, e.translations, y);
  const [d, L] = f(void 0);
  g(() => {
    var r, S;
    (r = e.theming) != null && r.themes && Promise.all((S = e.theming.themes) == null ? void 0 : S.map((t) => (t === "ds3" || t === "ds5") && N[t] || import(
      /* @vite-ignore */
      t
    ).then((s) => s.default).catch((s) => {
      console.error(`Import of theme bundle ${t} failed! ${s}`);
    }))).then((t) => {
      L(t.filter((s) => !!s));
    }).catch((t) => {
      console.error(`Import of themes failed! ${t}`);
    });
  }, [(c = e.theming) == null ? void 0 : c.themes]);
  const M = E(() => ({
    i18n: l
  }), [l]);
  return !(m != null && m.apps) || (v = e.theming) != null && v.themes && !d ? null : /* @__PURE__ */ h(_.Provider, { value: e, children: /* @__PURE__ */ h(T.Provider, { value: M, children: /* @__PURE__ */ h(H, { themes: d, theme: (A = e.theming) == null ? void 0 : A.theme, colorMode: x ?? ((C = e.theming) == null ? void 0 : C.colorMode), children: /* @__PURE__ */ h($, { basename: b(e), children: a }) }) }) });
}, U = G;
export {
  U as default
};
//# sourceMappingURL=AppShellProvider.js.map
