import { HvAppShellAppsConfig } from '@hitachivantara/app-shell-shared';
import { HvAppShellConfig } from '@hitachivantara/app-shell-shared';
import { HvAppShellIcon } from '@hitachivantara/app-shell-shared';
import { HvAppShellLogo } from '@hitachivantara/app-shell-shared';
import { HvAppShellMainPanelConfig } from '@hitachivantara/app-shell-shared';
import { HvAppShellMenuConfig } from '@hitachivantara/app-shell-shared';
import { HvAppShellModulesConfig } from '@hitachivantara/app-shell-shared';
import { HvAppShellViewsConfig } from '@hitachivantara/app-shell-shared';
import type { JSX as JSX_2 } from '@emotion/react/jsx-runtime';

export declare const HvAppShell: {
    ({ ...wrappedProps }: any): JSX_2.Element;
    displayName: string;
};

export { HvAppShellAppsConfig }

export { HvAppShellConfig }

export declare const HvAppShellEvents: {
    NotificationsEvent: string;
    ThemeEvent: string;
};

export { HvAppShellIcon }

export { HvAppShellLogo }

export { HvAppShellMainPanelConfig }

export { HvAppShellMenuConfig }

export { HvAppShellModulesConfig }

export { HvAppShellViewsConfig }

declare interface NavigationOptions {
    /**
     * Whether a history replace action should be performed instead of the default history push.
     */
    replace: boolean;
    /**
     * Data to associate with the new location.
     */
    state?: unknown;
}

declare type PathDestination = {
    /**
     * A URL pathname, beginning with a /.
     */
    pathname: string;
    /**
     * A URL search string, beginning with a ?.
     */
    search?: string;
    /**
     * A URL fragment identifier, beginning with a #.
     */
    hash?: string;
};

declare type To = string | PathDestination | ViewDestination;

export declare const useApplicationBundleId: () => string;

export declare const useHvAppShellBasePath: () => string;

export declare const useHvCurrentNavigationPath: () => {
    label: string;
    path: string | undefined;
}[];

export declare const useHvNavigation: () => {
    getViewRoute: (viewBundleDir: string | ViewDestination) => string | undefined;
    navigate: (to: To, options?: Partial<NavigationOptions>) => void;
};

declare type ViewDestination = {
    /**
     * The application view bundle identifier to fetch the corresponding route from the App Shell configuration file.
     */
    viewBundle: string;
    /**
     * The module path parameters to be compiled with the modulePath.
     */
    pathParams?: Record<string, string>;
    /**
     * A URL search string, beginning with a ?.
     */
    search?: string;
    /**
     * A URL fragment identifier, beginning with a #.
     */
    hash?: string;
};

export { }
